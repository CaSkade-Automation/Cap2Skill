{
    "control_entities": [
        {
            "name": "/amcl_pose",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/amcl_pose` topic provides the estimated pose of a robot, including its position and orientation, with an associated covariance. It is typically used for localization purposes in a mobile robot.\n\nMobile Robot Module:\n    - This element relates to the Localization module of a Mobile Robot.\n\nRelevance for Specific Tasks:\n    - It is crucial for tasks that require accurate localization, such as navigation and path planning. It helps in determining the robot's position within a map, which is essential for autonomous movement.\n\nUsage in the ROS2 System:\n    - It is used in ROS2 systems for tasks like autonomous navigation, where nodes such as `move_base` or custom navigation stacks subscribe to this topic to get the robot's current pose for planning and control purposes.",
            "interfaces": [
                {
                    "name": "geometry_msgs/msg/PoseWithCovarianceStamped",
                    "details": "# This expresses an estimated pose with a reference coordinate frame and timestamp\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nPoseWithCovariance pose\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tfloat64[36] covariance"
                }
            ]
        },
        {
            "name": "/attached_collision_object",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n   - The `/attached_collision_object` topic is used to manage collision objects that are attached to robot links. It allows for the addition, removal, and manipulation of objects in the robot's environment, ensuring safe and effective interaction with the surroundings.\n\nMobile Robot Module:\n   - This element relates to the Manipulation and Perception modules of a mobile robot, particularly those equipped with robotic arms or grippers.\n\nRelevance for Specific Tasks:\n   - It is crucial for tasks involving object manipulation, such as picking, placing, or moving objects while avoiding collisions. It helps in planning and executing movements that require awareness of attached objects.\n\nUsage in the ROS2 System:\n   - Suitable for use in robotic systems utilizing MoveIt for motion planning and control, where managing attached objects is necessary for tasks like automated assembly, material handling, and human-robot interaction.",
            "interfaces": [
                {
                    "name": "moveit_msgs/msg/AttachedCollisionObject",
                    "details": "# The CollisionObject will be attached with a fixed joint to this link\nstring link_name\n\n#This contains the actual shapes and poses for the CollisionObject\n#to be attached to the link\n#If action is remove and no object.id is set, all objects\n#attached to the link indicated by link_name will be removed\nCollisionObject object\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tgeometry_msgs/Pose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tstring id\n\tobject_recognition_msgs/ObjectType type\n\t\tstring key\n\t\tstring db\n\tshape_msgs/SolidPrimitive[] primitives\n\t\tuint8 BOX=1\n\t\tuint8 SPHERE=2\n\t\tuint8 CYLINDER=3\n\t\tuint8 CONE=4\n\t\tuint8 PRISM=5\n\t\tuint8 type\n\t\tfloat64[<=3] dimensions  #\n\t\tuint8 BOX_X=0\n\t\tuint8 BOX_Y=1\n\t\tuint8 BOX_Z=2\n\t\tuint8 SPHERE_RADIUS=0\n\t\tuint8 CYLINDER_HEIGHT=0\n\t\tuint8 CYLINDER_RADIUS=1\n\t\tuint8 CONE_HEIGHT=0\n\t\tuint8 CONE_RADIUS=1\n\t\tuint8 PRISM_HEIGHT=0\n\t\tgeometry_msgs/Polygon polygon\n\t\t\tPoint32[] points\n\t\t\t\t#\n\t\t\t\t#\n\t\t\t\tfloat32 x\n\t\t\t\tfloat32 y\n\t\t\t\tfloat32 z\n\tgeometry_msgs/Pose[] primitive_poses\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tshape_msgs/Mesh[] meshes\n\t\tMeshTriangle[] triangles\n\t\t\tuint32[3] vertex_indices\n\t\tgeometry_msgs/Point[] vertices\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Pose[] mesh_poses\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tshape_msgs/Plane[] planes\n\t\t#\n\t\tfloat64[4] coef\n\tgeometry_msgs/Pose[] plane_poses\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tstring[] subframe_names\n\tgeometry_msgs/Pose[] subframe_poses\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tbyte ADD=0\n\tbyte REMOVE=1\n\tbyte APPEND=2\n\tbyte MOVE=3\n\tbyte operation\n\n# The set of links that the attached objects are allowed to touch\n# by default - the link_name is already considered by default\nstring[] touch_links\n\n# If certain links were placed in a particular posture for this object to remain attached\n# (e.g., an end effector closing around an object), the posture necessary for releasing\n# the object is stored here\ntrajectory_msgs/JointTrajectory detach_posture\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tstring[] joint_names\n\tJointTrajectoryPoint[] points\n\t\tfloat64[] positions\n\t\tfloat64[] velocities\n\t\tfloat64[] accelerations\n\t\tfloat64[] effort\n\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\n# The weight of the attached object, if known\nfloat64 weight"
                }
            ]
        },
        {
            "name": "/behavior_server/transition_event",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n   - The `/behavior_server/transition_event` topic is used to communicate lifecycle transition events within a ROS2 system. It provides information about the state changes of nodes, such as activation, deactivation, and shutdown, which are crucial for managing node lifecycles.\n\nMobile Robot Module:\n   - This element relates to the control and management module of a mobile robot, specifically in handling the lifecycle states of various nodes.\n\nRelevance for Specific Tasks:\n   - This topic is essential for tasks that require monitoring and controlling the state transitions of nodes, ensuring that nodes are in the correct state for operation. It is particularly relevant in scenarios where nodes need to be dynamically configured, activated, or deactivated based on the robot's operational requirements.\n\nUsage in the ROS2 System:\n   - It is suitable for lifecycle management tasks, such as ensuring nodes are correctly configured before activation, handling errors during state transitions, and managing the orderly shutdown of nodes. It is typically used by lifecycle managers and node controllers within a ROS2 system.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/msg/TransitionEvent",
                    "details": "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n\n# The starting state from which this event transitioned.\nState start_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label\n\n# The end state of this transition event.\nState goal_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label"
                }
            ]
        },
        {
            "name": "/bt_navigator/transition_event",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/bt_navigator/transition_event` topic is used to communicate lifecycle transition events within a ROS2 system. It provides information about the state transitions of nodes, such as activation, deactivation, and shutdown, which are crucial for managing the lifecycle of nodes in a robotic system.\n    - It is typically used for monitoring and managing the state of nodes to ensure they are in the correct state for operation.\n\nMobile Robot Module:\n    - This element relates to the control and management module of a mobile robot, particularly in the context of node lifecycle management.\n\nRelevance for Specific Tasks:\n    - This ROS2 element is essential for tasks that require dynamic reconfiguration or state management of nodes, such as activating or deactivating navigation or sensor nodes based on the robot's operational context.\n    - It plays a role in scenarios where the robot needs to transition between different operational states, such as starting up, shutting down, or handling errors.\n\nUsage in the ROS2 System:\n    - Suitable for use in ROS2 systems that implement lifecycle management, such as those using the ROS2 Navigation Stack, where nodes need to be activated or deactivated based on the robot's navigation tasks.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/msg/TransitionEvent",
                    "details": "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n\n# The starting state from which this event transitioned.\nState start_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label\n\n# The end state of this transition event.\nState goal_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label"
                }
            ]
        },
        {
            "name": "/clicked_point",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/clicked_point` topic is used to publish a point in 3D space that has been selected or clicked by a user, typically in a graphical interface. It is used to communicate the coordinates of a point of interest.\n\nMobile Robot Module:\n    - This element relates to the navigation and perception modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It can be used to set target points for navigation or to mark areas of interest for further inspection. It is particularly useful in tasks where user interaction is required to specify locations, such as in teleoperation or interactive mapping.\n\nUsage in the ROS2 System:\n    - Suitable for tasks like interactive navigation where a user clicks on a map to set a destination, or in robot-assisted surveying where specific points need to be marked for data collection.",
            "interfaces": [
                {
                    "name": "geometry_msgs/msg/PointStamped",
                    "details": "# This represents a Point with reference coordinate frame and timestamp\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nPoint point\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z"
                }
            ]
        },
        {
            "name": "/cmd_vel",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/cmd_vel` topic is used to command the velocity of a mobile robot. It typically carries messages that specify the desired linear and angular velocities for the robot's movement.\n\nMobile Robot Module:\n    - This element relates to the motion control module of the mobile robot.\n\nRelevance for Specific Tasks:\n    - The `/cmd_vel` topic is crucial for tasks involving navigation and movement control, such as directing the robot to follow a path or avoid obstacles. It is used in scenarios where precise control of the robot's speed and direction is required.\n\nUsage in the ROS2 System:\n    - It is commonly used in ROS2 systems for tasks like teleoperation, autonomous navigation, and integration with higher-level planning algorithms. Nodes such as navigation controllers and teleoperation interfaces typically publish to this topic.",
            "interfaces": [
                {
                    "name": "geometry_msgs/msg/Twist",
                    "details": "# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\nVector3  angular\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z"
                }
            ]
        },
        {
            "name": "/collision_object",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n   - The `/collision_object` topic is used to manage collision objects within a robotic environment. It allows for the addition, removal, and manipulation of objects in the planning scene, which is crucial for path planning and obstacle avoidance.\n\nMobile Robot Module:\n   - This element relates to the perception and planning modules of a mobile robot, as it provides information about the environment's static and dynamic obstacles.\n\nRelevance for Specific Tasks:\n   - It is essential for tasks involving navigation and manipulation, where understanding and interacting with the environment's objects are necessary. It helps in planning paths that avoid collisions and in executing tasks that require interaction with specific objects.\n\nUsage in the ROS2 System:\n   - Suitable for use in robotic arms for pick-and-place tasks, autonomous navigation systems for obstacle avoidance, and any application requiring dynamic interaction with the environment. It is typically used by nodes that handle motion planning, such as those in the MoveIt framework.",
            "interfaces": [
                {
                    "name": "moveit_msgs/msg/CollisionObject",
                    "details": "# a header, used for interpreting the poses\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# DISCLAIMER: This field is not in use yet and all other poses\n# are still interpreted in the header frame.\n# https://github.com/ros-planning/moveit/pull/2037\n# implements the actual logic for this field.\n# ---\n# The object's pose relative to the header frame.\n# The shapes and subframe poses are defined relative to this pose.\ngeometry_msgs/Pose pose\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\n\n# The id of the object (name used in MoveIt)\nstring id\n\n# The object type in a database of known objects\nobject_recognition_msgs/ObjectType type\n\tstring key\n\tstring db\n\n# The collision geometries associated with the object.\n# Their poses are with respect to the object's pose\n\n# Solid geometric primitives\nshape_msgs/SolidPrimitive[] primitives\n\tuint8 BOX=1\n\tuint8 SPHERE=2\n\tuint8 CYLINDER=3\n\tuint8 CONE=4\n\tuint8 PRISM=5\n\tuint8 type\n\tfloat64[<=3] dimensions  #\n\tuint8 BOX_X=0\n\tuint8 BOX_Y=1\n\tuint8 BOX_Z=2\n\tuint8 SPHERE_RADIUS=0\n\tuint8 CYLINDER_HEIGHT=0\n\tuint8 CYLINDER_RADIUS=1\n\tuint8 CONE_HEIGHT=0\n\tuint8 CONE_RADIUS=1\n\tuint8 PRISM_HEIGHT=0\n\tgeometry_msgs/Polygon polygon\n\t\tPoint32[] points\n\t\t\t#\n\t\t\t#\n\t\t\tfloat32 x\n\t\t\tfloat32 y\n\t\t\tfloat32 z\ngeometry_msgs/Pose[] primitive_poses\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\n\n# Meshes\nshape_msgs/Mesh[] meshes\n\tMeshTriangle[] triangles\n\t\tuint32[3] vertex_indices\n\tgeometry_msgs/Point[] vertices\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\ngeometry_msgs/Pose[] mesh_poses\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\n\n# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)\nshape_msgs/Plane[] planes\n\t#\n\tfloat64[4] coef\ngeometry_msgs/Pose[] plane_poses\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\n\n# Named subframes on the object. Use these to define points of interest on the object that you want\n# to plan with (e.g. \"tip\", \"spout\", \"handle\"). The id of the object will be prepended to the subframe.\n# If an object with the id \"screwdriver\" and a subframe \"tip\" is in the scene, you can use the frame\n# \"screwdriver/tip\" for planning.\n# The length of the subframe_names and subframe_poses has to be identical.\nstring[] subframe_names\ngeometry_msgs/Pose[] subframe_poses\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\n\n# Adds the object to the planning scene. If the object previously existed, it is replaced.\nbyte ADD=0\n\n# Removes the object from the environment entirely (everything that matches the specified id)\nbyte REMOVE=1\n\n# Append to an object that already exists in the planning scene. If the object does not exist, it is added.\nbyte APPEND=2\n\n# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)\n# if solely moving the object is desired\nbyte MOVE=3\n\n# Operation to be performed\nbyte operation"
                }
            ]
        },
        {
            "name": "/controller_server/transition_event",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/controller_server/transition_event` topic is used to communicate lifecycle transition events of a node. It provides information about the state changes of a node, such as activation, deactivation, and shutdown.\n    - It is typically used for monitoring and managing the lifecycle states of nodes in a ROS2 system.\n\nMobile Robot Module:\n    - This element relates to the control module of a mobile robot, particularly in managing the lifecycle of control nodes.\n\nRelevance for Specific Tasks:\n    - This element is crucial for ensuring that control nodes are in the correct state for operation, such as being activated before executing control commands.\n    - It plays a role in scenarios where nodes need to transition between states, such as during startup, shutdown, or error recovery processes.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving lifecycle management of control nodes, such as ensuring nodes are properly configured and activated before use.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/msg/TransitionEvent",
                    "details": "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n\n# The starting state from which this event transitioned.\nState start_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label\n\n# The end state of this transition event.\nState goal_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label"
                }
            ]
        },
        {
            "name": "/display_planned_path",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/display_planned_path` topic is used to visualize the planned trajectory of a robot. It publishes messages of type `moveit_msgs/msg/DisplayTrajectory`, which include detailed information about the robot's joint positions and trajectories.\n    - It is typically used for displaying the path that a robot will follow, aiding in planning and verification tasks.\n\nMobile Robot Module:\n    - This ROS2 element relates to the motion planning and control module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - This topic is crucial for tasks involving path planning and execution, as it allows for the visualization and verification of planned paths before execution.\n    - It plays a role in scenarios where a robot's path needs to be checked for feasibility and safety, such as in industrial automation or autonomous navigation.\n\nUsage in the ROS2 System:\n    - It is suitable for use in ROS2 systems that involve motion planning, such as those using the MoveIt framework for robotic arm manipulation or mobile robot navigation.",
            "interfaces": [
                {
                    "name": "moveit_msgs/msg/DisplayTrajectory",
                    "details": "# The model id for which this path has been generated\nstring model_id\n\n# The representation of the path contains position values for all the joints that are moving along the path; a sequence of trajectories may be specified\nRobotTrajectory[] trajectory\n\ttrajectory_msgs/JointTrajectory joint_trajectory\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tJointTrajectoryPoint[] points\n\t\t\tfloat64[] positions\n\t\t\tfloat64[] velocities\n\t\t\tfloat64[] accelerations\n\t\t\tfloat64[] effort\n\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\ttrajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tMultiDOFJointTrajectoryPoint[] points\n\t\t\tgeometry_msgs/Transform[] transforms\n\t\t\t\tVector3 translation\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion rotation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tgeometry_msgs/Twist[] velocities\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Twist[] accelerations\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\n# The robot state is used to obtain positions for all/some of the joints of the robot.\n# It is used by the path display node to determine the positions of the joints that are not specified in the joint path message above.\n# If the robot state message contains joint position information for joints that are also mentioned in the joint path message, the positions in the joint path message will overwrite the positions specified in the robot state message.\nRobotState trajectory_start\n\tsensor_msgs/JointState joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] name\n\t\tfloat64[] position\n\t\tfloat64[] velocity\n\t\tfloat64[] effort\n\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tgeometry_msgs/Transform[] transforms\n\t\t\tVector3 translation\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion rotation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tgeometry_msgs/Twist[] twist\n\t\t\tVector3  linear\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  angular\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tgeometry_msgs/Wrench[] wrench\n\t\t\tVector3  force\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  torque\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\tAttachedCollisionObject[] attached_collision_objects\n\t\tstring link_name\n\t\tCollisionObject object\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Pose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring id\n\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\tstring key\n\t\t\t\tstring db\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t#\n\t\t\t\tfloat64[4] coef\n\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring[] subframe_names\n\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tbyte ADD=0\n\t\t\tbyte REMOVE=1\n\t\t\tbyte APPEND=2\n\t\t\tbyte MOVE=3\n\t\t\tbyte operation\n\t\tstring[] touch_links\n\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tJointTrajectoryPoint[] points\n\t\t\t\tfloat64[] positions\n\t\t\t\tfloat64[] velocities\n\t\t\t\tfloat64[] accelerations\n\t\t\t\tfloat64[] effort\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\tfloat64 weight\n\tbool is_diff"
                }
            ]
        },
        {
            "name": "/dynamic_joint_states",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/dynamic_joint_states` topic provides real-time information about the state of various joints in a robotic system. It is typically used to monitor and control the positions, velocities, and efforts of joints dynamically.\n\nMobile Robot Module:\n    - This element relates to the manipulator or arm module of a mobile robot, which includes joints and actuators.\n\nRelevance for Specific Tasks:\n    - It is crucial for tasks involving precise joint control, such as robotic arm manipulation, where real-time feedback on joint states is necessary for accurate movement and positioning. It helps in tasks like pick-and-place operations or any task requiring dynamic joint adjustments.\n\nUsage in the ROS2 System:\n    - Suitable for use in ROS2 systems that require dynamic joint state feedback, such as robotic arms in manufacturing, service robots with manipulators, and any application needing real-time joint state monitoring and control.",
            "interfaces": [
                {
                    "name": "control_msgs/msg/DynamicJointState",
                    "details": "std_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# List of resource names, e.g. [\"arm_joint_1\", \"arm_joint_2\", \"gripper_joint\"]\nstring[] joint_names\n# Key-value pairs representing interfaces and their corresponding values for each joint listed in `joint_names`\nInterfaceValue[] interface_values\n\tstring[] interface_names\n\tfloat64[] values"
                }
            ]
        },
        {
            "name": "/global_costmap/costmap",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/global_costmap/costmap` topic provides a 2-D grid map representation of the environment, indicating occupied, unoccupied, and unknown areas. It is typically used for navigation and path planning tasks.\n\nMobile Robot Module:\n    - This element relates to the Navigation and Path Planning module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It is crucial for solving navigation problems, such as determining safe paths and avoiding obstacles. It plays a role in scenarios where a robot needs to autonomously navigate through an environment.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving autonomous navigation, such as in the `nav2` stack, where it is used by planners and controllers to make informed decisions about movement and obstacle avoidance.",
            "interfaces": [
                {
                    "name": "nav_msgs/msg/OccupancyGrid",
                    "details": "# This represents a 2-D grid map\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# MetaData for the map\nMapMetaData info\n\tbuiltin_interfaces/Time map_load_time\n\t\tint32 sec\n\t\tuint32 nanosec\n\tfloat32 resolution\n\tuint32 width\n\tuint32 height\n\tgeometry_msgs/Pose origin\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\n# The map data, in row-major order, starting with (0,0).\n# Cell (1, 0) will be listed second, representing the next cell in the x direction.\n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently,\n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown.\nint8[] data"
                }
            ]
        },
        {
            "name": "/global_costmap/costmap_raw",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/global_costmap/costmap_raw` topic provides a 2-D grid map where each cell has an associated cost, representing the environment's traversability. It is typically used for path planning and navigation tasks in mobile robots.\n\nMobile Robot Module:\n    - This ROS2 element relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It is crucial for solving path planning and obstacle avoidance problems by providing detailed environmental information. Typical scenarios include navigating through dynamic environments and optimizing paths based on cost data.\n\nUsage in the ROS2 System:\n    - Suitable for use in ROS2 navigation stacks like Nav2, where it interacts with planners and controllers to facilitate efficient and safe robot movement.",
            "interfaces": [
                {
                    "name": "nav2_msgs/msg/Costmap",
                    "details": "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# MetaData for the map\nCostmapMetaData metadata\n\tbuiltin_interfaces/Time map_load_time\n\t\tint32 sec\n\t\tuint32 nanosec\n\tbuiltin_interfaces/Time update_time\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring layer\n\tfloat32 resolution\n\tuint32 size_x\n\tuint32 size_y\n\tgeometry_msgs/Pose origin\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data"
                }
            ]
        },
        {
            "name": "/global_costmap/costmap_updates",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/global_costmap/costmap_updates` topic is used to provide updates to the global costmap, which is a representation of the environment used for navigation and path planning. It typically contains information about obstacles and free space.\n\nMobile Robot Module:\n    - This element relates to the Navigation and Path Planning module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - This topic is crucial for dynamic path planning and obstacle avoidance. It allows the robot to adapt its path in real-time as it receives updates about changes in the environment, such as moving obstacles or newly discovered areas.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks involving autonomous navigation, where the robot needs to continuously update its understanding of the environment to make informed decisions about its path. Typical ROS2 entities that interact with this element include navigation nodes and planners like `nav2_planner` and `nav2_controller`.",
            "interfaces": [
                {
                    "name": "map_msgs/msg/OccupancyGridUpdate",
                    "details": "std_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data"
                }
            ]
        },
        {
            "name": "/global_costmap/footprint",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/global_costmap/footprint` topic provides the footprint of the robot as a polygon. It is typically used to define the area occupied by the robot in the global costmap, which is crucial for path planning and obstacle avoidance.\n\nMobile Robot Module:\n    - This element relates to the Navigation and Path Planning module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It helps in solving problems related to collision avoidance and path optimization by providing the robot's physical boundary. It is essential in scenarios where the robot needs to navigate through complex environments without colliding with obstacles.\n\nUsage in the ROS2 System:\n    - This topic is suitable for tasks involving global path planning and dynamic obstacle avoidance, where the robot's footprint must be considered to ensure safe navigation.",
            "interfaces": [
                {
                    "name": "geometry_msgs/msg/Polygon",
                    "details": "# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\t#\n\t#\n\tfloat32 x\n\tfloat32 y\n\tfloat32 z"
                }
            ]
        },
        {
            "name": "/global_costmap/global_costmap/transition_event",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/global_costmap/global_costmap/transition_event` topic is used to communicate lifecycle transition events of the global costmap node. It provides information about state changes, such as activation, deactivation, and shutdown, which are crucial for managing the node's lifecycle.\n\nMobile Robot Module:\n    - This element relates to the navigation module of a mobile robot, specifically the global costmap component responsible for path planning and obstacle avoidance.\n\nRelevance for Specific Tasks:\n    - This ROS2 element is essential for managing the lifecycle of the global costmap, ensuring it is correctly configured and activated for navigation tasks. It helps in handling state transitions smoothly, which is critical for maintaining the robot's navigation capabilities.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks involving lifecycle management of navigation components, such as initializing the costmap, handling errors during state transitions, and ensuring the costmap is active when needed for path planning.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/msg/TransitionEvent",
                    "details": "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n\n# The starting state from which this event transitioned.\nState start_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label\n\n# The end state of this transition event.\nState goal_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label"
                }
            ]
        },
        {
            "name": "/goal_pose",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/goal_pose` topic is used to specify a target position and orientation for a mobile robot. It provides a `PoseStamped` message that includes a reference coordinate frame and a timestamp, which is essential for navigation tasks.\n\nMobile Robot Module:\n    - This element relates to the navigation and path planning modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - The `/goal_pose` topic is crucial for tasks involving autonomous navigation, where the robot needs to move to a specific location. It is used in scenarios such as waypoint navigation, obstacle avoidance, and path following.\n\nUsage in the ROS2 System:\n    - It is typically used by navigation stacks like `nav2` to receive goal positions from higher-level applications or user interfaces, enabling the robot to plan and execute a path to the desired location.",
            "interfaces": [
                {
                    "name": "geometry_msgs/msg/PoseStamped",
                    "details": "# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nPose pose\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1"
                }
            ]
        },
        {
            "name": "/initialpose",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/initialpose` topic is used to set or update the estimated initial position and orientation of a robot within a given reference frame. It is typically used for localization purposes, allowing the robot to understand its starting point in the environment.\n\nMobile Robot Module:\n    - This element relates to the Localization module of a Mobile Robot.\n\nRelevance for Specific Tasks:\n    - The `/initialpose` topic is crucial for initializing or resetting the robot's pose in navigation tasks. It is particularly useful in scenarios where the robot needs to re-localize after being moved or when starting up in a known environment.\n\nUsage in the ROS2 System:\n    - It is commonly used in conjunction with navigation stacks like `nav2` for tasks such as autonomous navigation, where accurate initial positioning is essential for path planning and obstacle avoidance.",
            "interfaces": [
                {
                    "name": "geometry_msgs/msg/PoseWithCovarianceStamped",
                    "details": "# This expresses an estimated pose with a reference coordinate frame and timestamp\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nPoseWithCovariance pose\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tfloat64[36] covariance"
                }
            ]
        },
        {
            "name": "/joint_states",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/joint_states` topic is used to convey the state of a set of torque-controlled joints, including their position, velocity, and effort. It is typically used for monitoring and controlling the movement of robotic joints.\n\nMobile Robot Module:\n    - This element relates to the actuation and motion control modules of a mobile robot, particularly those involving joint manipulation.\n\nRelevance for Specific Tasks:\n    - The `/joint_states` topic is crucial for tasks involving precise joint control, such as robotic arm manipulation, where feedback on joint positions, velocities, and efforts is necessary for accurate control and coordination.\n\nUsage in the ROS2 System:\n    - It is commonly used in ROS2 systems for tasks like robotic arm control, where nodes subscribe to this topic to receive real-time joint state information for feedback control loops and motion planning.",
            "interfaces": [
                {
                    "name": "sensor_msgs/msg/JointState",
                    "details": "# This is a message that holds data to describe the state of a set of torque controlled joints.\n#\n# The state of each joint (revolute or prismatic) is defined by:\n#  * the position of the joint (rad or m),\n#  * the velocity of the joint (rad/s or m/s) and\n#  * the effort that is applied in the joint (Nm or N).\n#\n# Each joint is uniquely identified by its name\n# The header specifies the time at which the joint states were recorded. All the joint states\n# in one message have to be recorded at the same time.\n#\n# This message consists of a multiple arrays, one for each part of the joint state.\n# The goal is to make each of the fields optional. When e.g. your joints have no\n# effort associated with them, you can leave the effort array empty.\n#\n# All arrays in this message should have the same size, or be empty.\n# This is the only way to uniquely associate the joint name with the correct\n# states.\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\nstring[] name\nfloat64[] position\nfloat64[] velocity\nfloat64[] effort"
                }
            ]
        },
        {
            "name": "/joint_trajectory_controller/controller_state",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n   - The `/joint_trajectory_controller/controller_state` topic provides the current state of a joint trajectory controller, including desired, actual, and error states for joint positions, velocities, accelerations, and efforts. It is typically used for monitoring and adjusting the performance of joint controllers in robotic systems.\n\nMobile Robot Module:\n   - This element relates to the Actuation and Control module of a mobile robot, specifically focusing on joint control mechanisms.\n\nRelevance for Specific Tasks:\n   - This topic is crucial for tasks involving precise joint control, such as robotic arm manipulation, where feedback on joint states is necessary to ensure accurate movement and positioning. It helps in tuning controllers and diagnosing control issues.\n\nUsage in the ROS2 System:\n   - It is suitable for tasks like robotic arm trajectory execution, where real-time feedback on joint states is essential for maintaining desired trajectories and correcting deviations.",
            "interfaces": [
                {
                    "name": "control_msgs/msg/JointTrajectoryControllerState",
                    "details": "# This message presents current controller state of JTC\n\n# Header timestamp should be update time of controller state\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\nstring[] joint_names\n# The set point, that is, desired state.\ntrajectory_msgs/JointTrajectoryPoint reference\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# Current value of the process (ie: latest sensor measurement on the controlled value).\ntrajectory_msgs/JointTrajectoryPoint feedback\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# The error of the controlled value, essentially reference - feedback (for a regular PID implementation).\ntrajectory_msgs/JointTrajectoryPoint error\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# Current output of the controller.\ntrajectory_msgs/JointTrajectoryPoint output\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# -- deprecated --\ntrajectory_msgs/JointTrajectoryPoint desired\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\ntrajectory_msgs/JointTrajectoryPoint actual\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n\nstring[] multi_dof_joint_names\n# The set point, that is, desired state.\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_reference\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# Current value of the process (ie: latest sensor measurement on the controlled value).\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_feedback\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# The error of the controlled value, essentially reference - feedback (for a regular PID implementation).\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_error\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# Current output of the controller.\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_output\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# -- deprecated --\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_desired\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_actual\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec"
                }
            ]
        },
        {
            "name": "/joint_trajectory_controller/joint_trajectory",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/joint_trajectory_controller/joint_trajectory` topic is used to send joint trajectory commands to a robot's joint trajectory controller. It specifies the desired positions, velocities, accelerations, and efforts for the robot's joints over time.\n    - It is typically used for controlling the movement of robotic arms or other jointed mechanisms.\n\nMobile Robot Module:\n    - This ROS2 element relates to the Actuation module of a Mobile Robot, specifically for controlling jointed mechanisms like robotic arms.\n\nRelevance for Specific Tasks:\n    - This element is crucial for tasks involving precise joint control, such as pick-and-place operations, manipulation tasks, and coordinated motion of multiple joints.\n    - It plays a role in scenarios where smooth and accurate joint movements are required, such as in industrial automation or robotic surgery.\n\nUsage in the ROS2 System:\n    - It is suitable for ROS2 tasks involving trajectory planning and execution, where the joint trajectory controller subscribes to this topic to receive and execute trajectory commands.",
            "interfaces": [
                {
                    "name": "trajectory_msgs/msg/JointTrajectory",
                    "details": "# The header is used to specify the coordinate frame and the reference time for\n# the trajectory durations\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# The names of the active joints in each trajectory point. These names are\n# ordered and must correspond to the values in each trajectory point.\nstring[] joint_names\n\n# Array of trajectory points, which describe the positions, velocities,\n# accelerations and/or efforts of the joints at each time point.\nJointTrajectoryPoint[] points\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec"
                }
            ]
        },
        {
            "name": "/joint_trajectory_controller/state",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/joint_trajectory_controller/state` topic provides the current state of a joint trajectory controller, including desired, actual, and error states for joint positions, velocities, accelerations, and efforts. It is typically used for monitoring and feedback in control loops.\n\nMobile Robot Module:\n    - This element relates to the actuation and control module of a mobile robot, specifically for controlling joint movements.\n\nRelevance for Specific Tasks:\n    - This topic is crucial for tasks involving precise joint control, such as robotic arm manipulation or mobile robot navigation where joint trajectories need to be accurately followed. It helps in assessing the performance of the controller and making necessary adjustments.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks like trajectory tracking, feedback control, and performance monitoring in robotic systems. Typical entities interacting with this topic include joint controllers and monitoring nodes that adjust control parameters based on the state feedback.",
            "interfaces": [
                {
                    "name": "control_msgs/msg/JointTrajectoryControllerState",
                    "details": "# This message presents current controller state of JTC\n\n# Header timestamp should be update time of controller state\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\nstring[] joint_names\n# The set point, that is, desired state.\ntrajectory_msgs/JointTrajectoryPoint reference\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# Current value of the process (ie: latest sensor measurement on the controlled value).\ntrajectory_msgs/JointTrajectoryPoint feedback\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# The error of the controlled value, essentially reference - feedback (for a regular PID implementation).\ntrajectory_msgs/JointTrajectoryPoint error\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# Current output of the controller.\ntrajectory_msgs/JointTrajectoryPoint output\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# -- deprecated --\ntrajectory_msgs/JointTrajectoryPoint desired\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\ntrajectory_msgs/JointTrajectoryPoint actual\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n\nstring[] multi_dof_joint_names\n# The set point, that is, desired state.\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_reference\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# Current value of the process (ie: latest sensor measurement on the controlled value).\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_feedback\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# The error of the controlled value, essentially reference - feedback (for a regular PID implementation).\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_error\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# Current output of the controller.\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_output\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n# -- deprecated --\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_desired\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_actual\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec"
                }
            ]
        },
        {
            "name": "/joint_trajectory_controller/transition_event",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/joint_trajectory_controller/transition_event` topic is used to communicate lifecycle transition events of the joint trajectory controller. It provides information about the state changes of the controller, such as activation, deactivation, and error handling.\n    - It is typically used for monitoring and managing the lifecycle states of the controller to ensure proper operation and handling of state transitions.\n\nMobile Robot Module:\n    - This ROS2 element relates to the control module of a mobile robot, specifically the joint trajectory controller responsible for executing motion commands.\n\nRelevance for Specific Tasks:\n    - This element is crucial for managing the state transitions of the joint trajectory controller, ensuring that it is correctly configured, activated, and deactivated as needed. It helps in handling errors and maintaining the controller's lifecycle.\n    - Typical scenarios include initializing the controller, transitioning between active and inactive states, and handling errors during operation.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks involving lifecycle management of controllers, such as automated startup and shutdown sequences, error recovery, and ensuring the controller is in the correct state for operation.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/msg/TransitionEvent",
                    "details": "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n\n# The starting state from which this event transitioned.\nState start_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label\n\n# The end state of this transition event.\nState goal_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label"
                }
            ]
        },
        {
            "name": "/local_costmap/costmap",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/local_costmap/costmap` topic provides a 2-D grid map representation of the environment, indicating occupied, unoccupied, and unknown areas. It is typically used for local path planning and obstacle avoidance.\n\nMobile Robot Module:\n    - This element relates to the navigation and perception modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It is crucial for tasks involving local navigation and dynamic obstacle avoidance. The costmap helps the robot make real-time decisions to navigate safely through its environment.\n\nUsage in the ROS2 System:\n    - It is used in ROS2 navigation stacks like `nav2` for local path planning and collision avoidance. It interacts with nodes responsible for local planning and control, such as `DWBLocalPlanner` or `TebLocalPlanner`.",
            "interfaces": [
                {
                    "name": "nav_msgs/msg/OccupancyGrid",
                    "details": "# This represents a 2-D grid map\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# MetaData for the map\nMapMetaData info\n\tbuiltin_interfaces/Time map_load_time\n\t\tint32 sec\n\t\tuint32 nanosec\n\tfloat32 resolution\n\tuint32 width\n\tuint32 height\n\tgeometry_msgs/Pose origin\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\n# The map data, in row-major order, starting with (0,0).\n# Cell (1, 0) will be listed second, representing the next cell in the x direction.\n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently,\n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown.\nint8[] data"
                }
            ]
        },
        {
            "name": "/local_costmap/costmap_raw",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/local_costmap/costmap_raw` topic provides a 2-D grid map where each cell has an associated cost, representing the environment's spatial layout and obstacles.\n    - It is typically used for navigation and path planning, helping the robot understand its surroundings to make informed movement decisions.\n\nMobile Robot Module:\n    - This ROS2 element relates to the Navigation and Path Planning module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It is crucial for tasks involving obstacle avoidance and efficient pathfinding, allowing the robot to navigate safely and effectively in dynamic environments.\n    - Typical scenarios include autonomous navigation in cluttered spaces or dynamic environments where real-time updates to the costmap are necessary.\n\nUsage in the ROS2 System:\n    - Suitable for use in ROS2 navigation stacks like Nav2, where it interacts with planners and controllers to facilitate real-time navigation and obstacle avoidance.",
            "interfaces": [
                {
                    "name": "nav2_msgs/msg/Costmap",
                    "details": "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# MetaData for the map\nCostmapMetaData metadata\n\tbuiltin_interfaces/Time map_load_time\n\t\tint32 sec\n\t\tuint32 nanosec\n\tbuiltin_interfaces/Time update_time\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring layer\n\tfloat32 resolution\n\tuint32 size_x\n\tuint32 size_y\n\tgeometry_msgs/Pose origin\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data"
                }
            ]
        },
        {
            "name": "/local_costmap/costmap_updates",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/local_costmap/costmap_updates` topic is used to provide updates to the local costmap, which is a grid representation of the environment around the robot. It is typically used to reflect changes in the environment, such as obstacles appearing or disappearing.\n\nMobile Robot Module:\n    - This element relates to the navigation and perception modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - This ROS2 element is crucial for dynamic path planning and obstacle avoidance. It helps the robot adapt to changes in its environment by updating the local costmap with new information about obstacles.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks such as real-time navigation, where the robot needs to continuously update its path based on the latest environmental data. It interacts with navigation nodes like `move_base` and perception nodes that detect obstacles.",
            "interfaces": [
                {
                    "name": "map_msgs/msg/OccupancyGridUpdate",
                    "details": "std_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data"
                }
            ]
        },
        {
            "name": "/local_costmap/footprint",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The \"/local_costmap/footprint\" topic provides the footprint of the robot as a polygon. It is typically used to define the area occupied by the robot for navigation and obstacle avoidance.\n\nMobile Robot Module:\n    - This element relates to the navigation and path planning module of the mobile robot.\n\nRelevance for Specific Tasks:\n    - It helps in collision avoidance by ensuring the robot's path does not intersect with obstacles. It is crucial for tasks involving dynamic path planning and safe navigation in environments with obstacles.\n\nUsage in the ROS2 System:\n    - Suitable for use in navigation stacks like Nav2, where it helps in defining the robot's physical boundaries for local costmap calculations.",
            "interfaces": [
                {
                    "name": "geometry_msgs/msg/Polygon",
                    "details": "# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\t#\n\t#\n\tfloat32 x\n\tfloat32 y\n\tfloat32 z"
                }
            ]
        },
        {
            "name": "/local_costmap/published_footprint",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n   - The `/local_costmap/published_footprint` topic publishes the footprint of the robot as a polygon, which includes the reference coordinate frame and timestamp. It is typically used to represent the robot's physical boundary in the environment.\n\nMobile Robot Module:\n   - This element relates to the navigation and obstacle avoidance modules of a mobile robot.\n\nRelevance for Specific Tasks:\n   - It helps in collision avoidance and path planning by providing the robot's footprint, which is crucial for understanding the space the robot occupies. It is used in scenarios where the robot needs to navigate through tight spaces or avoid obstacles.\n\nUsage in the ROS2 System:\n   - Suitable for tasks involving dynamic path planning and real-time navigation adjustments. It is commonly used by navigation stacks and planners that require knowledge of the robot's physical dimensions to make informed decisions.",
            "interfaces": [
                {
                    "name": "geometry_msgs/msg/PolygonStamped",
                    "details": "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nPolygon polygon\n\tPoint32[] points\n\t\t#\n\t\t#\n\t\tfloat32 x\n\t\tfloat32 y\n\t\tfloat32 z"
                }
            ]
        },
        {
            "name": "/local_plan",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n   - The `/local_plan` topic is used to publish a sequence of poses that form a path for a robot to follow. It is typically used for local path planning, allowing the robot to navigate through its environment by following a dynamically generated path.\n\nMobile Robot Module:\n   - This element relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n   - The `/local_plan` topic is crucial for tasks involving real-time path adjustments and obstacle avoidance. It helps in dynamically updating the robot's path based on sensor inputs and environmental changes.\n\nUsage in the ROS2 System:\n   - It is commonly used in navigation stacks like `nav2` for tasks such as local path planning and execution. Nodes that perform path planning or path following, such as local planners or controllers, typically interact with this topic.",
            "interfaces": [
                {
                    "name": "nav_msgs/msg/Path",
                    "details": "# An array of poses that represents a Path for a robot to follow.\n\n# Indicates the frame_id of the path.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# Array of poses to follow.\ngeometry_msgs/PoseStamped[] poses\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1"
                }
            ]
        },
        {
            "name": "/map",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/map` topic provides a 2-D grid map of the environment, represented as an occupancy grid. It is typically used for navigation and localization tasks, allowing the robot to understand its surroundings and plan paths.\n\nMobile Robot Module:\n    - This element relates to the Navigation and Localization modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - The `/map` topic is crucial for tasks such as path planning, obstacle avoidance, and autonomous navigation. It helps the robot determine free and occupied spaces in its environment, enabling it to make informed movement decisions.\n\nUsage in the ROS2 System:\n    - It is commonly used in conjunction with ROS2 nodes like `nav2` for navigation, `amcl` for localization, and `move_base` for path planning.",
            "interfaces": [
                {
                    "name": "nav_msgs/msg/OccupancyGrid",
                    "details": "# This represents a 2-D grid map\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# MetaData for the map\nMapMetaData info\n\tbuiltin_interfaces/Time map_load_time\n\t\tint32 sec\n\t\tuint32 nanosec\n\tfloat32 resolution\n\tuint32 width\n\tuint32 height\n\tgeometry_msgs/Pose origin\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\n# The map data, in row-major order, starting with (0,0).\n# Cell (1, 0) will be listed second, representing the next cell in the x direction.\n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently,\n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown.\nint8[] data"
                }
            ]
        },
        {
            "name": "/map_pose",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/map_pose` topic provides an estimated pose of the robot with respect to a reference coordinate frame, including a timestamp. It is typically used for localization and navigation tasks.\n\nMobile Robot Module:\n    - This ROS2 element relates to the Localization and Navigation modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - The `/map_pose` topic is crucial for solving localization problems, where the robot needs to determine its position and orientation within a map. It is also used in navigation scenarios to ensure the robot follows a planned path accurately.\n\nUsage in the ROS2 System:\n    - This topic is suitable for tasks such as autonomous navigation, where nodes like `amcl` (Adaptive Monte Carlo Localization) or `nav2` (Navigation2) might publish or subscribe to it to update the robot's pose estimate.",
            "interfaces": [
                {
                    "name": "geometry_msgs/msg/PoseWithCovarianceStamped",
                    "details": "# This expresses an estimated pose with a reference coordinate frame and timestamp\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nPoseWithCovariance pose\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tfloat64[36] covariance"
                }
            ]
        },
        {
            "name": "/map_server/transition_event",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/map_server/transition_event` topic is used to communicate lifecycle transition events of the map server node. It provides information about state changes, such as activation, deactivation, and shutdown, which are crucial for managing the node's lifecycle.\n\nMobile Robot Module:\n    - This element relates to the navigation module of a mobile robot, specifically the map server component responsible for providing map data.\n\nRelevance for Specific Tasks:\n    - This topic is essential for managing the lifecycle of the map server, ensuring that it transitions smoothly between states like configuration, activation, and shutdown. It is crucial for tasks that require dynamic reconfiguration or controlled shutdown of the map server.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks involving lifecycle management of nodes, such as automated startup and shutdown sequences, error handling, and state monitoring in a ROS2-based navigation stack.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/msg/TransitionEvent",
                    "details": "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n\n# The starting state from which this event transitioned.\nState start_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label\n\n# The end state of this transition event.\nState goal_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label"
                }
            ]
        },
        {
            "name": "/map_tile",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/map_tile` topic provides a 2-D grid map representation using the `nav_msgs/msg/OccupancyGrid` message type. It is typically used for navigation and path planning tasks, providing spatial information about the environment.\n\nMobile Robot Module:\n    - This element relates to the Navigation and Mapping modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - The `/map_tile` topic is crucial for tasks such as obstacle avoidance, path planning, and localization. It helps in determining free and occupied spaces within the robot's environment, enabling efficient navigation.\n\nUsage in the ROS2 System:\n    - It is suitable for use in autonomous navigation systems, where nodes like `move_base` or `nav2` can subscribe to this topic to receive map data for planning and executing paths.",
            "interfaces": [
                {
                    "name": "nav_msgs/msg/OccupancyGrid",
                    "details": "# This represents a 2-D grid map\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# MetaData for the map\nMapMetaData info\n\tbuiltin_interfaces/Time map_load_time\n\t\tint32 sec\n\t\tuint32 nanosec\n\tfloat32 resolution\n\tuint32 width\n\tuint32 height\n\tgeometry_msgs/Pose origin\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\n# The map data, in row-major order, starting with (0,0).\n# Cell (1, 0) will be listed second, representing the next cell in the x direction.\n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently,\n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown.\nint8[] data"
                }
            ]
        },
        {
            "name": "/map_updates",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/map_updates` topic is used to communicate updates to an occupancy grid map. It provides incremental changes to the map, allowing for efficient updates without needing to resend the entire map.\n    - It is typically used for real-time map updates in dynamic environments, where the map changes frequently due to moving obstacles or changes in the environment.\n\nMobile Robot Module:\n    - This element relates to the Navigation and Mapping module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - The `/map_updates` topic is crucial for tasks involving dynamic path planning and navigation, where the robot needs to adapt to changes in the environment.\n    - It plays a role in scenarios such as autonomous navigation in warehouses or urban environments, where obstacles may appear or disappear.\n\nUsage in the ROS2 System:\n    - It is suitable for use in ROS2 systems that require real-time map updates, such as those using the `nav2` stack for navigation or SLAM (Simultaneous Localization and Mapping) systems.",
            "interfaces": [
                {
                    "name": "map_msgs/msg/OccupancyGridUpdate",
                    "details": "std_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data"
                }
            ]
        },
        {
            "name": "/mobile_base/sensors/bumper_pointcloud",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/mobile_base/sensors/bumper_pointcloud` topic publishes point cloud data from a bumper sensor. It is typically used to detect obstacles and understand the environment around the mobile robot.\n\nMobile Robot Module:\n    - This ROS2 element relates to the perception module of the mobile robot, specifically the sensor interface for obstacle detection.\n\nRelevance for Specific Tasks:\n    - This element is crucial for tasks involving collision avoidance and navigation. It helps in identifying obstacles in the robot's path and planning safe routes.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks such as real-time obstacle detection, environment mapping, and autonomous navigation. Typical ROS2 entities that interact with this element include navigation nodes and obstacle avoidance algorithms.",
            "interfaces": [
                {
                    "name": "sensor_msgs/msg/PointCloud2",
                    "details": "# This message holds a collection of N-dimensional points, which may\n# contain additional information such as normals, intensity, etc. The\n# point data is stored as a binary blob, its layout described by the\n# contents of the \"fields\" array.\n#\n# The point cloud data may be organized 2d (image-like) or 1d (unordered).\n# Point clouds organized as 2d images may be produced by camera depth sensors\n# such as stereo or time-of-flight.\n\n# Time of sensor data acquisition, and the coordinate frame ID (for 3d points).\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# 2D structure of the point cloud. If the cloud is unordered, height is\n# 1 and width is the length of the point cloud.\nuint32 height\nuint32 width\n\n# Describes the channels and their layout in the binary data blob.\nPointField[] fields\n\tuint8 INT8    = 1\n\tuint8 UINT8   = 2\n\tuint8 INT16   = 3\n\tuint8 UINT16  = 4\n\tuint8 INT32   = 5\n\tuint8 UINT32  = 6\n\tuint8 FLOAT32 = 7\n\tuint8 FLOAT64 = 8\n\tstring name      #\n\tuint32 offset    #\n\tuint8  datatype  #\n\tuint32 count     #\n\nbool    is_bigendian # Is this data bigendian?\nuint32  point_step   # Length of a point in bytes\nuint32  row_step     # Length of a row in bytes\nuint8[] data         # Actual point data, size is (row_step*height)\n\nbool is_dense        # True if there are no invalid points"
                }
            ]
        },
        {
            "name": "/monitored_planning_scene",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/monitored_planning_scene` topic is used to communicate the state of the planning scene in a robotic environment. It provides detailed information about the robot's state, collision objects, and environmental constraints.\n    - It is typically used for motion planning and collision avoidance in robotic systems.\n\nMobile Robot Module:\n    - This ROS2 element relates to the motion planning and perception modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - This element is crucial for tasks involving path planning and obstacle avoidance, as it provides the necessary environmental context and robot state information.\n    - Typical scenarios include dynamic path planning in environments with moving obstacles or complex terrains.\n\nUsage in the ROS2 System:\n    - It is suitable for use in ROS2 tasks such as autonomous navigation, robotic arm manipulation, and any application requiring real-time updates of the robot's environment for safe operation.",
            "interfaces": [
                {
                    "name": "moveit_msgs/msg/PlanningScene",
                    "details": "# name of planning scene\nstring name\n\n# full robot state\nRobotState robot_state\n\tsensor_msgs/JointState joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] name\n\t\tfloat64[] position\n\t\tfloat64[] velocity\n\t\tfloat64[] effort\n\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tgeometry_msgs/Transform[] transforms\n\t\t\tVector3 translation\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion rotation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tgeometry_msgs/Twist[] twist\n\t\t\tVector3  linear\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  angular\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tgeometry_msgs/Wrench[] wrench\n\t\t\tVector3  force\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  torque\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\tAttachedCollisionObject[] attached_collision_objects\n\t\tstring link_name\n\t\tCollisionObject object\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Pose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring id\n\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\tstring key\n\t\t\t\tstring db\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t#\n\t\t\t\tfloat64[4] coef\n\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring[] subframe_names\n\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tbyte ADD=0\n\t\t\tbyte REMOVE=1\n\t\t\tbyte APPEND=2\n\t\t\tbyte MOVE=3\n\t\t\tbyte operation\n\t\tstring[] touch_links\n\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tJointTrajectoryPoint[] points\n\t\t\t\tfloat64[] positions\n\t\t\t\tfloat64[] velocities\n\t\t\t\tfloat64[] accelerations\n\t\t\t\tfloat64[] effort\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\tfloat64 weight\n\tbool is_diff\n\n# The name of the robot model this scene is for\nstring robot_model_name\n\n#additional frames for duplicating tf (with respect to the planning frame)\ngeometry_msgs/TransformStamped[] fixed_frame_transforms\n\t#\n\t#\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tstring child_frame_id\n\tTransform transform\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\n#full allowed collision matrix\nAllowedCollisionMatrix allowed_collision_matrix\n\tstring[] entry_names\n\tAllowedCollisionEntry[] entry_values\n\t\tbool[] enabled\n\tstring[] default_entry_names\n\tbool[] default_entry_values\n\n# all link paddings\nLinkPadding[] link_padding\n\tstring link_name\n\tfloat64 padding\n\n# all link scales\nLinkScale[] link_scale\n\tstring link_name\n\tfloat64 scale\n\n# Attached objects, collision objects, even the octomap or collision map can have\n# colors associated to them. This array specifies them.\nObjectColor[] object_colors\n\tstring id\n\tstd_msgs/ColorRGBA color\n\t\tfloat32 r\n\t\tfloat32 g\n\t\tfloat32 b\n\t\tfloat32 a\n\n# the collision map\nPlanningSceneWorld world\n\tCollisionObject[] collision_objects\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tgeometry_msgs/Pose pose\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tstring id\n\t\tobject_recognition_msgs/ObjectType type\n\t\t\tstring key\n\t\t\tstring db\n\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\tuint8 BOX=1\n\t\t\tuint8 SPHERE=2\n\t\t\tuint8 CYLINDER=3\n\t\t\tuint8 CONE=4\n\t\t\tuint8 PRISM=5\n\t\t\tuint8 type\n\t\t\tfloat64[<=3] dimensions  #\n\t\t\tuint8 BOX_X=0\n\t\t\tuint8 BOX_Y=1\n\t\t\tuint8 BOX_Z=2\n\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\tuint8 CONE_HEIGHT=0\n\t\t\tuint8 CONE_RADIUS=1\n\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\tPoint32[] points\n\t\t\t\t\t#\n\t\t\t\t\t#\n\t\t\t\t\tfloat32 x\n\t\t\t\t\tfloat32 y\n\t\t\t\t\tfloat32 z\n\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tshape_msgs/Mesh[] meshes\n\t\t\tMeshTriangle[] triangles\n\t\t\t\tuint32[3] vertex_indices\n\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tshape_msgs/Plane[] planes\n\t\t\t#\n\t\t\tfloat64[4] coef\n\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tstring[] subframe_names\n\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tbyte ADD=0\n\t\tbyte REMOVE=1\n\t\tbyte APPEND=2\n\t\tbyte MOVE=3\n\t\tbyte operation\n\toctomap_msgs/OctomapWithPose octomap\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tgeometry_msgs/Pose origin\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\toctomap_msgs/Octomap octomap\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tbool binary\n\t\t\tstring id\n\t\t\tfloat64 resolution\n\t\t\tint8[] data\n\n# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene\nbool is_diff"
                }
            ]
        },
        {
            "name": "/motion_plan_request",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/motion_plan_request` topic is used to send requests to a motion planner, specifying the parameters and constraints for generating a motion plan. It is typically used in robotic systems to plan paths for manipulators or mobile robots within a defined workspace.\n\nMobile Robot Module:\n    - This element relates to the motion planning module of a mobile robot, particularly for manipulators or robotic arms.\n\nRelevance for Specific Tasks:\n    - It is used to solve path planning problems, ensuring that a robot can move from a start state to a goal state while satisfying various constraints. Typical scenarios include robotic arm manipulation tasks, where precise motion planning is required to avoid obstacles and achieve desired end-effector positions.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving MoveIt! or other motion planning frameworks in ROS2, where it interacts with motion planners to generate feasible trajectories for robotic arms or mobile platforms.",
            "interfaces": [
                {
                    "name": "moveit_msgs/msg/MotionPlanRequest",
                    "details": "# This service contains the definition for a request to the motion\n# planner and the output it provides\n\n# Parameters for the workspace that the planner should work inside\nWorkspaceParameters workspace_parameters\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tgeometry_msgs/Vector3 min_corner\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tgeometry_msgs/Vector3 max_corner\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\n# Starting state updates. If certain joints should be considered\n# at positions other than the current ones, these positions should\n# be set here\nRobotState start_state\n\tsensor_msgs/JointState joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] name\n\t\tfloat64[] position\n\t\tfloat64[] velocity\n\t\tfloat64[] effort\n\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tgeometry_msgs/Transform[] transforms\n\t\t\tVector3 translation\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion rotation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tgeometry_msgs/Twist[] twist\n\t\t\tVector3  linear\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  angular\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tgeometry_msgs/Wrench[] wrench\n\t\t\tVector3  force\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  torque\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\tAttachedCollisionObject[] attached_collision_objects\n\t\tstring link_name\n\t\tCollisionObject object\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Pose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring id\n\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\tstring key\n\t\t\t\tstring db\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t#\n\t\t\t\tfloat64[4] coef\n\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring[] subframe_names\n\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tbyte ADD=0\n\t\t\tbyte REMOVE=1\n\t\t\tbyte APPEND=2\n\t\t\tbyte MOVE=3\n\t\t\tbyte operation\n\t\tstring[] touch_links\n\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tJointTrajectoryPoint[] points\n\t\t\t\tfloat64[] positions\n\t\t\t\tfloat64[] velocities\n\t\t\t\tfloat64[] accelerations\n\t\t\t\tfloat64[] effort\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\tfloat64 weight\n\tbool is_diff\n\n# The possible goal states for the model to plan for. Each element of\n# the array defines a goal region. The goal is achieved\n# if the constraints for a particular region are satisfied\nConstraints[] goal_constraints\n\tstring name\n\tJointConstraint[] joint_constraints\n\t\tstring joint_name\n\t\tfloat64 position\n\t\tfloat64 tolerance_above\n\t\tfloat64 tolerance_below\n\t\tfloat64 weight\n\tPositionConstraint[] position_constraints\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring link_name\n\t\tgeometry_msgs/Vector3 target_point_offset\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tBoundingVolume constraint_region\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\tfloat64 weight\n\tOrientationConstraint[] orientation_constraints\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tgeometry_msgs/Quaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\t\tstring link_name\n\t\tfloat64 absolute_x_axis_tolerance\n\t\tfloat64 absolute_y_axis_tolerance\n\t\tfloat64 absolute_z_axis_tolerance\n\t\tuint8 parameterization\n\t\tuint8 XYZ_EULER_ANGLES=0\n\t\tuint8 ROTATION_VECTOR=1\n\t\tfloat64 weight\n\tVisibilityConstraint[] visibility_constraints\n\t\tfloat64 target_radius\n\t\tgeometry_msgs/PoseStamped target_pose\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tPose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\tint32 cone_sides\n\t\tgeometry_msgs/PoseStamped sensor_pose\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tPose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\tfloat64 max_view_angle\n\t\tfloat64 max_range_angle\n\t\tuint8 SENSOR_Z=0\n\t\tuint8 SENSOR_Y=1\n\t\tuint8 SENSOR_X=2\n\t\tuint8 sensor_view_direction\n\t\tfloat64 weight\n\n# No state at any point along the path in the produced motion plan will violate these constraints (this applies to all points, not just waypoints)\nConstraints path_constraints\n\tstring name\n\tJointConstraint[] joint_constraints\n\t\tstring joint_name\n\t\tfloat64 position\n\t\tfloat64 tolerance_above\n\t\tfloat64 tolerance_below\n\t\tfloat64 weight\n\tPositionConstraint[] position_constraints\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring link_name\n\t\tgeometry_msgs/Vector3 target_point_offset\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tBoundingVolume constraint_region\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\tfloat64 weight\n\tOrientationConstraint[] orientation_constraints\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tgeometry_msgs/Quaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\t\tstring link_name\n\t\tfloat64 absolute_x_axis_tolerance\n\t\tfloat64 absolute_y_axis_tolerance\n\t\tfloat64 absolute_z_axis_tolerance\n\t\tuint8 parameterization\n\t\tuint8 XYZ_EULER_ANGLES=0\n\t\tuint8 ROTATION_VECTOR=1\n\t\tfloat64 weight\n\tVisibilityConstraint[] visibility_constraints\n\t\tfloat64 target_radius\n\t\tgeometry_msgs/PoseStamped target_pose\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tPose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\tint32 cone_sides\n\t\tgeometry_msgs/PoseStamped sensor_pose\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tPose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\tfloat64 max_view_angle\n\t\tfloat64 max_range_angle\n\t\tuint8 SENSOR_Z=0\n\t\tuint8 SENSOR_Y=1\n\t\tuint8 SENSOR_X=2\n\t\tuint8 sensor_view_direction\n\t\tfloat64 weight\n\n# The constraints the resulting trajectory must satisfy\nTrajectoryConstraints trajectory_constraints\n\tConstraints[] constraints\n\t\tstring name\n\t\tJointConstraint[] joint_constraints\n\t\t\tstring joint_name\n\t\t\tfloat64 position\n\t\t\tfloat64 tolerance_above\n\t\t\tfloat64 tolerance_below\n\t\t\tfloat64 weight\n\t\tPositionConstraint[] position_constraints\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring link_name\n\t\t\tgeometry_msgs/Vector3 target_point_offset\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tBoundingVolume constraint_region\n\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\tuint8 type\n\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\tfloat32 z\n\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tfloat64 weight\n\t\tOrientationConstraint[] orientation_constraints\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Quaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\t\tstring link_name\n\t\t\tfloat64 absolute_x_axis_tolerance\n\t\t\tfloat64 absolute_y_axis_tolerance\n\t\t\tfloat64 absolute_z_axis_tolerance\n\t\t\tuint8 parameterization\n\t\t\tuint8 XYZ_EULER_ANGLES=0\n\t\t\tuint8 ROTATION_VECTOR=1\n\t\t\tfloat64 weight\n\t\tVisibilityConstraint[] visibility_constraints\n\t\t\tfloat64 target_radius\n\t\t\tgeometry_msgs/PoseStamped target_pose\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tPose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tint32 cone_sides\n\t\t\tgeometry_msgs/PoseStamped sensor_pose\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tPose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tfloat64 max_view_angle\n\t\t\tfloat64 max_range_angle\n\t\t\tuint8 SENSOR_Z=0\n\t\t\tuint8 SENSOR_Y=1\n\t\t\tuint8 SENSOR_X=2\n\t\t\tuint8 sensor_view_direction\n\t\t\tfloat64 weight\n\n# A set of trajectories that may be used as reference or initial trajectories for (typically optimization-based) planners\n# These trajectories do not override start_state or goal_constraints\nGenericTrajectory[] reference_trajectories\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\ttrajectory_msgs/JointTrajectory[] joint_trajectory\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tJointTrajectoryPoint[] points\n\t\t\tfloat64[] positions\n\t\t\tfloat64[] velocities\n\t\t\tfloat64[] accelerations\n\t\t\tfloat64[] effort\n\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\tmoveit_msgs/CartesianTrajectory[] cartesian_trajectory\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring tracked_frame\n\t\tCartesianTrajectoryPoint[] points\n\t\t\tCartesianPoint point\n\t\t\t\tgeometry_msgs/Pose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tgeometry_msgs/Twist velocity\n\t\t\t\t\tVector3  linear\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tVector3  angular\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Accel acceleration\n\t\t\t\t\tVector3  linear\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tVector3  angular\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\n# The name of the planning pipeline to use. If no name is specified,\n# the configured planning pipeline will be used\nstring pipeline_id\n\n# The name of the planning algorithm to use. If no name is specified,\n# the default planner of the planning pipeline will be used\nstring planner_id\n\n# The name of the group of joints on which this planner is operating\nstring group_name\n\n# The number of times this plan is to be computed. Shortest solution\n# will be reported.\nint32 num_planning_attempts\n\n# The maximum amount of time the motion planner is allowed to plan for (in seconds)\nfloat64 allowed_planning_time\n\n# Scaling factors for optionally reducing the maximum joint velocities and\n# accelerations.  Allowed values are in (0,1].  The maximum joint velocity and\n# acceleration specified in the robot model are multiplied by thier respective\n# factors.  If either are outside their valid ranges (importantly, this\n# includes being set to 0.0), the factor is set to the default value of 1.0\n# internally (i.e., maximum joint velocity or maximum joint acceleration).\nfloat64 max_velocity_scaling_factor\nfloat64 max_acceleration_scaling_factor\n\n# Maximum cartesian speed for the given end effector.\n# If max_cartesian_speed <= 0 the trajectory is not modified.\n# These fields require the following planning request adapter: default_planner_request_adapters/SetMaxCartesianEndEffectorSpeed\nstring cartesian_speed_end_effector_link\nfloat64 max_cartesian_speed # m/s"
                }
            ]
        },
        {
            "name": "/odom",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/odom` topic provides an estimate of a mobile robot's position and velocity in free space. It is typically used for navigation and localization tasks, offering data on the robot's pose and twist relative to a fixed world frame.\n\nMobile Robot Module:\n    - This element relates to the Localization and Navigation modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - The `/odom` topic is crucial for solving problems related to tracking the robot's movement and position over time. It plays a role in scenarios such as path planning, obstacle avoidance, and maintaining a map of the environment.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks like autonomous navigation, where nodes such as path planners, localization systems, and controllers subscribe to the `/odom` topic to receive real-time odometry data for decision-making and control.",
            "interfaces": [
                {
                    "name": "nav_msgs/msg/Odometry",
                    "details": "# This represents an estimate of a position and velocity in free space.\n# The pose in this message should be specified in the coordinate frame given by header.frame_id\n# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\n# Includes the frame id of the pose parent.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# Frame id the pose points to. The twist is in this coordinate frame.\nstring child_frame_id\n\n# Estimated pose that is typically relative to a fixed world frame.\ngeometry_msgs/PoseWithCovariance pose\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tfloat64[36] covariance\n\n# Estimated linear and angular velocity relative to child_frame_id.\ngeometry_msgs/TwistWithCovariance twist\n\tTwist twist\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tfloat64[36] covariance"
                }
            ]
        },
        {
            "name": "/particle_cloud",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/particle_cloud` topic is used to represent a particle cloud containing particle poses and weights. It is typically used in localization algorithms, such as particle filters, to estimate the robot's position and orientation.\n\nMobile Robot Module:\n    - This element relates to the Localization module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It is crucial for solving localization problems, where the robot needs to determine its position within a map. It plays a role in scenarios where the robot must navigate accurately in dynamic environments.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving the `nav2_amcl` node, which uses particle filters for adaptive Monte Carlo localization. It interacts with other navigation and mapping components to maintain an accurate estimate of the robot's pose.",
            "interfaces": [
                {
                    "name": "nav2_msgs/msg/ParticleCloud",
                    "details": "# This represents a particle cloud containing particle poses and weights\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# Array of particles in the cloud\nParticle[] particles\n\tgeometry_msgs/Pose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tfloat64 weight"
                }
            ]
        },
        {
            "name": "/particlecloud",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/particlecloud` topic publishes an array of poses representing the estimated positions and orientations of a robot, typically used in localization algorithms like particle filters.\n    - It is used to convey the distribution of possible robot states in the environment.\n\nMobile Robot Module:\n    - This element relates to the Localization module of a Mobile Robot.\n\nRelevance for Specific Tasks:\n    - It helps solve the problem of determining the robot's position and orientation within a map, crucial for navigation and path planning.\n    - It plays a role in scenarios where the robot needs to localize itself in a known environment, such as indoor navigation.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving localization algorithms, such as Monte Carlo Localization (MCL), where it interacts with nodes that perform sensor data processing and state estimation.",
            "interfaces": [
                {
                    "name": "geometry_msgs/msg/PoseArray",
                    "details": "# An array of poses with a header for global reference.\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\nPose[] poses\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1"
                }
            ]
        },
        {
            "name": "/plan",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The \"/plan\" topic is used to communicate a sequence of poses that form a path for a robot to follow. It is typically used for navigation tasks where a robot needs to move from one location to another by following a predefined path.\n\nMobile Robot Module:\n    - This element relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - The \"/plan\" topic is crucial for path planning and execution tasks. It helps in solving problems related to autonomous navigation, such as moving through an environment while avoiding obstacles. It is commonly used in scenarios where a robot needs to reach a target location efficiently.\n\nUsage in the ROS2 System:\n    - This topic is suitable for use in ROS2 tasks involving path planning and navigation, such as those performed by navigation stacks like Nav2. It interacts with planners and controllers that generate and execute paths.",
            "interfaces": [
                {
                    "name": "nav_msgs/msg/Path",
                    "details": "# An array of poses that represents a Path for a robot to follow.\n\n# Indicates the frame_id of the path.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# Array of poses to follow.\ngeometry_msgs/PoseStamped[] poses\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1"
                }
            ]
        },
        {
            "name": "/planning_scene",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/planning_scene` topic is used to represent the current state of the environment and the robot within it. It includes information about the robot's state, collision objects, and the environment's geometry.\n    - It is typically used for motion planning and collision avoidance in robotic systems.\n\nMobile Robot Module:\n    - This ROS2 element relates to the motion planning and perception modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - The `/planning_scene` topic is crucial for tasks involving path planning and obstacle avoidance. It allows the robot to understand its surroundings and plan movements that avoid collisions.\n    - Typical scenarios include navigating through dynamic environments, manipulating objects, and ensuring safe operation in shared spaces with humans or other robots.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks such as autonomous navigation, robotic arm manipulation, and any application requiring real-time environmental awareness and collision checking.",
            "interfaces": [
                {
                    "name": "moveit_msgs/msg/PlanningScene",
                    "details": "# name of planning scene\nstring name\n\n# full robot state\nRobotState robot_state\n\tsensor_msgs/JointState joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] name\n\t\tfloat64[] position\n\t\tfloat64[] velocity\n\t\tfloat64[] effort\n\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tgeometry_msgs/Transform[] transforms\n\t\t\tVector3 translation\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion rotation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tgeometry_msgs/Twist[] twist\n\t\t\tVector3  linear\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  angular\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tgeometry_msgs/Wrench[] wrench\n\t\t\tVector3  force\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  torque\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\tAttachedCollisionObject[] attached_collision_objects\n\t\tstring link_name\n\t\tCollisionObject object\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Pose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring id\n\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\tstring key\n\t\t\t\tstring db\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t#\n\t\t\t\tfloat64[4] coef\n\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring[] subframe_names\n\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tbyte ADD=0\n\t\t\tbyte REMOVE=1\n\t\t\tbyte APPEND=2\n\t\t\tbyte MOVE=3\n\t\t\tbyte operation\n\t\tstring[] touch_links\n\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tJointTrajectoryPoint[] points\n\t\t\t\tfloat64[] positions\n\t\t\t\tfloat64[] velocities\n\t\t\t\tfloat64[] accelerations\n\t\t\t\tfloat64[] effort\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\tfloat64 weight\n\tbool is_diff\n\n# The name of the robot model this scene is for\nstring robot_model_name\n\n#additional frames for duplicating tf (with respect to the planning frame)\ngeometry_msgs/TransformStamped[] fixed_frame_transforms\n\t#\n\t#\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tstring child_frame_id\n\tTransform transform\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\n#full allowed collision matrix\nAllowedCollisionMatrix allowed_collision_matrix\n\tstring[] entry_names\n\tAllowedCollisionEntry[] entry_values\n\t\tbool[] enabled\n\tstring[] default_entry_names\n\tbool[] default_entry_values\n\n# all link paddings\nLinkPadding[] link_padding\n\tstring link_name\n\tfloat64 padding\n\n# all link scales\nLinkScale[] link_scale\n\tstring link_name\n\tfloat64 scale\n\n# Attached objects, collision objects, even the octomap or collision map can have\n# colors associated to them. This array specifies them.\nObjectColor[] object_colors\n\tstring id\n\tstd_msgs/ColorRGBA color\n\t\tfloat32 r\n\t\tfloat32 g\n\t\tfloat32 b\n\t\tfloat32 a\n\n# the collision map\nPlanningSceneWorld world\n\tCollisionObject[] collision_objects\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tgeometry_msgs/Pose pose\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tstring id\n\t\tobject_recognition_msgs/ObjectType type\n\t\t\tstring key\n\t\t\tstring db\n\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\tuint8 BOX=1\n\t\t\tuint8 SPHERE=2\n\t\t\tuint8 CYLINDER=3\n\t\t\tuint8 CONE=4\n\t\t\tuint8 PRISM=5\n\t\t\tuint8 type\n\t\t\tfloat64[<=3] dimensions  #\n\t\t\tuint8 BOX_X=0\n\t\t\tuint8 BOX_Y=1\n\t\t\tuint8 BOX_Z=2\n\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\tuint8 CONE_HEIGHT=0\n\t\t\tuint8 CONE_RADIUS=1\n\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\tPoint32[] points\n\t\t\t\t\t#\n\t\t\t\t\t#\n\t\t\t\t\tfloat32 x\n\t\t\t\t\tfloat32 y\n\t\t\t\t\tfloat32 z\n\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tshape_msgs/Mesh[] meshes\n\t\t\tMeshTriangle[] triangles\n\t\t\t\tuint32[3] vertex_indices\n\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tshape_msgs/Plane[] planes\n\t\t\t#\n\t\t\tfloat64[4] coef\n\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tstring[] subframe_names\n\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tbyte ADD=0\n\t\tbyte REMOVE=1\n\t\tbyte APPEND=2\n\t\tbyte MOVE=3\n\t\tbyte operation\n\toctomap_msgs/OctomapWithPose octomap\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tgeometry_msgs/Pose origin\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\toctomap_msgs/Octomap octomap\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tbool binary\n\t\t\tstring id\n\t\t\tfloat64 resolution\n\t\t\tint8[] data\n\n# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene\nbool is_diff"
                }
            ]
        },
        {
            "name": "/planning_scene_world",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/planning_scene_world` topic is used to represent the world model in a robotic system, including collision objects and environmental data. It is typically used for planning and executing robot movements while avoiding obstacles.\n\nMobile Robot Module:\n    - This ROS2 element relates to the perception and planning modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It is crucial for tasks involving path planning and collision avoidance. The topic provides the necessary environmental context for the robot to navigate safely and efficiently.\n\nUsage in the ROS2 System:\n    - Suitable for use in tasks such as autonomous navigation, manipulation planning, and dynamic obstacle avoidance. It interacts with components like MoveIt! for motion planning and execution.",
            "interfaces": [
                {
                    "name": "moveit_msgs/msg/PlanningSceneWorld",
                    "details": "# collision objects\nCollisionObject[] collision_objects\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tgeometry_msgs/Pose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tstring id\n\tobject_recognition_msgs/ObjectType type\n\t\tstring key\n\t\tstring db\n\tshape_msgs/SolidPrimitive[] primitives\n\t\tuint8 BOX=1\n\t\tuint8 SPHERE=2\n\t\tuint8 CYLINDER=3\n\t\tuint8 CONE=4\n\t\tuint8 PRISM=5\n\t\tuint8 type\n\t\tfloat64[<=3] dimensions  #\n\t\tuint8 BOX_X=0\n\t\tuint8 BOX_Y=1\n\t\tuint8 BOX_Z=2\n\t\tuint8 SPHERE_RADIUS=0\n\t\tuint8 CYLINDER_HEIGHT=0\n\t\tuint8 CYLINDER_RADIUS=1\n\t\tuint8 CONE_HEIGHT=0\n\t\tuint8 CONE_RADIUS=1\n\t\tuint8 PRISM_HEIGHT=0\n\t\tgeometry_msgs/Polygon polygon\n\t\t\tPoint32[] points\n\t\t\t\t#\n\t\t\t\t#\n\t\t\t\tfloat32 x\n\t\t\t\tfloat32 y\n\t\t\t\tfloat32 z\n\tgeometry_msgs/Pose[] primitive_poses\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tshape_msgs/Mesh[] meshes\n\t\tMeshTriangle[] triangles\n\t\t\tuint32[3] vertex_indices\n\t\tgeometry_msgs/Point[] vertices\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Pose[] mesh_poses\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tshape_msgs/Plane[] planes\n\t\t#\n\t\tfloat64[4] coef\n\tgeometry_msgs/Pose[] plane_poses\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tstring[] subframe_names\n\tgeometry_msgs/Pose[] subframe_poses\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tbyte ADD=0\n\tbyte REMOVE=1\n\tbyte APPEND=2\n\tbyte MOVE=3\n\tbyte operation\n\n# The octomap that represents additional collision data\noctomap_msgs/OctomapWithPose octomap\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tgeometry_msgs/Pose origin\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\toctomap_msgs/Octomap octomap\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tbool binary\n\t\tstring id\n\t\tfloat64 resolution\n\t\tint8[] data"
                }
            ]
        },
        {
            "name": "/recognized_object_array",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/recognized_object_array` topic is used to publish data about recognized objects in a scene. It provides information about the objects' types, confidence levels, point clouds, bounding meshes, and poses.\n    - It is typically used for object recognition and scene understanding in robotic systems.\n\nMobile Robot Module:\n    - This ROS2 element relates to the perception module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - This element is crucial for tasks involving object detection and recognition, enabling robots to understand and interact with their environment.\n    - Typical scenarios include navigation, manipulation, and interaction tasks where the robot needs to identify and locate objects.\n\nUsage in the ROS2 System:\n    - It is suitable for use in ROS2 tasks such as autonomous navigation, robotic arm manipulation, and any application requiring scene interpretation and object interaction.",
            "interfaces": [
                {
                    "name": "object_recognition_msgs/msg/RecognizedObjectArray",
                    "details": "##################################################### HEADER ###########################################################\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# This message type describes a potential scene configuration: a set of objects that can explain the scene\nobject_recognition_msgs/RecognizedObject[] objects\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tobject_recognition_msgs/ObjectType type\n\t\tstring key\n\t\tstring db\n\tfloat32 confidence\n\tsensor_msgs/PointCloud2[] point_clouds\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tuint32 height\n\t\tuint32 width\n\t\tPointField[] fields\n\t\t\tuint8 INT8    = 1\n\t\t\tuint8 UINT8   = 2\n\t\t\tuint8 INT16   = 3\n\t\t\tuint8 UINT16  = 4\n\t\t\tuint8 INT32   = 5\n\t\t\tuint8 UINT32  = 6\n\t\t\tuint8 FLOAT32 = 7\n\t\t\tuint8 FLOAT64 = 8\n\t\t\tstring name      #\n\t\t\tuint32 offset    #\n\t\t\tuint8  datatype  #\n\t\t\tuint32 count     #\n\t\tbool    is_bigendian #\n\t\tuint32  point_step   #\n\t\tuint32  row_step     #\n\t\tuint8[] data         #\n\t\tbool is_dense        #\n\tshape_msgs/Mesh bounding_mesh\n\t\tMeshTriangle[] triangles\n\t\t\tuint32[3] vertex_indices\n\t\tgeometry_msgs/Point[] vertices\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Point[] bounding_contours\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tgeometry_msgs/PoseWithCovarianceStamped pose\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tPoseWithCovariance pose\n\t\t\tPose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tfloat64[36] covariance\n\n##################################################### SEARCH ###########################################################\n\n# The co-occurrence matrix between the recognized objects\nfloat32[] cooccurrence"
                }
            ]
        },
        {
            "name": "/scan",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/scan` topic provides data from a planar laser range-finder, commonly known as a LiDAR. It is used to obtain distance measurements from surrounding objects, which is crucial for navigation and obstacle avoidance.\n\nMobile Robot Module:\n    - This element relates to the Perception and Navigation modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - The `/scan` topic is essential for tasks such as mapping, localization, and real-time obstacle detection. It helps in creating a map of the environment and planning safe paths by detecting obstacles.\n\nUsage in the ROS2 System:\n    - It is typically used in SLAM (Simultaneous Localization and Mapping) algorithms, autonomous navigation systems, and collision avoidance strategies. Nodes like `move_base` or `amcl` in ROS2 often subscribe to this topic to perform their functions.",
            "interfaces": [
                {
                    "name": "sensor_msgs/msg/LaserScan",
                    "details": "# Single scan from a planar laser range-finder\n#\n# If you have another ranging device with different behavior (e.g. a sonar\n# array), please find or create a different message, since applications\n# will make fairly laser-specific assumptions about this data\n\nstd_msgs/Header header # timestamp in the header is the acquisition time of\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n                             # the first ray in the scan.\n                             #\n                             # in frame frame_id, angles are measured around\n                             # the positive Z axis (counterclockwise, if Z is up)\n                             # with zero angle being forward along the x axis\n\nfloat32 angle_min            # start angle of the scan [rad]\nfloat32 angle_max            # end angle of the scan [rad]\nfloat32 angle_increment      # angular distance between measurements [rad]\n\nfloat32 time_increment       # time between measurements [seconds] - if your scanner\n                             # is moving, this will be used in interpolating position\n                             # of 3d points\nfloat32 scan_time            # time between scans [seconds]\n\nfloat32 range_min            # minimum range value [m]\nfloat32 range_max            # maximum range value [m]\n\nfloat32[] ranges             # range data [m]\n                             # (Note: values < range_min or > range_max should be discarded)\nfloat32[] intensities        # intensity data [device-specific units].  If your\n                             # device does not provide intensities, please leave\n                             # the array empty."
                }
            ]
        },
        {
            "name": "/scan2",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The \"/scan2\" topic is used to publish data from a planar laser range-finder, providing information about the surrounding environment. It is typically used for obstacle detection and navigation.\n\nMobile Robot Module:\n    - This ROS2 element relates to the perception and navigation modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - The \"/scan2\" topic is crucial for tasks such as mapping, localization, and collision avoidance. It helps in detecting obstacles and planning safe paths for the robot.\n\nUsage in the ROS2 System:\n    - It is commonly used in tasks like SLAM (Simultaneous Localization and Mapping) and autonomous navigation, where accurate environmental data is essential for decision-making.",
            "interfaces": [
                {
                    "name": "sensor_msgs/msg/LaserScan",
                    "details": "# Single scan from a planar laser range-finder\n#\n# If you have another ranging device with different behavior (e.g. a sonar\n# array), please find or create a different message, since applications\n# will make fairly laser-specific assumptions about this data\n\nstd_msgs/Header header # timestamp in the header is the acquisition time of\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n                             # the first ray in the scan.\n                             #\n                             # in frame frame_id, angles are measured around\n                             # the positive Z axis (counterclockwise, if Z is up)\n                             # with zero angle being forward along the x axis\n\nfloat32 angle_min            # start angle of the scan [rad]\nfloat32 angle_max            # end angle of the scan [rad]\nfloat32 angle_increment      # angular distance between measurements [rad]\n\nfloat32 time_increment       # time between measurements [seconds] - if your scanner\n                             # is moving, this will be used in interpolating position\n                             # of 3d points\nfloat32 scan_time            # time between scans [seconds]\n\nfloat32 range_min            # minimum range value [m]\nfloat32 range_max            # maximum range value [m]\n\nfloat32[] ranges             # range data [m]\n                             # (Note: values < range_min or > range_max should be discarded)\nfloat32[] intensities        # intensity data [device-specific units].  If your\n                             # device does not provide intensities, please leave\n                             # the array empty."
                }
            ]
        },
        {
            "name": "/speed_limit",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/speed_limit` topic is used to communicate speed constraints to a mobile robot. It allows setting a speed limit either as a percentage of the robot's maximum speed or as an absolute value in meters per second.\n\nMobile Robot Module:\n    - This element relates to the motion control module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It is crucial for tasks requiring speed regulation, such as navigating through areas with speed restrictions or ensuring safe operation in dynamic environments. It helps in maintaining compliance with speed limits to prevent accidents or damage.\n\nUsage in the ROS2 System:\n    - Suitable for navigation tasks where speed control is necessary, such as in the Navigation2 stack. It can be used by planners or controllers to adjust the robot's speed dynamically based on environmental conditions or operational requirements.",
            "interfaces": [
                {
                    "name": "nav2_msgs/msg/SpeedLimit",
                    "details": "std_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n# Setting speed limit in percentage if true or in absolute values in false case\nbool percentage\n# Maximum allowed speed (in percent of maximum robot speed or in m/s depending\n# on \"percentage\" value). When no-limit it is set to 0.0\nfloat64 speed_limit"
                }
            ]
        },
        {
            "name": "/tf",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The \"/tf\" topic is used to broadcast coordinate frame transformations in a ROS2 system. It provides the necessary data to transform points, vectors, etc., between different coordinate frames.\n    - It is typically used for tasks that require spatial awareness, such as navigation and manipulation.\n\nMobile Robot Module:\n    - This element relates to the localization and navigation modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - The \"/tf\" topic is crucial for solving problems related to robot localization, mapping, and path planning. It ensures that the robot can understand its position and orientation relative to other objects and frames.\n    - Typical scenarios include autonomous navigation, where the robot needs to move through an environment while avoiding obstacles.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks such as SLAM (Simultaneous Localization and Mapping), where accurate frame transformations are necessary for building and updating maps.\n    - It is also used in robot arm manipulation tasks, where precise transformations between the robot base and end-effector are required.",
            "interfaces": [
                {
                    "name": "tf2_msgs/msg/TFMessage",
                    "details": "geometry_msgs/TransformStamped[] transforms\n\t#\n\t#\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tstring child_frame_id\n\tTransform transform\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1"
                }
            ]
        },
        {
            "name": "/waypoint_follower/transition_event",
            "type": "topic",
            "description": "Purpose of the ROS2 Element:\n    - The `/waypoint_follower/transition_event` topic is used to communicate lifecycle transition events of the waypoint follower node. It provides information about the state changes of the node, such as activation, deactivation, and shutdown.\n\nMobile Robot Module:\n    - This element relates to the navigation and control module of a mobile robot, specifically the waypoint following functionality.\n\nRelevance for Specific Tasks:\n    - It is crucial for managing the lifecycle of the waypoint follower, ensuring that the node transitions smoothly between states. This is important for tasks that require precise control over the activation and deactivation of navigation behaviors.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving lifecycle management of navigation nodes, such as starting or stopping waypoint following based on external conditions or system states. It is typically used by lifecycle managers and controllers that need to monitor and control the state of navigation nodes.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/msg/TransitionEvent",
                    "details": "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n\n# The starting state from which this event transitioned.\nState start_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label\n\n# The end state of this transition event.\nState goal_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label"
                }
            ]
        },
        {
            "name": "/apply_joint_effort",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/apply_joint_effort` service is used to apply a specified effort (force or torque) to a joint in a simulation environment. It is typically used to control the movement of joints in a robot by applying forces or torques.\n\nMobile Robot Module:\n    - This service relates to the actuation module of a mobile robot, specifically focusing on joint control within a simulated environment.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks involving precise control of joint movements, such as simulating robotic arm operations or testing joint dynamics in a virtual setting. It allows for the application of controlled efforts to achieve desired joint positions or movements.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks such as simulating robotic arm manipulation, testing control algorithms in a simulated environment, and validating joint control strategies before deploying them on physical robots.",
            "interfaces": [
                {
                    "name": "gazebo_msgs/srv/ApplyJointEffort",
                    "details": "# set urdf joint effort\nstring joint_name                       # joint to apply wrench (linear force and torque)\nfloat64 effort                          # effort to apply\nbuiltin_interfaces/Time start_time      # optional wrench application start time (seconds)\n\tint32 sec\n\tuint32 nanosec\n                                        # if start_time < current time, start as soon as possible\nbuiltin_interfaces/Duration  duration   # optional duration of wrench application time (seconds)\n\tint32 sec\n\tuint32 nanosec\n                                        # if duration < 0, apply wrench continuously without end\n                                        # if duration = 0, do nothing\n                                        # if duration < step size, assume step size and\n                                        # display warning in status_message\n---\nbool success                            # return true if effort application is successful\nstring status_message                   # comments if available"
                }
            ]
        },
        {
            "name": "/apply_link_wrench",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/apply_link_wrench` service is used to apply a specified wrench (force and torque) to a link in a Gazebo simulation. It allows for precise control over the forces acting on a robot's components within the simulation environment.\n\nMobile Robot Module:\n    - This service relates to the actuation and dynamics module of a mobile robot, specifically within a simulated environment like Gazebo.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks involving dynamic simulations where forces and torques need to be applied to test the robot's response. It is used in scenarios such as testing the robot's stability, simulating external disturbances, or validating control algorithms.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks like simulating physical interactions in Gazebo, testing control strategies under different force conditions, and validating the robot's behavior in response to applied forces.",
            "interfaces": [
                {
                    "name": "gazebo_msgs/srv/ApplyLinkWrench",
                    "details": "# Apply Wrench to Gazebo Link.\n# via the callback mechanism\n# all Gazebo operations are made in world frame\nstring link_name                          # Gazebo link to apply wrench (linear force and torque)\n                                          # wrench is applied in the gazebo world by default\n                                          # link names are prefixed by model name, e.g. pr2::base_link\nstring reference_frame                    # wrench is defined in the reference frame of this entity\n                                          # use inertial frame if left empty\n                                          # frame names are links prefixed by model name, e.g. pr2::base_link\ngeometry_msgs/Point  reference_point      # wrench is defined at this location in the reference frame\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\ngeometry_msgs/Wrench wrench               # wrench applied to the origin of the link\n\tVector3  force\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tVector3  torque\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\nbuiltin_interfaces/Time start_time        # (optional) wrench application start time (seconds)\n\tint32 sec\n\tuint32 nanosec\n                                          # if start_time is not specified, or\n                                          # start_time < current time, start as soon as possible\nbuiltin_interfaces/Duration duration      # optional duration of wrench application time (seconds)\n\tint32 sec\n\tuint32 nanosec\n                                          # if duration < 0, apply wrench continuously without end\n                                          # if duration = 0, do nothing\n                                          # if duration < step size, apply wrench\n                                          # for one step size\n---\nbool success                              # return true if set wrench successful\nstring status_message                     # comments if available"
                }
            ]
        },
        {
            "name": "/apply_planning_scene",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/apply_planning_scene` service is used to apply changes to the planning scene in a robotic environment. It allows for the modification of the robot's understanding of its surroundings, including the robot's state and the objects within the environment.\n    - It is typically used for updating the robot's planning scene to reflect changes in the environment or the robot's configuration.\n\nMobile Robot Module:\n    - This service relates to the perception and planning modules of a mobile robot, as it involves updating the robot's understanding of its environment and its own state.\n\nRelevance for Specific Tasks:\n    - This ROS2 element is crucial for tasks involving dynamic environments where the robot needs to adapt its planning based on changes in the scene. It is used in scenarios such as obstacle avoidance, path planning, and manipulation tasks where the environment is not static.\n\nUsage in the ROS2 System:\n    - It is suitable for ROS2 tasks such as motion planning with MoveIt, where the robot needs to update its planning scene to account for new obstacles or changes in the robot's configuration.",
            "interfaces": [
                {
                    "name": "moveit_msgs/srv/ApplyPlanningScene",
                    "details": "PlanningScene scene\n\tstring name\n\tRobotState robot_state\n\t\tsensor_msgs/JointState joint_state\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] name\n\t\t\tfloat64[] position\n\t\t\tfloat64[] velocity\n\t\t\tfloat64[] effort\n\t\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tgeometry_msgs/Transform[] transforms\n\t\t\t\tVector3 translation\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion rotation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tgeometry_msgs/Twist[] twist\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Wrench[] wrench\n\t\t\t\tVector3  force\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  torque\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\tAttachedCollisionObject[] attached_collision_objects\n\t\t\tstring link_name\n\t\t\tCollisionObject object\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tgeometry_msgs/Pose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring id\n\t\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\t\tstring key\n\t\t\t\t\tstring db\n\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\tuint8 type\n\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\tfloat32 z\n\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t\t#\n\t\t\t\t\tfloat64[4] coef\n\t\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring[] subframe_names\n\t\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tbyte ADD=0\n\t\t\t\tbyte REMOVE=1\n\t\t\t\tbyte APPEND=2\n\t\t\t\tbyte MOVE=3\n\t\t\t\tbyte operation\n\t\t\tstring[] touch_links\n\t\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tstring[] joint_names\n\t\t\t\tJointTrajectoryPoint[] points\n\t\t\t\t\tfloat64[] positions\n\t\t\t\t\tfloat64[] velocities\n\t\t\t\t\tfloat64[] accelerations\n\t\t\t\t\tfloat64[] effort\n\t\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\tfloat64 weight\n\t\tbool is_diff\n\tstring robot_model_name\n\tgeometry_msgs/TransformStamped[] fixed_frame_transforms\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring child_frame_id\n\t\tTransform transform\n\t\t\tVector3 translation\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion rotation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\tAllowedCollisionMatrix allowed_collision_matrix\n\t\tstring[] entry_names\n\t\tAllowedCollisionEntry[] entry_values\n\t\t\tbool[] enabled\n\t\tstring[] default_entry_names\n\t\tbool[] default_entry_values\n\tLinkPadding[] link_padding\n\t\tstring link_name\n\t\tfloat64 padding\n\tLinkScale[] link_scale\n\t\tstring link_name\n\t\tfloat64 scale\n\tObjectColor[] object_colors\n\t\tstring id\n\t\tstd_msgs/ColorRGBA color\n\t\t\tfloat32 r\n\t\t\tfloat32 g\n\t\t\tfloat32 b\n\t\t\tfloat32 a\n\tPlanningSceneWorld world\n\t\tCollisionObject[] collision_objects\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Pose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring id\n\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\tstring key\n\t\t\t\tstring db\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t#\n\t\t\t\tfloat64[4] coef\n\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring[] subframe_names\n\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tbyte ADD=0\n\t\t\tbyte REMOVE=1\n\t\t\tbyte APPEND=2\n\t\t\tbyte MOVE=3\n\t\t\tbyte operation\n\t\toctomap_msgs/OctomapWithPose octomap\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Pose origin\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\toctomap_msgs/Octomap octomap\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tbool binary\n\t\t\t\tstring id\n\t\t\t\tfloat64 resolution\n\t\t\t\tint8[] data\n\tbool is_diff\n---\nbool success"
                }
            ]
        },
        {
            "name": "/behavior_server/change_state",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/behavior_server/change_state` service is used to manage the lifecycle states of nodes in a ROS2 system. It allows for transitions between different states such as configuring, activating, deactivating, and shutting down nodes.\n    - It is typically used to control the operational state of nodes, ensuring they are in the correct state for their intended function.\n\nMobile Robot Module:\n    - This service relates to the control and management module of a mobile robot, particularly in managing the lifecycle of nodes responsible for various robot behaviors.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks that require dynamic reconfiguration or state management of robot components, such as switching between different operational modes or safely shutting down components.\n    - Typical scenarios include transitioning a robot's navigation system from an inactive to an active state or handling error states during operation.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks such as lifecycle management of navigation, perception, or control nodes in a mobile robot, ensuring that each component is correctly configured and activated as needed.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/ChangeState",
                    "details": "# The requested transition.\n#\n# This change state service will fail if the transition is not possible.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n---\n\n# Indicates whether the service was able to initiate the state transition\nbool success"
                }
            ]
        },
        {
            "name": "/behavior_server/get_available_transitions",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/behavior_server/get_available_transitions` service provides information about the possible state transitions for a lifecycle node. It is typically used to query the current state and potential transitions of a node, which is crucial for managing node states in a controlled manner.\n\nMobile Robot Module:\n    - This element relates to the lifecycle management module of a mobile robot, which is responsible for controlling the states of various nodes within the robot's system.\n\nRelevance for Specific Tasks:\n    - This service is essential for tasks that require dynamic reconfiguration or state management of nodes, such as activating or deactivating sensors and actuators based on the robot's operational context. It is particularly useful in scenarios where the robot needs to adapt to changing environments or tasks by transitioning nodes between states like active, inactive, or shutdown.\n\nUsage in the ROS2 System:\n    - It is suitable for ROS2 tasks involving lifecycle management, such as automated system startup and shutdown sequences, error recovery processes, and runtime reconfiguration of node states to optimize performance or conserve resources.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/GetAvailableTransitions",
                    "details": "---\n# An array of the possible start_state-goal_state transitions\nTransitionDescription[] available_transitions\n\tTransition transition\n\t\tuint8 TRANSITION_CREATE = 0\n\t\tuint8 TRANSITION_CONFIGURE = 1\n\t\tuint8 TRANSITION_CLEANUP = 2\n\t\tuint8 TRANSITION_ACTIVATE = 3\n\t\tuint8 TRANSITION_DEACTIVATE = 4\n\t\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\t\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\t\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\t\tuint8 TRANSITION_DESTROY = 8\n\t\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\t\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\t\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\t\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\t\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\t\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\t\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\t\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\t\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\t\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\t\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\t\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\t\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\t\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\t\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\t\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\t\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\t\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\t\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\t\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\t\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t\t##\n\t\t##\n\t\tuint8 id\n\t\tstring label\n\tState start_state\n\t\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\t\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\t\tuint8 PRIMARY_STATE_INACTIVE = 2\n\t\tuint8 PRIMARY_STATE_ACTIVE = 3\n\t\tuint8 PRIMARY_STATE_FINALIZED = 4\n\t\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\t\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\t\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\t\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\t\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\t\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\t\tuint8 id\n\t\tstring label\n\tState goal_state\n\t\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\t\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\t\tuint8 PRIMARY_STATE_INACTIVE = 2\n\t\tuint8 PRIMARY_STATE_ACTIVE = 3\n\t\tuint8 PRIMARY_STATE_FINALIZED = 4\n\t\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\t\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\t\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\t\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\t\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\t\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\t\tuint8 id\n\t\tstring label"
                }
            ]
        },
        {
            "name": "/behavior_server/get_transition_graph",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/behavior_server/get_transition_graph` service provides information about the possible state transitions of a lifecycle node. It is typically used to query the available transitions between different states of a node, which is crucial for managing the node's lifecycle.\n\nMobile Robot Module:\n    - This element relates to the lifecycle management module of a mobile robot, which is responsible for controlling the states of various nodes within the robot's system.\n\nRelevance for Specific Tasks:\n    - This service is essential for tasks that require dynamic reconfiguration or state management of nodes, such as activating or deactivating sensors and actuators based on the robot's operational context. It is particularly relevant in scenarios where the robot needs to adapt its behavior in response to environmental changes or internal conditions.\n\nUsage in the ROS2 System:\n    - It is suitable for ROS2 tasks involving lifecycle management, such as initializing, configuring, and shutting down nodes in a controlled manner. It is commonly used by lifecycle managers and state machines to ensure smooth transitions and maintain system stability.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/GetAvailableTransitions",
                    "details": "---\n# An array of the possible start_state-goal_state transitions\nTransitionDescription[] available_transitions\n\tTransition transition\n\t\tuint8 TRANSITION_CREATE = 0\n\t\tuint8 TRANSITION_CONFIGURE = 1\n\t\tuint8 TRANSITION_CLEANUP = 2\n\t\tuint8 TRANSITION_ACTIVATE = 3\n\t\tuint8 TRANSITION_DEACTIVATE = 4\n\t\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\t\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\t\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\t\tuint8 TRANSITION_DESTROY = 8\n\t\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\t\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\t\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\t\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\t\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\t\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\t\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\t\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\t\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\t\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\t\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\t\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\t\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\t\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\t\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\t\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\t\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\t\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\t\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\t\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\t\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t\t##\n\t\t##\n\t\tuint8 id\n\t\tstring label\n\tState start_state\n\t\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\t\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\t\tuint8 PRIMARY_STATE_INACTIVE = 2\n\t\tuint8 PRIMARY_STATE_ACTIVE = 3\n\t\tuint8 PRIMARY_STATE_FINALIZED = 4\n\t\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\t\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\t\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\t\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\t\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\t\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\t\tuint8 id\n\t\tstring label\n\tState goal_state\n\t\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\t\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\t\tuint8 PRIMARY_STATE_INACTIVE = 2\n\t\tuint8 PRIMARY_STATE_ACTIVE = 3\n\t\tuint8 PRIMARY_STATE_FINALIZED = 4\n\t\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\t\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\t\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\t\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\t\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\t\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\t\tuint8 id\n\t\tstring label"
                }
            ]
        },
        {
            "name": "/bt_navigator/change_state",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/bt_navigator/change_state` service is used to manage the lifecycle states of the behavior tree navigator in a ROS2 system. It allows transitions between different states such as configuring, activating, deactivating, and shutting down the navigator.\n\nMobile Robot Module:\n    - This service relates to the navigation module of a mobile robot, specifically the behavior tree navigator component.\n\nRelevance for Specific Tasks:\n    - This service is crucial for controlling the state transitions of the navigation system, ensuring that the navigator is in the correct state for operation. It is used in scenarios where the navigation system needs to be reconfigured, activated, or safely shut down.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks involving dynamic reconfiguration of the navigation stack, such as during startup, shutdown, or when responding to errors. It is typically used by lifecycle management nodes and navigation controllers.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/ChangeState",
                    "details": "# The requested transition.\n#\n# This change state service will fail if the transition is not possible.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n---\n\n# Indicates whether the service was able to initiate the state transition\nbool success"
                }
            ]
        },
        {
            "name": "/bt_navigator/get_available_transitions",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/bt_navigator/get_available_transitions` service provides information about the possible state transitions for a lifecycle node. It is typically used to query the current state and potential state changes of a node, which is crucial for managing node behavior in a controlled manner.\n\nMobile Robot Module:\n    - This ROS2 element relates to the navigation module of a mobile robot, specifically the behavior tree navigator.\n\nRelevance for Specific Tasks:\n    - This service is essential for managing the lifecycle of nodes, ensuring that nodes transition through states like configuring, activating, and deactivating correctly. It is particularly relevant in scenarios where the robot's navigation system needs to be dynamically managed and controlled.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks involving lifecycle management of nodes, such as activating or deactivating navigation behaviors based on the robot's operational context. It interacts with lifecycle management tools and behavior tree nodes in ROS2.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/GetAvailableTransitions",
                    "details": "---\n# An array of the possible start_state-goal_state transitions\nTransitionDescription[] available_transitions\n\tTransition transition\n\t\tuint8 TRANSITION_CREATE = 0\n\t\tuint8 TRANSITION_CONFIGURE = 1\n\t\tuint8 TRANSITION_CLEANUP = 2\n\t\tuint8 TRANSITION_ACTIVATE = 3\n\t\tuint8 TRANSITION_DEACTIVATE = 4\n\t\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\t\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\t\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\t\tuint8 TRANSITION_DESTROY = 8\n\t\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\t\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\t\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\t\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\t\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\t\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\t\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\t\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\t\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\t\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\t\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\t\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\t\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\t\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\t\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\t\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\t\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\t\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\t\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\t\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\t\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t\t##\n\t\t##\n\t\tuint8 id\n\t\tstring label\n\tState start_state\n\t\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\t\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\t\tuint8 PRIMARY_STATE_INACTIVE = 2\n\t\tuint8 PRIMARY_STATE_ACTIVE = 3\n\t\tuint8 PRIMARY_STATE_FINALIZED = 4\n\t\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\t\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\t\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\t\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\t\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\t\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\t\tuint8 id\n\t\tstring label\n\tState goal_state\n\t\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\t\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\t\tuint8 PRIMARY_STATE_INACTIVE = 2\n\t\tuint8 PRIMARY_STATE_ACTIVE = 3\n\t\tuint8 PRIMARY_STATE_FINALIZED = 4\n\t\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\t\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\t\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\t\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\t\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\t\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\t\tuint8 id\n\t\tstring label"
                }
            ]
        },
        {
            "name": "/bt_navigator/set_parameters",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/bt_navigator/set_parameters` service allows for the dynamic configuration of parameters within the behavior tree navigator. It is typically used to adjust navigation parameters on-the-fly without restarting the system.\n\nMobile Robot Module:\n    - This service relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It is relevant for tasks that require real-time adjustments to navigation strategies, such as changing speed limits or obstacle avoidance parameters during operation. This is crucial in dynamic environments where conditions can change rapidly.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks like tuning navigation parameters during testing or deployment, and it is commonly used by nodes that need to modify navigation behavior dynamically, such as adaptive path planners or user interfaces for manual parameter tuning.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParameters",
                    "details": "# A list of parameters to set.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting each parameter succeeded or not and why.\nSetParametersResult[] results\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/check_state_validity",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/check_state_validity` service is used to determine if a given robot state is valid within a specified environment. It checks for collisions and constraint violations, ensuring the robot's planned movements are feasible and safe.\n\nMobile Robot Module:\n    - This service relates to the motion planning and control module of a mobile robot, particularly in robotic arms or manipulators.\n\nRelevance for Specific Tasks:\n    - It is crucial for tasks involving motion planning and execution, where the robot must navigate or manipulate objects without collisions. It ensures that the robot's movements adhere to predefined constraints and are safe to execute.\n\nUsage in the ROS2 System:\n    - This service is typically used in conjunction with motion planning frameworks like MoveIt, where it validates planned trajectories before execution. It is suitable for tasks such as robotic arm manipulation, autonomous navigation, and any scenario requiring collision-free movement.",
            "interfaces": [
                {
                    "name": "moveit_msgs/srv/GetStateValidity",
                    "details": "RobotState robot_state\n\tsensor_msgs/JointState joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] name\n\t\tfloat64[] position\n\t\tfloat64[] velocity\n\t\tfloat64[] effort\n\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tgeometry_msgs/Transform[] transforms\n\t\t\tVector3 translation\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion rotation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tgeometry_msgs/Twist[] twist\n\t\t\tVector3  linear\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  angular\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tgeometry_msgs/Wrench[] wrench\n\t\t\tVector3  force\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  torque\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\tAttachedCollisionObject[] attached_collision_objects\n\t\tstring link_name\n\t\tCollisionObject object\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Pose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring id\n\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\tstring key\n\t\t\t\tstring db\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t#\n\t\t\t\tfloat64[4] coef\n\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring[] subframe_names\n\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tbyte ADD=0\n\t\t\tbyte REMOVE=1\n\t\t\tbyte APPEND=2\n\t\t\tbyte MOVE=3\n\t\t\tbyte operation\n\t\tstring[] touch_links\n\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tJointTrajectoryPoint[] points\n\t\t\t\tfloat64[] positions\n\t\t\t\tfloat64[] velocities\n\t\t\t\tfloat64[] accelerations\n\t\t\t\tfloat64[] effort\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\tfloat64 weight\n\tbool is_diff\nstring group_name\nConstraints constraints\n\tstring name\n\tJointConstraint[] joint_constraints\n\t\tstring joint_name\n\t\tfloat64 position\n\t\tfloat64 tolerance_above\n\t\tfloat64 tolerance_below\n\t\tfloat64 weight\n\tPositionConstraint[] position_constraints\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring link_name\n\t\tgeometry_msgs/Vector3 target_point_offset\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tBoundingVolume constraint_region\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\tfloat64 weight\n\tOrientationConstraint[] orientation_constraints\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tgeometry_msgs/Quaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\t\tstring link_name\n\t\tfloat64 absolute_x_axis_tolerance\n\t\tfloat64 absolute_y_axis_tolerance\n\t\tfloat64 absolute_z_axis_tolerance\n\t\tuint8 parameterization\n\t\tuint8 XYZ_EULER_ANGLES=0\n\t\tuint8 ROTATION_VECTOR=1\n\t\tfloat64 weight\n\tVisibilityConstraint[] visibility_constraints\n\t\tfloat64 target_radius\n\t\tgeometry_msgs/PoseStamped target_pose\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tPose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\tint32 cone_sides\n\t\tgeometry_msgs/PoseStamped sensor_pose\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tPose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\tfloat64 max_view_angle\n\t\tfloat64 max_range_angle\n\t\tuint8 SENSOR_Z=0\n\t\tuint8 SENSOR_Y=1\n\t\tuint8 SENSOR_X=2\n\t\tuint8 sensor_view_direction\n\t\tfloat64 weight\n\n---\n\nbool valid\nContactInformation[] contacts\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tgeometry_msgs/Point position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tgeometry_msgs/Vector3 normal\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tfloat64 depth\n\tstring contact_body_1\n\tuint32 body_type_1\n\tstring contact_body_2\n\tuint32 body_type_2\n\tuint32 ROBOT_LINK=0\n\tuint32 WORLD_OBJECT=1\n\tuint32 ROBOT_ATTACHED=2\nCostSource[] cost_sources\n\tfloat64 cost_density\n\tgeometry_msgs/Vector3 aabb_min\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tgeometry_msgs/Vector3 aabb_max\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\nConstraintEvalResult[] constraint_result\n\tbool result\n\tfloat64 distance"
                }
            ]
        },
        {
            "name": "/clear_joint_efforts",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/clear_joint_efforts` service is used to reset or clear the efforts applied to a specific joint in a simulation environment. It is typically used to stop any forces or torques being applied to a joint, effectively bringing it to a neutral state.\n\nMobile Robot Module:\n   - This service relates to the actuation module of a mobile robot, specifically the joints that require control over applied efforts.\n\nRelevance for Specific Tasks:\n   - This service is useful for tasks that require resetting joint states during simulations, such as testing control algorithms or recovering from errors. It is particularly relevant in scenarios where precise control over joint forces is necessary.\n\nUsage in the ROS2 System:\n   - It is suitable for use in simulation environments like Gazebo, where developers need to manage joint efforts dynamically. It can be used in conjunction with other control services to ensure accurate and reliable robot behavior during testing and development.",
            "interfaces": [
                {
                    "name": "gazebo_msgs/srv/JointRequest",
                    "details": "string joint_name   # name of the joint requested\n---"
                }
            ]
        },
        {
            "name": "/compute_cartesian_path",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/compute_cartesian_path` service is used to compute a Cartesian path for a robot's end effector. It calculates a trajectory that follows a series of waypoints in Cartesian space, ensuring the robot moves in a straight line between these points.\n\nMobile Robot Module:\n    - This service relates to the motion planning and control module of a mobile robot, specifically for robotic arms or manipulators.\n\nRelevance for Specific Tasks:\n    - It is used to solve problems involving precise path planning for robotic arms, such as moving an end effector along a specified path without collisions. Typical scenarios include pick-and-place tasks, assembly operations, and any task requiring precise end effector positioning.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving MoveIt! for motion planning, where it interacts with other ROS2 components like planners and controllers to execute the computed path.",
            "interfaces": [
                {
                    "name": "moveit_msgs/srv/GetCartesianPath",
                    "details": "# Define the frame for the specified waypoints\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# The start at which to start the Cartesian path\nRobotState start_state\n\tsensor_msgs/JointState joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] name\n\t\tfloat64[] position\n\t\tfloat64[] velocity\n\t\tfloat64[] effort\n\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tgeometry_msgs/Transform[] transforms\n\t\t\tVector3 translation\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion rotation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tgeometry_msgs/Twist[] twist\n\t\t\tVector3  linear\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  angular\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tgeometry_msgs/Wrench[] wrench\n\t\t\tVector3  force\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  torque\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\tAttachedCollisionObject[] attached_collision_objects\n\t\tstring link_name\n\t\tCollisionObject object\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Pose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring id\n\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\tstring key\n\t\t\t\tstring db\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t#\n\t\t\t\tfloat64[4] coef\n\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring[] subframe_names\n\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tbyte ADD=0\n\t\t\tbyte REMOVE=1\n\t\t\tbyte APPEND=2\n\t\t\tbyte MOVE=3\n\t\t\tbyte operation\n\t\tstring[] touch_links\n\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tJointTrajectoryPoint[] points\n\t\t\t\tfloat64[] positions\n\t\t\t\tfloat64[] velocities\n\t\t\t\tfloat64[] accelerations\n\t\t\t\tfloat64[] effort\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\tfloat64 weight\n\tbool is_diff\n\n# Mandatory name of group to compute the path for\nstring group_name\n\n# Optional name of IK link for which waypoints are specified.\n# If not specified, the tip of the group (which is assumed to be a chain)\n# is assumed to be the link\nstring link_name\n\n# A sequence of waypoints to be followed by the specified link,\n# while moving the specified group, such that the group moves only\n# in a straight line between waypoints\ngeometry_msgs/Pose[] waypoints\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\n\n# The maximum distance (in Cartesian space) between consecutive points\n# in the returned path. This must always be specified and > 0\nfloat64 max_step\n\n# If jump_threshold is set > 0, it acts as a scaling factor that is used to\n# filter out large relative joint-space jumps in the generated Cartesian path.\n# To this end, the average joint-space distance between consecutive waypoints\n# is computed. If any joint-space distance is larger than this average distance\n# by a factor of jump_threshold_factor, this step is considered a jump\n# and the returned path is truncated before the step.\nfloat64 jump_threshold\n\n# If prismatic_jump_threshold or revolute_jump_threshold are set > 0, then for\n# all active prismatic or revolute joints, the joint-space difference between\n# consecutive waypoints is compared to the respective absolute threshold.\n# If any threshold is exceeded, this step is considered a jump and the returned path\n# is truncated before the step.\nfloat64 prismatic_jump_threshold\nfloat64 revolute_jump_threshold\n\n# Set to true if collisions should be avoided when possible\nbool avoid_collisions\n\n# Specify additional constraints to be met by the Cartesian path\nConstraints path_constraints\n\tstring name\n\tJointConstraint[] joint_constraints\n\t\tstring joint_name\n\t\tfloat64 position\n\t\tfloat64 tolerance_above\n\t\tfloat64 tolerance_below\n\t\tfloat64 weight\n\tPositionConstraint[] position_constraints\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring link_name\n\t\tgeometry_msgs/Vector3 target_point_offset\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tBoundingVolume constraint_region\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\tfloat64 weight\n\tOrientationConstraint[] orientation_constraints\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tgeometry_msgs/Quaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\t\tstring link_name\n\t\tfloat64 absolute_x_axis_tolerance\n\t\tfloat64 absolute_y_axis_tolerance\n\t\tfloat64 absolute_z_axis_tolerance\n\t\tuint8 parameterization\n\t\tuint8 XYZ_EULER_ANGLES=0\n\t\tuint8 ROTATION_VECTOR=1\n\t\tfloat64 weight\n\tVisibilityConstraint[] visibility_constraints\n\t\tfloat64 target_radius\n\t\tgeometry_msgs/PoseStamped target_pose\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tPose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\tint32 cone_sides\n\t\tgeometry_msgs/PoseStamped sensor_pose\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tPose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\tfloat64 max_view_angle\n\t\tfloat64 max_range_angle\n\t\tuint8 SENSOR_Z=0\n\t\tuint8 SENSOR_Y=1\n\t\tuint8 SENSOR_X=2\n\t\tuint8 sensor_view_direction\n\t\tfloat64 weight\n\n---\n\n# The state at which the computed path starts\nRobotState start_state\n\tsensor_msgs/JointState joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] name\n\t\tfloat64[] position\n\t\tfloat64[] velocity\n\t\tfloat64[] effort\n\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tgeometry_msgs/Transform[] transforms\n\t\t\tVector3 translation\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion rotation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tgeometry_msgs/Twist[] twist\n\t\t\tVector3  linear\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  angular\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tgeometry_msgs/Wrench[] wrench\n\t\t\tVector3  force\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  torque\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\tAttachedCollisionObject[] attached_collision_objects\n\t\tstring link_name\n\t\tCollisionObject object\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Pose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring id\n\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\tstring key\n\t\t\t\tstring db\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t#\n\t\t\t\tfloat64[4] coef\n\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring[] subframe_names\n\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tbyte ADD=0\n\t\t\tbyte REMOVE=1\n\t\t\tbyte APPEND=2\n\t\t\tbyte MOVE=3\n\t\t\tbyte operation\n\t\tstring[] touch_links\n\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tJointTrajectoryPoint[] points\n\t\t\t\tfloat64[] positions\n\t\t\t\tfloat64[] velocities\n\t\t\t\tfloat64[] accelerations\n\t\t\t\tfloat64[] effort\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\tfloat64 weight\n\tbool is_diff\n\n# The computed solution trajectory, for the desired group, in configuration space\nRobotTrajectory solution\n\ttrajectory_msgs/JointTrajectory joint_trajectory\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tJointTrajectoryPoint[] points\n\t\t\tfloat64[] positions\n\t\t\tfloat64[] velocities\n\t\t\tfloat64[] accelerations\n\t\t\tfloat64[] effort\n\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\ttrajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tMultiDOFJointTrajectoryPoint[] points\n\t\t\tgeometry_msgs/Transform[] transforms\n\t\t\t\tVector3 translation\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion rotation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tgeometry_msgs/Twist[] velocities\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Twist[] accelerations\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\n# If the computation was incomplete, this value indicates the fraction of the path\n# that was in fact computed (number of waypoints traveled through)\nfloat64 fraction\n\n# The error code of the computation\nMoveItErrorCodes error_code\n\tint32 val\n\tint32 SUCCESS=1\n\tint32 FAILURE=99999\n\tint32 PLANNING_FAILED=-1\n\tint32 INVALID_MOTION_PLAN=-2\n\tint32 MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE=-3\n\tint32 CONTROL_FAILED=-4\n\tint32 UNABLE_TO_AQUIRE_SENSOR_DATA=-5\n\tint32 TIMED_OUT=-6\n\tint32 PREEMPTED=-7\n\tint32 START_STATE_IN_COLLISION=-10\n\tint32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-11\n\tint32 START_STATE_INVALID=-26\n\tint32 GOAL_IN_COLLISION=-12\n\tint32 GOAL_VIOLATES_PATH_CONSTRAINTS=-13\n\tint32 GOAL_CONSTRAINTS_VIOLATED=-14\n\tint32 GOAL_STATE_INVALID=-27\n\tint32 UNRECOGNIZED_GOAL_TYPE=-28\n\tint32 INVALID_GROUP_NAME=-15\n\tint32 INVALID_GOAL_CONSTRAINTS=-16\n\tint32 INVALID_ROBOT_STATE=-17\n\tint32 INVALID_LINK_NAME=-18\n\tint32 INVALID_OBJECT_NAME=-19\n\tint32 FRAME_TRANSFORM_FAILURE=-21\n\tint32 COLLISION_CHECKING_UNAVAILABLE=-22\n\tint32 ROBOT_STATE_STALE=-23\n\tint32 SENSOR_INFO_STALE=-24\n\tint32 COMMUNICATION_FAILURE=-25\n\tint32 CRASH=-29\n\tint32 ABORT=-30\n\tint32 NO_IK_SOLUTION=-31"
                }
            ]
        },
        {
            "name": "/compute_fk",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/compute_fk` service is used to compute forward kinematics for a robot. It calculates the position and orientation of specified robot links based on the current joint states.\n    - It is typically used for determining the pose of robot end-effectors or other links in a given frame of reference.\n\nMobile Robot Module:\n    - This service relates to the kinematics module of a mobile robot, particularly in robotic arms or manipulators.\n\nRelevance for Specific Tasks:\n    - It solves the problem of determining the spatial configuration of robot parts, which is crucial for tasks like manipulation, navigation, and interaction with the environment.\n    - Typical scenarios include robotic arm positioning, tool usage, and ensuring collision-free movements.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving robotic arm control, such as pick-and-place operations, assembly tasks, and any application requiring precise link positioning.",
            "interfaces": [
                {
                    "name": "moveit_msgs/srv/GetPositionFK",
                    "details": "# A service definition for a standard forward kinematics service\n# The frame_id in the header message is the frame in which\n# the forward kinematics poses will be returned\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# A vector of link name for which forward kinematics must be computed\nstring[] fk_link_names\n\n# A robot state consisting of joint names and joint positions to be used for forward kinematics\nRobotState robot_state\n\tsensor_msgs/JointState joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] name\n\t\tfloat64[] position\n\t\tfloat64[] velocity\n\t\tfloat64[] effort\n\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tgeometry_msgs/Transform[] transforms\n\t\t\tVector3 translation\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion rotation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tgeometry_msgs/Twist[] twist\n\t\t\tVector3  linear\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  angular\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tgeometry_msgs/Wrench[] wrench\n\t\t\tVector3  force\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  torque\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\tAttachedCollisionObject[] attached_collision_objects\n\t\tstring link_name\n\t\tCollisionObject object\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Pose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring id\n\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\tstring key\n\t\t\t\tstring db\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t#\n\t\t\t\tfloat64[4] coef\n\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring[] subframe_names\n\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tbyte ADD=0\n\t\t\tbyte REMOVE=1\n\t\t\tbyte APPEND=2\n\t\t\tbyte MOVE=3\n\t\t\tbyte operation\n\t\tstring[] touch_links\n\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tJointTrajectoryPoint[] points\n\t\t\t\tfloat64[] positions\n\t\t\t\tfloat64[] velocities\n\t\t\t\tfloat64[] accelerations\n\t\t\t\tfloat64[] effort\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\tfloat64 weight\n\tbool is_diff\n---\n# The resultant vector of PoseStamped messages that contains the (stamped) poses of the requested links\ngeometry_msgs/PoseStamped[] pose_stamped\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\n# The list of link names corresponding to the poses\nstring[] fk_link_names\n\nMoveItErrorCodes error_code\n\tint32 val\n\tint32 SUCCESS=1\n\tint32 FAILURE=99999\n\tint32 PLANNING_FAILED=-1\n\tint32 INVALID_MOTION_PLAN=-2\n\tint32 MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE=-3\n\tint32 CONTROL_FAILED=-4\n\tint32 UNABLE_TO_AQUIRE_SENSOR_DATA=-5\n\tint32 TIMED_OUT=-6\n\tint32 PREEMPTED=-7\n\tint32 START_STATE_IN_COLLISION=-10\n\tint32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-11\n\tint32 START_STATE_INVALID=-26\n\tint32 GOAL_IN_COLLISION=-12\n\tint32 GOAL_VIOLATES_PATH_CONSTRAINTS=-13\n\tint32 GOAL_CONSTRAINTS_VIOLATED=-14\n\tint32 GOAL_STATE_INVALID=-27\n\tint32 UNRECOGNIZED_GOAL_TYPE=-28\n\tint32 INVALID_GROUP_NAME=-15\n\tint32 INVALID_GOAL_CONSTRAINTS=-16\n\tint32 INVALID_ROBOT_STATE=-17\n\tint32 INVALID_LINK_NAME=-18\n\tint32 INVALID_OBJECT_NAME=-19\n\tint32 FRAME_TRANSFORM_FAILURE=-21\n\tint32 COLLISION_CHECKING_UNAVAILABLE=-22\n\tint32 ROBOT_STATE_STALE=-23\n\tint32 SENSOR_INFO_STALE=-24\n\tint32 COMMUNICATION_FAILURE=-25\n\tint32 CRASH=-29\n\tint32 ABORT=-30\n\tint32 NO_IK_SOLUTION=-31"
                }
            ]
        },
        {
            "name": "/compute_ik",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/compute_ik` service is used to perform inverse kinematics (IK) computations. It calculates the joint configurations needed to achieve a desired end-effector position and orientation.\n    - It is typically used in robotic arms to determine the necessary joint angles to reach a specific target in space.\n\nMobile Robot Module:\n    - This ROS2 element relates to the manipulator or robotic arm module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks that require precise positioning of a robotic arm, such as pick-and-place operations, assembly tasks, or any application where the end-effector must reach a specific location.\n    - It plays a role in scenarios where the robot needs to interact with objects in its environment, requiring accurate control of its arm's movements.\n\nUsage in the ROS2 System:\n    - Suitable for use in ROS2 systems involving MoveIt, a motion planning framework, where it can be called to compute the necessary joint states for a given end-effector pose.\n    - It is often used in conjunction with motion planning and execution nodes to achieve complex manipulation tasks.",
            "interfaces": [
                {
                    "name": "moveit_msgs/srv/GetPositionIK",
                    "details": "# A service call to carry out an inverse kinematics computation\n# The inverse kinematics request\nPositionIKRequest ik_request\n\tstring group_name\n\tmoveit_msgs/RobotState robot_state\n\t\tsensor_msgs/JointState joint_state\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] name\n\t\t\tfloat64[] position\n\t\t\tfloat64[] velocity\n\t\t\tfloat64[] effort\n\t\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tgeometry_msgs/Transform[] transforms\n\t\t\t\tVector3 translation\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion rotation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tgeometry_msgs/Twist[] twist\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Wrench[] wrench\n\t\t\t\tVector3  force\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  torque\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\tAttachedCollisionObject[] attached_collision_objects\n\t\t\tstring link_name\n\t\t\tCollisionObject object\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tgeometry_msgs/Pose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring id\n\t\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\t\tstring key\n\t\t\t\t\tstring db\n\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\tuint8 type\n\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\tfloat32 z\n\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t\t#\n\t\t\t\t\tfloat64[4] coef\n\t\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring[] subframe_names\n\t\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tbyte ADD=0\n\t\t\t\tbyte REMOVE=1\n\t\t\t\tbyte APPEND=2\n\t\t\t\tbyte MOVE=3\n\t\t\t\tbyte operation\n\t\t\tstring[] touch_links\n\t\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tstring[] joint_names\n\t\t\t\tJointTrajectoryPoint[] points\n\t\t\t\t\tfloat64[] positions\n\t\t\t\t\tfloat64[] velocities\n\t\t\t\t\tfloat64[] accelerations\n\t\t\t\t\tfloat64[] effort\n\t\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\tfloat64 weight\n\t\tbool is_diff\n\tConstraints constraints\n\t\tstring name\n\t\tJointConstraint[] joint_constraints\n\t\t\tstring joint_name\n\t\t\tfloat64 position\n\t\t\tfloat64 tolerance_above\n\t\t\tfloat64 tolerance_below\n\t\t\tfloat64 weight\n\t\tPositionConstraint[] position_constraints\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring link_name\n\t\t\tgeometry_msgs/Vector3 target_point_offset\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tBoundingVolume constraint_region\n\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\tuint8 type\n\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\tfloat32 z\n\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tfloat64 weight\n\t\tOrientationConstraint[] orientation_constraints\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Quaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\t\tstring link_name\n\t\t\tfloat64 absolute_x_axis_tolerance\n\t\t\tfloat64 absolute_y_axis_tolerance\n\t\t\tfloat64 absolute_z_axis_tolerance\n\t\t\tuint8 parameterization\n\t\t\tuint8 XYZ_EULER_ANGLES=0\n\t\t\tuint8 ROTATION_VECTOR=1\n\t\t\tfloat64 weight\n\t\tVisibilityConstraint[] visibility_constraints\n\t\t\tfloat64 target_radius\n\t\t\tgeometry_msgs/PoseStamped target_pose\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tPose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tint32 cone_sides\n\t\t\tgeometry_msgs/PoseStamped sensor_pose\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tPose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tfloat64 max_view_angle\n\t\t\tfloat64 max_range_angle\n\t\t\tuint8 SENSOR_Z=0\n\t\t\tuint8 SENSOR_Y=1\n\t\t\tuint8 SENSOR_X=2\n\t\t\tuint8 sensor_view_direction\n\t\t\tfloat64 weight\n\tbool avoid_collisions\n\tstring ik_link_name\n\tgeometry_msgs/PoseStamped pose_stamped\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tPose pose\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\tstring[] ik_link_names\n\tgeometry_msgs/PoseStamped[] pose_stamped_vector\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tPose pose\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\tbuiltin_interfaces/Duration timeout\n\t\tint32 sec\n\t\tuint32 nanosec\n\n---\n\n# The returned solution\n# (in the same order as the list of joints specified in the IKRequest message)\nRobotState solution\n\tsensor_msgs/JointState joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] name\n\t\tfloat64[] position\n\t\tfloat64[] velocity\n\t\tfloat64[] effort\n\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tgeometry_msgs/Transform[] transforms\n\t\t\tVector3 translation\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion rotation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tgeometry_msgs/Twist[] twist\n\t\t\tVector3  linear\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  angular\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tgeometry_msgs/Wrench[] wrench\n\t\t\tVector3  force\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  torque\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\tAttachedCollisionObject[] attached_collision_objects\n\t\tstring link_name\n\t\tCollisionObject object\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Pose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring id\n\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\tstring key\n\t\t\t\tstring db\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t#\n\t\t\t\tfloat64[4] coef\n\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring[] subframe_names\n\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tbyte ADD=0\n\t\t\tbyte REMOVE=1\n\t\t\tbyte APPEND=2\n\t\t\tbyte MOVE=3\n\t\t\tbyte operation\n\t\tstring[] touch_links\n\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tJointTrajectoryPoint[] points\n\t\t\t\tfloat64[] positions\n\t\t\t\tfloat64[] velocities\n\t\t\t\tfloat64[] accelerations\n\t\t\t\tfloat64[] effort\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\tfloat64 weight\n\tbool is_diff\n\nMoveItErrorCodes error_code\n\tint32 val\n\tint32 SUCCESS=1\n\tint32 FAILURE=99999\n\tint32 PLANNING_FAILED=-1\n\tint32 INVALID_MOTION_PLAN=-2\n\tint32 MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE=-3\n\tint32 CONTROL_FAILED=-4\n\tint32 UNABLE_TO_AQUIRE_SENSOR_DATA=-5\n\tint32 TIMED_OUT=-6\n\tint32 PREEMPTED=-7\n\tint32 START_STATE_IN_COLLISION=-10\n\tint32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-11\n\tint32 START_STATE_INVALID=-26\n\tint32 GOAL_IN_COLLISION=-12\n\tint32 GOAL_VIOLATES_PATH_CONSTRAINTS=-13\n\tint32 GOAL_CONSTRAINTS_VIOLATED=-14\n\tint32 GOAL_STATE_INVALID=-27\n\tint32 UNRECOGNIZED_GOAL_TYPE=-28\n\tint32 INVALID_GROUP_NAME=-15\n\tint32 INVALID_GOAL_CONSTRAINTS=-16\n\tint32 INVALID_ROBOT_STATE=-17\n\tint32 INVALID_LINK_NAME=-18\n\tint32 INVALID_OBJECT_NAME=-19\n\tint32 FRAME_TRANSFORM_FAILURE=-21\n\tint32 COLLISION_CHECKING_UNAVAILABLE=-22\n\tint32 ROBOT_STATE_STALE=-23\n\tint32 SENSOR_INFO_STALE=-24\n\tint32 COMMUNICATION_FAILURE=-25\n\tint32 CRASH=-29\n\tint32 ABORT=-30\n\tint32 NO_IK_SOLUTION=-31"
                }
            ]
        },
        {
            "name": "/controller_manager/configure_controller",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/controller_manager/configure_controller` service is used to configure a specific controller within the controller manager. It is typically used to set up controllers to ensure they are ready for operation.\n\nMobile Robot Module:\n   - This element relates to the control module of a mobile robot, specifically the controller management system.\n\nRelevance for Specific Tasks:\n   - This service is crucial for tasks that require dynamic reconfiguration of controllers, such as adapting to different operational modes or environments. It ensures that controllers are correctly configured before they are activated.\n\nUsage in the ROS2 System:\n   - It is suitable for tasks like initializing controllers during startup, switching between different control strategies, or reconfiguring controllers in response to changes in the robot's mission or environment.",
            "interfaces": [
                {
                    "name": "controller_manager_msgs/srv/ConfigureController",
                    "details": "# The ConfigureController service allows you to configure a single controller\n# inside controller_manager\n\n# To configure a controller, specify the \"name\" of the controller.\n# The return value \"ok\" indicates if the controller was successfully\n# configured or not.\n\nstring name\n---\nbool ok"
                }
            ]
        },
        {
            "name": "/controller_manager/list_controllers",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/controller_manager/list_controllers` service provides a list of controllers currently loaded in the controller manager, including their names, states, and types. It is typically used to monitor and manage the controllers within a robotic system.\n\nMobile Robot Module:\n   - This service relates to the control module of a mobile robot, specifically the controller management aspect.\n\nRelevance for Specific Tasks:\n   - This service is crucial for tasks involving the management and orchestration of multiple controllers, such as dynamically loading, unloading, or switching controllers based on the robot's operational needs.\n\nUsage in the ROS2 System:\n   - It is suitable for tasks like system diagnostics, controller lifecycle management, and ensuring the correct controllers are active for specific robot operations. It is often used by system administrators and automated scripts to maintain optimal control configurations.",
            "interfaces": [
                {
                    "name": "controller_manager_msgs/srv/ListControllers",
                    "details": "# The ListControllers service returns a list of controller names/states/types of the\n# controllers that are loaded inside the controller_manager.\n\n---\ncontroller_manager_msgs/ControllerState[] controller\n\tstring name        #\n\tstring state        #\n\tstring type        #\n\tstring[] claimed_interfaces        #\n\tstring[] required_command_interfaces        #\n\tstring[] required_state_interfaces        #\n\tbool is_chainable        #\n\tbool is_chained        #\n\tstring[] reference_interfaces        #\n\tChainConnection[] chain_connections        #\n\t\tstring name        #\n\t\tstring[] reference_interfaces        #"
                }
            ]
        },
        {
            "name": "/controller_manager/list_hardware_interfaces",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/controller_manager/list_hardware_interfaces` service is used to list all available hardware interfaces in a ROS2 system. It provides details about command and state interfaces, including their availability and claim status.\n   - It is typically used for managing and monitoring hardware interfaces in robotic systems.\n\nMobile Robot Module:\n   - This service relates to the hardware interface module of a mobile robot, which includes actuators and sensors.\n\nRelevance for Specific Tasks:\n   - This service is crucial for tasks involving the configuration and management of hardware interfaces, ensuring that the correct interfaces are available and properly claimed for control tasks.\n   - It plays a role in scenarios where dynamic reconfiguration or verification of hardware interfaces is required, such as during system initialization or when switching control modes.\n\nUsage in the ROS2 System:\n   - Suitable for tasks like initializing hardware components, verifying interface availability before executing control commands, and dynamically managing hardware resources in a ROS2-based robotic system.",
            "interfaces": [
                {
                    "name": "controller_manager_msgs/srv/ListHardwareInterfaces",
                    "details": "---\nHardwareInterface[] command_interfaces\n\tstring name\n\tbool is_available\n\tbool is_claimed\nHardwareInterface[] state_interfaces\n\tstring name\n\tbool is_available\n\tbool is_claimed"
                }
            ]
        },
        {
            "name": "/controller_manager/load_controller",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/controller_manager/load_controller` service is used to load a specific controller within the controller manager. It is typically used to dynamically add controllers to a running system, allowing for flexible control configurations.\n\nMobile Robot Module:\n   - This service relates to the control module of a mobile robot, specifically the controller management aspect.\n\nRelevance for Specific Tasks:\n   - This service is crucial for tasks that require dynamic control adjustments, such as switching between different control strategies or adding new control capabilities on-the-fly. It is particularly useful in scenarios where the robot's control needs to adapt to changing environments or tasks.\n\nUsage in the ROS2 System:\n   - It is suitable for tasks like initializing new controllers during runtime, managing multiple controllers, and ensuring that the robot can handle various control demands without restarting the system.",
            "interfaces": [
                {
                    "name": "controller_manager_msgs/srv/LoadController",
                    "details": "# The LoadController service allows you to load a single controller\n# inside controller_manager\n\n# To load a controller, specify the \"name\" of the controller.\n# The return value \"ok\" indicates if the controller was successfully\n# constructed and initialized or not.\n\nstring name\n---\nbool ok"
                }
            ]
        },
        {
            "name": "/controller_manager/reload_controller_libraries",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/controller_manager/reload_controller_libraries` service is used to reload all controller libraries available in the system as plugins. It ensures that the latest versions of controllers are used by reloading them, which can be forced by killing existing controllers if necessary.\n\nMobile Robot Module:\n   - This service relates to the control module of a mobile robot, specifically the controller management aspect.\n\nRelevance for Specific Tasks:\n   - This service is crucial for updating or changing the control strategies of a robot without restarting the entire system. It is particularly useful in scenarios where dynamic reconfiguration of controllers is needed, such as during development or when adapting to new tasks.\n\nUsage in the ROS2 System:\n   - It is suitable for tasks involving dynamic controller updates, such as testing new control algorithms or switching between different control modes in a live system.",
            "interfaces": [
                {
                    "name": "controller_manager_msgs/srv/ReloadControllerLibraries",
                    "details": "# The ReloadControllerLibraries service will reload all controllers that are available in\n# the system as plugins\n\n# Reloading libraries only works if there are no controllers loaded. If there\n# are still some controllers loaded, the reloading will fail.\n# If this bool is set to true, all loaded controllers will get\n# killed automatically, and the reloading can succeed.\nbool force_kill\n---\nbool ok"
                }
            ]
        },
        {
            "name": "/controller_manager/set_hardware_component_state",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/controller_manager/set_hardware_component_state` service is used to control the lifecycle of a hardware component in a ROS2 system. It allows transitioning the component between different states such as active, inactive, or finalized.\n\nMobile Robot Module:\n   - This service relates to the hardware interface module of a mobile robot, which includes components like sensors, actuators, and controllers.\n\nRelevance for Specific Tasks:\n   - This service is crucial for managing the operational states of hardware components, ensuring they are in the correct state for tasks such as navigation, manipulation, or data collection. It is particularly useful in scenarios where components need to be activated or deactivated based on the robot's current task or mission phase.\n\nUsage in the ROS2 System:\n   - It is suitable for tasks involving lifecycle management of hardware components, such as initializing sensors before data acquisition or shutting down actuators after completing a movement task. It is typically used by lifecycle management nodes and controller managers in ROS2 systems.",
            "interfaces": [
                {
                    "name": "controller_manager_msgs/srv/SetHardwareComponentState",
                    "details": "# The SetHardwareComponentState service allows to control life-cycle of a single hardware component.\n# Supported states are defined in the design document of LifecycleNodes available at:\n# https://design.ros2.org/articles/node_lifecycle.html\n# To control life-cycle of a hardware component, specify its \"name\" and \"target_state\".\n# Target state may be defined by \"id\" using a constant from `lifecycle_msgs/msg/State` or a label\n# using definitions from `hardware_interface/types/lifecycle_state_names.hpp` file.\n# The return value \"ok\" indicates if the component has successfully changed its state to \"target_state\".\n# The return value \"state\" returns current state of the hardware component.\n\nstring name\nlifecycle_msgs/State target_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label\n---\nbool ok\nlifecycle_msgs/State state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label"
                }
            ]
        },
        {
            "name": "/controller_manager/set_parameters",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/controller_manager/set_parameters` service allows for the dynamic configuration of parameters within the controller manager. It is typically used to adjust control parameters on-the-fly without restarting the system.\n\nMobile Robot Module:\n   - This service relates to the control module of a mobile robot, specifically the controller manager responsible for managing various controllers.\n\nRelevance for Specific Tasks:\n   - This service is crucial for tasks requiring real-time tuning of control parameters, such as adjusting PID gains for better performance or adapting to changing environmental conditions. It is used in scenarios where flexibility and adaptability of control settings are necessary.\n\nUsage in the ROS2 System:\n   - Suitable for tasks like dynamic reconfiguration of controllers during operation, enabling adaptive control strategies, and optimizing control performance in response to sensor feedback.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParameters",
                    "details": "# A list of parameters to set.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting each parameter succeeded or not and why.\nSetParametersResult[] results\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/controller_manager/set_parameters_atomically",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/controller_manager/set_parameters_atomically` service allows for the atomic setting of multiple parameters in a controller. It ensures that either all parameters are updated successfully or none are, maintaining system consistency.\n   - It is typically used for configuring or reconfiguring controller parameters in a safe and consistent manner.\n\nMobile Robot Module:\n   - This service relates to the control module of a mobile robot, specifically the controller management aspect.\n\nRelevance for Specific Tasks:\n   - This service is crucial for tasks that require dynamic reconfiguration of controller parameters without interrupting the control process. It is particularly useful in scenarios where parameter consistency is critical, such as during runtime adjustments or tuning of control algorithms.\n\nUsage in the ROS2 System:\n   - It is suitable for tasks involving dynamic parameter tuning, such as adjusting PID gains in a control loop or modifying sensor thresholds in real-time. It is commonly used by controller nodes and parameter management tools within the ROS2 ecosystem.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParametersAtomically",
                    "details": "# A list of parameters to set atomically.\n#\n# This call will either set all values, or none of the values.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting all of the parameters succeeded or not and why.\nSetParametersResult result\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/controller_manager/switch_controller",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/controller_manager/switch_controller` service allows for the dynamic activation and deactivation of controllers within a single timestep of the controller manager's control loop. It is typically used to manage which controllers are active at any given time, ensuring that the correct controllers are running for the current task.\n\nMobile Robot Module:\n    - This service relates to the control module of a mobile robot, specifically the controller management aspect.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks that require switching between different control strategies or modes, such as transitioning from navigation to manipulation. It ensures that only the necessary controllers are active, optimizing resource usage and system performance.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks involving dynamic control reconfiguration, such as switching from a position controller to a velocity controller in response to changing operational conditions or mission requirements.",
            "interfaces": [
                {
                    "name": "controller_manager_msgs/srv/SwitchController",
                    "details": "# The SwitchController service allows you deactivate a number of controllers\n# and activate a number of controllers, all in one single timestep of the\n# controller manager's control loop.\n\n# To switch controllers, specify\n#  * the list of controller names to activate,\n#  * the list of controller names to deactivate, and\n#  * the strictness (BEST_EFFORT or STRICT)\n#    * STRICT means that switching will fail if anything goes wrong (an invalid\n#      controller name, a controller that failed to activate, etc. )\n#    * BEST_EFFORT means that even when something goes wrong with on controller,\n#      the service will still try to activate/stop the remaining controllers\n#  * activate the controllers as soon as their hardware dependencies are ready, will\n#    wait for all interfaces to be ready otherwise\n#  * the timeout before aborting pending controllers. Zero for infinite\n\n# The return value \"ok\" indicates if the controllers were switched\n# successfully or not.  The meaning of success depends on the\n# specified strictness.\n\n\nstring[] activate_controllers\nstring[] deactivate_controllers\nstring[] start_controllers       # DEPRECATED: Use activate_controllers filed instead\nstring[] stop_controllers        # DEPRECATED: Use deactivate_controllers filed instead\nint32 strictness\nint32 BEST_EFFORT=1\nint32 STRICT=2\nbool start_asap                 # DEPRECATED: Use activate_asap filed instead\nbool activate_asap\nbuiltin_interfaces/Duration timeout\n\tint32 sec\n\tuint32 nanosec\n---\nbool ok"
                }
            ]
        },
        {
            "name": "/controller_manager/unload_controller",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/controller_manager/unload_controller` service is used to unload a specific controller from the controller manager. It is typically used to manage the lifecycle of controllers by removing them when they are no longer needed.\n\nMobile Robot Module:\n   - This service relates to the control module of a mobile robot, specifically the controller management aspect.\n\nRelevance for Specific Tasks:\n   - This service is relevant for tasks involving dynamic reconfiguration of control strategies, such as switching between different control modes or removing faulty controllers. It is crucial in scenarios where resource management and system flexibility are required.\n\nUsage in the ROS2 System:\n   - Suitable for tasks like dynamically adjusting control strategies during runtime, managing resources in multi-controller systems, and ensuring system stability by unloading unnecessary or malfunctioning controllers.",
            "interfaces": [
                {
                    "name": "controller_manager_msgs/srv/UnloadController",
                    "details": "# The UnloadController service allows you to unload a single controller\n# from controller_manager\n\n# To unload a controller, specify the \"name\" of the controller.\n# The return value \"ok\" indicates if the controller was successfully\n# unloaded or not\n\nstring name\n---\nbool ok"
                }
            ]
        },
        {
            "name": "/controller_server/change_state",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/controller_server/change_state` service is used to manage the lifecycle states of a controller server in a ROS2 system. It allows for transitions between different states such as configuring, activating, deactivating, and shutting down the controller.\n\nMobile Robot Module:\n    - This element relates to the control module of a mobile robot, specifically the lifecycle management of controllers that handle robot operations.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks that require dynamic reconfiguration or state management of robot controllers, such as switching between different operational modes or safely shutting down the system.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks involving lifecycle management of controllers, such as initializing a robot's control system, transitioning to an active state for operation, or handling errors by transitioning to a safe state.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/ChangeState",
                    "details": "# The requested transition.\n#\n# This change state service will fail if the transition is not possible.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n---\n\n# Indicates whether the service was able to initiate the state transition\nbool success"
                }
            ]
        },
        {
            "name": "/controller_server/get_available_transitions",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/controller_server/get_available_transitions` service provides information about the possible state transitions for a lifecycle node. It is typically used to query the current state and potential transitions of a node, which is crucial for managing the node's lifecycle.\n\nMobile Robot Module:\n    - This service relates to the control module of a mobile robot, specifically in managing the lifecycle of control nodes.\n\nRelevance for Specific Tasks:\n    - This service is essential for tasks that require dynamic reconfiguration or state management of control nodes, such as activating or deactivating controllers based on operational needs or system conditions. It plays a role in scenarios where the robot's control system needs to adapt to different operational states.\n\nUsage in the ROS2 System:\n    - It is suitable for ROS2 tasks involving lifecycle management, such as transitioning a node from an inactive to an active state or handling error states in a controlled manner. It is commonly used by lifecycle management tools and control systems that need to ensure nodes are in the correct state for operation.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/GetAvailableTransitions",
                    "details": "---\n# An array of the possible start_state-goal_state transitions\nTransitionDescription[] available_transitions\n\tTransition transition\n\t\tuint8 TRANSITION_CREATE = 0\n\t\tuint8 TRANSITION_CONFIGURE = 1\n\t\tuint8 TRANSITION_CLEANUP = 2\n\t\tuint8 TRANSITION_ACTIVATE = 3\n\t\tuint8 TRANSITION_DEACTIVATE = 4\n\t\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\t\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\t\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\t\tuint8 TRANSITION_DESTROY = 8\n\t\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\t\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\t\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\t\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\t\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\t\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\t\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\t\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\t\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\t\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\t\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\t\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\t\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\t\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\t\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\t\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\t\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\t\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\t\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\t\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\t\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t\t##\n\t\t##\n\t\tuint8 id\n\t\tstring label\n\tState start_state\n\t\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\t\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\t\tuint8 PRIMARY_STATE_INACTIVE = 2\n\t\tuint8 PRIMARY_STATE_ACTIVE = 3\n\t\tuint8 PRIMARY_STATE_FINALIZED = 4\n\t\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\t\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\t\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\t\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\t\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\t\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\t\tuint8 id\n\t\tstring label\n\tState goal_state\n\t\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\t\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\t\tuint8 PRIMARY_STATE_INACTIVE = 2\n\t\tuint8 PRIMARY_STATE_ACTIVE = 3\n\t\tuint8 PRIMARY_STATE_FINALIZED = 4\n\t\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\t\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\t\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\t\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\t\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\t\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\t\tuint8 id\n\t\tstring label"
                }
            ]
        },
        {
            "name": "/controller_server/get_transition_graph",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/controller_server/get_transition_graph` service provides information about the possible state transitions of a lifecycle node. It is typically used to query the available transitions between different states of a node, such as configuring, activating, or shutting down.\n\nMobile Robot Module:\n    - This ROS2 element relates to the control module of a mobile robot, specifically the lifecycle management of controllers.\n\nRelevance for Specific Tasks:\n    - This service is crucial for managing the lifecycle of nodes, ensuring that controllers are in the correct state for operation. It is used in scenarios where the state of a controller needs to be monitored or changed, such as during startup, shutdown, or error recovery processes.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks involving lifecycle management of nodes, such as ensuring that a controller is properly configured and activated before use, or safely deactivated and cleaned up when no longer needed.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/GetAvailableTransitions",
                    "details": "---\n# An array of the possible start_state-goal_state transitions\nTransitionDescription[] available_transitions\n\tTransition transition\n\t\tuint8 TRANSITION_CREATE = 0\n\t\tuint8 TRANSITION_CONFIGURE = 1\n\t\tuint8 TRANSITION_CLEANUP = 2\n\t\tuint8 TRANSITION_ACTIVATE = 3\n\t\tuint8 TRANSITION_DEACTIVATE = 4\n\t\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\t\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\t\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\t\tuint8 TRANSITION_DESTROY = 8\n\t\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\t\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\t\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\t\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\t\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\t\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\t\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\t\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\t\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\t\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\t\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\t\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\t\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\t\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\t\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\t\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\t\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\t\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\t\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\t\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\t\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t\t##\n\t\t##\n\t\tuint8 id\n\t\tstring label\n\tState start_state\n\t\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\t\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\t\tuint8 PRIMARY_STATE_INACTIVE = 2\n\t\tuint8 PRIMARY_STATE_ACTIVE = 3\n\t\tuint8 PRIMARY_STATE_FINALIZED = 4\n\t\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\t\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\t\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\t\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\t\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\t\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\t\tuint8 id\n\t\tstring label\n\tState goal_state\n\t\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\t\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\t\tuint8 PRIMARY_STATE_INACTIVE = 2\n\t\tuint8 PRIMARY_STATE_ACTIVE = 3\n\t\tuint8 PRIMARY_STATE_FINALIZED = 4\n\t\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\t\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\t\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\t\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\t\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\t\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\t\tuint8 id\n\t\tstring label"
                }
            ]
        },
        {
            "name": "/controller_server/set_parameters",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/controller_server/set_parameters` service allows for the dynamic configuration of parameters within a controller server. It is typically used to adjust control parameters on-the-fly without restarting the system.\n\nMobile Robot Module:\n    - This service relates to the control module of a mobile robot, specifically the controller server responsible for executing control algorithms.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks requiring real-time tuning of control parameters, such as adjusting PID gains or other control settings to optimize performance. It is particularly useful in scenarios where environmental conditions change, necessitating parameter adjustments.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving dynamic reconfiguration of control settings, such as during testing phases or adaptive control systems. It is commonly used by nodes that need to modify control parameters based on sensor feedback or user input.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParameters",
                    "details": "# A list of parameters to set.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting each parameter succeeded or not and why.\nSetParametersResult[] results\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/controller_server/set_parameters_atomically",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/controller_server/set_parameters_atomically` service allows for the atomic setting of multiple parameters in a ROS2 system. This means that all specified parameters are set at once, or none are set if any fail, ensuring consistency.\n    - It is typically used for updating configuration parameters of controllers in a safe and consistent manner.\n\nMobile Robot Module:\n    - This service relates to the control module of a mobile robot, specifically the controller server responsible for managing control parameters.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks that require dynamic reconfiguration of control parameters without interrupting the control process. It ensures that parameter updates do not lead to inconsistent states.\n    - Typical scenarios include tuning control parameters during runtime or adapting to changing environmental conditions.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks such as updating PID controller gains, adjusting sensor thresholds, or modifying navigation parameters in a mobile robot's control system.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParametersAtomically",
                    "details": "# A list of parameters to set atomically.\n#\n# This call will either set all values, or none of the values.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting all of the parameters succeeded or not and why.\nSetParametersResult result\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/get_planner_params",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/get_planner_params` service is used to retrieve the parameters of a motion planning pipeline in a ROS2 system. It is typically used to obtain configuration details for motion planning algorithms.\n\nMobile Robot Module:\n   - This service relates to the Motion Planning module of a mobile robot, particularly in systems using the MoveIt framework for robotic arm or mobile base planning.\n\nRelevance for Specific Tasks:\n   - This service is crucial for tasks involving dynamic path planning and optimization, allowing users to adjust and retrieve planner configurations for efficient navigation and manipulation.\n\nUsage in the ROS2 System:\n   - It is suitable for tasks such as configuring and tuning motion planners in robotic applications, ensuring that the robot can plan paths effectively in dynamic environments.",
            "interfaces": [
                {
                    "name": "moveit_msgs/srv/GetPlannerParams",
                    "details": "# Name of the planning pipeline, uses default if empty\nstring pipeline_id\n\n# Name of planning config\nstring planner_config\n\n# Optional name of planning group (return global defaults if empty)\nstring group\n\n---\n\n# parameters as key-value pairs\nPlannerParams params\n\tstring[] keys\n\tstring[] values\n\tstring[] descriptions"
                }
            ]
        },
        {
            "name": "/get_planning_scene",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/get_planning_scene` service is used to retrieve specific components of the planning scene in a robotic system. It provides detailed information about the robot's environment and state, which is crucial for planning and executing tasks.\n\nMobile Robot Module:\n    - This service relates to the Planning and Perception modules of a mobile robot, as it provides necessary data for understanding the robot's surroundings and current state.\n\nRelevance for Specific Tasks:\n    - This service is essential for tasks involving motion planning, collision avoidance, and environment interaction. It is typically used in scenarios where a robot needs to navigate complex environments or manipulate objects safely.\n\nUsage in the ROS2 System:\n    - It is suitable for use in ROS2 tasks such as path planning, obstacle detection, and dynamic environment mapping, often utilized by nodes that require up-to-date planning scene information to make informed decisions.",
            "interfaces": [
                {
                    "name": "moveit_msgs/srv/GetPlanningScene",
                    "details": "# Get parts of the planning scene that are of interest\n# All scene components are returned if none are specified\nPlanningSceneComponents components\n\tuint32 SCENE_SETTINGS=1\n\tuint32 ROBOT_STATE=2\n\tuint32 ROBOT_STATE_ATTACHED_OBJECTS=4\n\tuint32 WORLD_OBJECT_NAMES=8\n\tuint32 WORLD_OBJECT_GEOMETRY=16\n\tuint32 OCTOMAP=32\n\tuint32 TRANSFORMS=64\n\tuint32 ALLOWED_COLLISION_MATRIX=128\n\tuint32 LINK_PADDING_AND_SCALING=256\n\tuint32 OBJECT_COLORS=512\n\tuint32 components\n---\nPlanningScene scene\n\tstring name\n\tRobotState robot_state\n\t\tsensor_msgs/JointState joint_state\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] name\n\t\t\tfloat64[] position\n\t\t\tfloat64[] velocity\n\t\t\tfloat64[] effort\n\t\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tgeometry_msgs/Transform[] transforms\n\t\t\t\tVector3 translation\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion rotation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tgeometry_msgs/Twist[] twist\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Wrench[] wrench\n\t\t\t\tVector3  force\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  torque\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\tAttachedCollisionObject[] attached_collision_objects\n\t\t\tstring link_name\n\t\t\tCollisionObject object\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tgeometry_msgs/Pose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring id\n\t\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\t\tstring key\n\t\t\t\t\tstring db\n\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\tuint8 type\n\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\tfloat32 z\n\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t\t#\n\t\t\t\t\tfloat64[4] coef\n\t\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring[] subframe_names\n\t\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tbyte ADD=0\n\t\t\t\tbyte REMOVE=1\n\t\t\t\tbyte APPEND=2\n\t\t\t\tbyte MOVE=3\n\t\t\t\tbyte operation\n\t\t\tstring[] touch_links\n\t\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tstring[] joint_names\n\t\t\t\tJointTrajectoryPoint[] points\n\t\t\t\t\tfloat64[] positions\n\t\t\t\t\tfloat64[] velocities\n\t\t\t\t\tfloat64[] accelerations\n\t\t\t\t\tfloat64[] effort\n\t\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\tfloat64 weight\n\t\tbool is_diff\n\tstring robot_model_name\n\tgeometry_msgs/TransformStamped[] fixed_frame_transforms\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring child_frame_id\n\t\tTransform transform\n\t\t\tVector3 translation\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion rotation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\tAllowedCollisionMatrix allowed_collision_matrix\n\t\tstring[] entry_names\n\t\tAllowedCollisionEntry[] entry_values\n\t\t\tbool[] enabled\n\t\tstring[] default_entry_names\n\t\tbool[] default_entry_values\n\tLinkPadding[] link_padding\n\t\tstring link_name\n\t\tfloat64 padding\n\tLinkScale[] link_scale\n\t\tstring link_name\n\t\tfloat64 scale\n\tObjectColor[] object_colors\n\t\tstring id\n\t\tstd_msgs/ColorRGBA color\n\t\t\tfloat32 r\n\t\t\tfloat32 g\n\t\t\tfloat32 b\n\t\t\tfloat32 a\n\tPlanningSceneWorld world\n\t\tCollisionObject[] collision_objects\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Pose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring id\n\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\tstring key\n\t\t\t\tstring db\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t#\n\t\t\t\tfloat64[4] coef\n\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring[] subframe_names\n\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tbyte ADD=0\n\t\t\tbyte REMOVE=1\n\t\t\tbyte APPEND=2\n\t\t\tbyte MOVE=3\n\t\t\tbyte operation\n\t\toctomap_msgs/OctomapWithPose octomap\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Pose origin\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\toctomap_msgs/Octomap octomap\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tbool binary\n\t\t\t\tstring id\n\t\t\t\tfloat64 resolution\n\t\t\t\tint8[] data\n\tbool is_diff"
                }
            ]
        },
        {
            "name": "/global_costmap/clear_around_global_costmap",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/global_costmap/clear_around_global_costmap` service is used to clear the costmap around the robot within a specified distance. It is typically used to remove obstacles or outdated information from the costmap to ensure accurate navigation.\n\nMobile Robot Module:\n   - This service relates to the navigation module of a mobile robot, specifically the costmap management component.\n\nRelevance for Specific Tasks:\n   - This service is crucial for maintaining an up-to-date costmap, which is essential for path planning and obstacle avoidance. It is particularly useful in dynamic environments where obstacles may frequently change or move.\n\nUsage in the ROS2 System:\n   - It is suitable for tasks involving dynamic path planning and real-time navigation adjustments. Typical entities that use this service include navigation nodes and planners that require a clear and current view of the robot's surroundings.",
            "interfaces": [
                {
                    "name": "nav2_msgs/srv/ClearCostmapAroundRobot",
                    "details": "# Clears the costmap within a distance\n\nfloat32 reset_distance\n---\nstd_msgs/Empty response"
                }
            ]
        },
        {
            "name": "/global_costmap/clear_entirely_global_costmap",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The \"/global_costmap/clear_entirely_global_costmap\" service is used to clear all layers of the global costmap. It is typically used to reset the costmap, removing all obstacles and other data, which can be useful in dynamic environments where the map needs to be refreshed.\n\nMobile Robot Module:\n    - This service relates to the navigation module of a mobile robot, specifically the costmap component used for path planning and obstacle avoidance.\n\nRelevance for Specific Tasks:\n    - This service is relevant for tasks that require a fresh start in navigation, such as when the environment has changed significantly, and the robot needs to re-evaluate its surroundings. It is crucial in scenarios where outdated costmap data could lead to navigation errors.\n\nUsage in the ROS2 System:\n    - It is suitable for use in navigation tasks where the robot needs to clear its understanding of the environment, such as after a significant environmental change or when initializing the navigation stack. It interacts with navigation nodes that manage the costmap, like the Nav2 stack.",
            "interfaces": [
                {
                    "name": "nav2_msgs/srv/ClearEntireCostmap",
                    "details": "# Clears all layers on the costmap\n\nstd_msgs/Empty request\n---\nstd_msgs/Empty response"
                }
            ]
        },
        {
            "name": "/global_costmap/clear_except_global_costmap",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/global_costmap/clear_except_global_costmap` service is used to clear the global costmap of a mobile robot, except for a specified rectangular region. It is typically used to maintain a clear path for navigation while preserving important areas of the costmap.\n\nMobile Robot Module:\n   - This service relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n   - This service is useful for tasks that require dynamic path planning and obstacle avoidance, ensuring that the robot can navigate efficiently without losing critical environmental information. It is particularly relevant in scenarios where the environment changes frequently, and the robot needs to adapt its path accordingly.\n\nUsage in the ROS2 System:\n   - It is suitable for tasks such as autonomous navigation in dynamic environments, where the robot must frequently update its path while maintaining awareness of certain areas. Typical ROS2 entities that interact with this service include navigation planners and costmap managers.",
            "interfaces": [
                {
                    "name": "nav2_msgs/srv/ClearCostmapExceptRegion",
                    "details": "# Clears the costmap except a rectangular region specified by reset_distance\n\nfloat32 reset_distance\n---\nstd_msgs/Empty response"
                }
            ]
        },
        {
            "name": "/global_costmap/get_costmap",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/global_costmap/get_costmap` service provides access to the global costmap, which is a representation of the environment used for navigation planning. It is typically used to retrieve the current state of the costmap, including metadata and occupancy data.\n\nMobile Robot Module:\n    - This ROS2 element relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks involving path planning and obstacle avoidance, as it allows the robot to understand the layout of its environment and make informed decisions about movement. It is particularly relevant in scenarios where dynamic updates to the environment need to be considered.\n\nUsage in the ROS2 System:\n    - It is suitable for use in navigation stacks, such as Nav2, where it can be called by planners or controllers to obtain the latest costmap data for decision-making processes.",
            "interfaces": [
                {
                    "name": "nav2_msgs/srv/GetCostmap",
                    "details": "# Get the costmap\n\n# Specifications for the requested costmap\nnav2_msgs/CostmapMetaData specs\n\tbuiltin_interfaces/Time map_load_time\n\t\tint32 sec\n\t\tuint32 nanosec\n\tbuiltin_interfaces/Time update_time\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring layer\n\tfloat32 resolution\n\tuint32 size_x\n\tuint32 size_y\n\tgeometry_msgs/Pose origin\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n---\nnav2_msgs/Costmap map\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tCostmapMetaData metadata\n\t\tbuiltin_interfaces/Time map_load_time\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tbuiltin_interfaces/Time update_time\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring layer\n\t\tfloat32 resolution\n\t\tuint32 size_x\n\t\tuint32 size_y\n\t\tgeometry_msgs/Pose origin\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\tuint8[] data"
                }
            ]
        },
        {
            "name": "/global_costmap/global_costmap/change_state",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/global_costmap/global_costmap/change_state` service is used to manage the lifecycle states of the global costmap in a ROS2 navigation stack. It allows transitions between different states such as configuring, activating, and deactivating the costmap.\n\nMobile Robot Module:\n    - This element relates to the navigation module of a mobile robot, specifically the global costmap component.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks that require dynamic reconfiguration of the navigation stack, such as adapting to new environments or recovering from errors. It ensures that the costmap is in the correct state for processing sensor data and planning paths.\n\nUsage in the ROS2 System:\n    - It is typically used in scenarios where the navigation stack needs to be started, stopped, or reconfigured, such as during initialization, shutdown, or error recovery processes.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/ChangeState",
                    "details": "# The requested transition.\n#\n# This change state service will fail if the transition is not possible.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n---\n\n# Indicates whether the service was able to initiate the state transition\nbool success"
                }
            ]
        },
        {
            "name": "/global_costmap/global_costmap/set_parameters",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/global_costmap/global_costmap/set_parameters` service allows for dynamic configuration of parameters within the global costmap. It is typically used to adjust parameters that influence path planning and obstacle avoidance in real-time.\n\nMobile Robot Module:\n    - This service relates to the navigation module of a mobile robot, specifically the global costmap component.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks involving dynamic path planning and navigation, where real-time adjustments to the costmap parameters can optimize the robot's path and improve obstacle avoidance. It is particularly useful in environments that change frequently or are not fully known beforehand.\n\nUsage in the ROS2 System:\n    - Suitable for use in navigation stacks, such as Nav2, where it can be used to fine-tune the robot's navigation behavior by adjusting parameters like inflation radius, cost scaling factors, and obstacle layer settings.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParameters",
                    "details": "# A list of parameters to set.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting each parameter succeeded or not and why.\nSetParametersResult[] results\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/global_costmap/global_costmap/set_parameters_atomically",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/global_costmap/global_costmap/set_parameters_atomically` service allows for the atomic setting of multiple parameters in the global costmap. This ensures that either all parameters are updated successfully or none are, maintaining consistency.\n    - It is typically used for dynamically adjusting costmap parameters in response to changing environmental conditions or operational requirements.\n\nMobile Robot Module:\n    - This service relates to the navigation module of a mobile robot, specifically the global costmap used in path planning and obstacle avoidance.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks that require real-time adaptation of navigation strategies, such as adjusting obstacle inflation or resolution parameters to optimize path planning.\n    - It plays a role in scenarios where environmental conditions change, requiring the robot to update its navigation parameters without interruption.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving dynamic reconfiguration of navigation parameters, such as during autonomous exploration or when integrating new sensor data that affects the costmap.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParametersAtomically",
                    "details": "# A list of parameters to set atomically.\n#\n# This call will either set all values, or none of the values.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting all of the parameters succeeded or not and why.\nSetParametersResult result\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/is_path_valid",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/is_path_valid` service checks if a given path is still valid for navigation. It is typically used to ensure that a robot's planned path remains feasible and free of obstacles or changes in the environment.\n\nMobile Robot Module:\n   - This service relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n   - It helps in verifying the validity of a navigation path, ensuring that the robot can safely follow the path without encountering unexpected obstacles. It is crucial in dynamic environments where conditions may change after the path is initially planned.\n\nUsage in the ROS2 System:\n   - This service is suitable for tasks involving dynamic path planning and real-time navigation adjustments. It is commonly used in conjunction with path planners and navigation controllers to maintain safe and efficient robot movement.",
            "interfaces": [
                {
                    "name": "nav2_msgs/srv/IsPathValid",
                    "details": "#Determine if the current path is still valid\n\nnav_msgs/Path path\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tgeometry_msgs/PoseStamped[] poses\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tPose pose\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n---\nbool is_valid\nint32[] invalid_pose_indices"
                }
            ]
        },
        {
            "name": "/joint_trajectory_controller/query_state",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/joint_trajectory_controller/query_state` service allows querying the state of a joint trajectory at a specific time. It is typically used to obtain the position, velocity, and acceleration of joints in a robotic system.\n\nMobile Robot Module:\n   - This service relates to the Actuation and Motion Planning modules of a mobile robot, specifically those involving joint control.\n\nRelevance for Specific Tasks:\n   - This service is crucial for tasks requiring precise control and monitoring of joint states, such as trajectory tracking and motion verification. It helps ensure that the robot's joints are following the desired trajectory accurately.\n\nUsage in the ROS2 System:\n   - It is suitable for use in tasks like real-time monitoring of joint states during motion execution, debugging trajectory execution issues, and validating control algorithms in simulation or real-world scenarios.",
            "interfaces": [
                {
                    "name": "control_msgs/srv/QueryTrajectoryState",
                    "details": "builtin_interfaces/Time time\n\tint32 sec\n\tuint32 nanosec\n---\nbool success   # indicate successful run of triggered service\nstring message # informational, e.g. for error messages\n\nstring[] name\nfloat64[] position\nfloat64[] velocity\nfloat64[] acceleration"
                }
            ]
        },
        {
            "name": "/joint_trajectory_controller/set_parameters",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/joint_trajectory_controller/set_parameters` service allows for the dynamic configuration of parameters for the joint trajectory controller. It is typically used to adjust control parameters such as gains or limits during runtime without restarting the system.\n\nMobile Robot Module:\n    - This ROS2 element relates to the actuation module of a mobile robot, specifically the joint control mechanisms.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks requiring real-time tuning of control parameters to optimize performance or adapt to changing conditions. It is often used in scenarios where precise joint movements are necessary, such as robotic arms or mobile bases with articulated joints.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving dynamic parameter tuning in joint trajectory control, such as adjusting PID gains or setting velocity limits in response to sensor feedback or environmental changes.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParameters",
                    "details": "# A list of parameters to set.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting each parameter succeeded or not and why.\nSetParametersResult[] results\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/joint_trajectory_controller/set_parameters_atomically",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/joint_trajectory_controller/set_parameters_atomically` service allows for the atomic setting of multiple parameters in a joint trajectory controller. This ensures that either all parameters are updated successfully or none are, maintaining system consistency.\n    - It is typically used for configuring or reconfiguring controller parameters in a synchronized manner.\n\nMobile Robot Module:\n    - This service relates to the control module of a mobile robot, specifically the joint trajectory controller responsible for executing movement commands.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks requiring precise control adjustments, such as tuning controller parameters for optimal performance or adapting to new operational conditions.\n    - It plays a role in scenarios where parameter consistency is critical, such as during dynamic reconfiguration or when deploying new control strategies.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving dynamic parameter tuning, system calibration, and ensuring consistent controller behavior during runtime adjustments.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParametersAtomically",
                    "details": "# A list of parameters to set atomically.\n#\n# This call will either set all values, or none of the values.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting all of the parameters succeeded or not and why.\nSetParametersResult result\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/lidar_2_sensor_plugin/set_parameters_atomically",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/lidar_2_sensor_plugin/set_parameters_atomically` service allows for the atomic setting of multiple parameters for a LiDAR sensor plugin. It ensures that either all parameters are updated successfully or none are, maintaining system consistency.\n    - It is typically used for configuring sensor parameters in a controlled manner.\n\nMobile Robot Module:\n    - This ROS2 element relates to the LiDAR sensor module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks requiring precise sensor configuration, such as adjusting LiDAR settings for different environments or operational modes.\n    - It plays a role in scenarios where dynamic reconfiguration of sensor parameters is needed without interrupting ongoing operations.\n\nUsage in the ROS2 System:\n    - Suitable for tasks like sensor calibration, environment-specific tuning, and runtime parameter adjustments in autonomous navigation systems.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParametersAtomically",
                    "details": "# A list of parameters to set atomically.\n#\n# This call will either set all values, or none of the values.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting all of the parameters succeeded or not and why.\nSetParametersResult result\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/lifecycle_manager_localization/manage_nodes",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/lifecycle_manager_localization/manage_nodes` service is responsible for managing the lifecycle states of nodes related to localization. It allows for starting, pausing, resuming, resetting, and shutting down nodes.\n    - It is typically used to control the operational state of localization nodes in a mobile robot system.\n\nMobile Robot Module:\n    - This ROS2 element relates to the Localization module of a Mobile Robot.\n\nRelevance for Specific Tasks:\n    - This service can be used to ensure that localization nodes are in the correct state for various operational phases, such as initialization, normal operation, or shutdown.\n    - Typical scenarios include starting up localization nodes when the robot is powered on, pausing them during maintenance, or resetting them in case of errors.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks such as lifecycle management of localization nodes, ensuring that they are correctly initialized and operational during navigation tasks.",
            "interfaces": [
                {
                    "name": "nav2_msgs/srv/ManageLifecycleNodes",
                    "details": "uint8 STARTUP = 0\nuint8 PAUSE = 1\nuint8 RESUME = 2\nuint8 RESET = 3\nuint8 SHUTDOWN = 4\n\nuint8 command\n---\nbool success"
                }
            ]
        },
        {
            "name": "/lifecycle_manager_navigation/manage_nodes",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/lifecycle_manager_navigation/manage_nodes` service is used to manage the lifecycle states of nodes within the navigation stack. It allows for starting, pausing, resuming, resetting, and shutting down nodes, ensuring that the navigation system operates smoothly and efficiently.\n\nMobile Robot Module:\n    - This service relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks that require dynamic control over the navigation stack, such as initializing the system, handling temporary interruptions, or safely shutting down the navigation components. It ensures that the navigation nodes are in the correct state for operation.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks like automated startup sequences, handling emergency stops, or resetting the navigation system after a fault. It is typically used by lifecycle managers or control nodes that oversee the state transitions of navigation-related nodes.",
            "interfaces": [
                {
                    "name": "nav2_msgs/srv/ManageLifecycleNodes",
                    "details": "uint8 STARTUP = 0\nuint8 PAUSE = 1\nuint8 RESUME = 2\nuint8 RESET = 3\nuint8 SHUTDOWN = 4\n\nuint8 command\n---\nbool success"
                }
            ]
        },
        {
            "name": "/local_costmap/clear_around_local_costmap",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/local_costmap/clear_around_local_costmap` service is used to clear the local costmap around the robot within a specified distance. It is typically used to remove obstacles or outdated information from the costmap to ensure accurate navigation and path planning.\n\nMobile Robot Module:\n   - This service relates to the Navigation module of the Mobile Robot.\n\nRelevance for Specific Tasks:\n   - This ROS2 element is crucial for maintaining an up-to-date representation of the robot's immediate environment, which is essential for collision avoidance and efficient path planning. It is particularly useful in dynamic environments where obstacles may frequently change.\n\nUsage in the ROS2 System:\n   - It is suitable for tasks such as autonomous navigation and obstacle avoidance, where the robot needs to adapt to changes in its surroundings. Typical ROS2 entities that interact with this service include navigation planners and obstacle detection nodes.",
            "interfaces": [
                {
                    "name": "nav2_msgs/srv/ClearCostmapAroundRobot",
                    "details": "# Clears the costmap within a distance\n\nfloat32 reset_distance\n---\nstd_msgs/Empty response"
                }
            ]
        },
        {
            "name": "/local_costmap/clear_entirely_local_costmap",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/local_costmap/clear_entirely_local_costmap` service is used to clear all layers of the local costmap. It is typically used to reset the costmap, removing any obstacles or data that may have been accumulated.\n\nMobile Robot Module:\n    - This service relates to the navigation module of a mobile robot, specifically the local costmap component.\n\nRelevance for Specific Tasks:\n    - This service is useful for resolving issues where the costmap may have outdated or incorrect data, such as after a dynamic obstacle has moved. It is typically used in scenarios where the robot's environment has changed significantly, and a fresh costmap is needed to ensure accurate navigation.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks involving dynamic environments where the robot needs to frequently update its understanding of the surroundings, such as in warehouse automation or search and rescue operations.",
            "interfaces": [
                {
                    "name": "nav2_msgs/srv/ClearEntireCostmap",
                    "details": "# Clears all layers on the costmap\n\nstd_msgs/Empty request\n---\nstd_msgs/Empty response"
                }
            ]
        },
        {
            "name": "/local_costmap/clear_except_local_costmap",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/local_costmap/clear_except_local_costmap` service is used to clear the local costmap of a mobile robot, except for a specified rectangular region. It is typically used to maintain a clear path for navigation while preserving important obstacle information within a defined area.\n\nMobile Robot Module:\n   - This service relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n   - This service is useful for tasks that require dynamic path planning and obstacle avoidance, ensuring that the robot can navigate efficiently without losing critical environmental data. It is particularly relevant in scenarios where the robot needs to adapt to changing environments while maintaining a safe path.\n\nUsage in the ROS2 System:\n   - It is suitable for tasks such as autonomous navigation and exploration, where maintaining an updated and accurate costmap is crucial for the robot's decision-making processes.",
            "interfaces": [
                {
                    "name": "nav2_msgs/srv/ClearCostmapExceptRegion",
                    "details": "# Clears the costmap except a rectangular region specified by reset_distance\n\nfloat32 reset_distance\n---\nstd_msgs/Empty response"
                }
            ]
        },
        {
            "name": "/local_costmap/get_costmap",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/local_costmap/get_costmap` service provides access to the local costmap, which is a grid representation of the environment around the robot. It is typically used to obtain the current state of the costmap for navigation and path planning purposes.\n\nMobile Robot Module:\n    - This ROS2 element relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks involving obstacle avoidance and path planning, as it allows the robot to understand its immediate surroundings and make informed decisions about movement. It is particularly relevant in dynamic environments where the costmap needs frequent updates.\n\nUsage in the ROS2 System:\n    - It is suitable for use in navigation stacks, such as Nav2, where it interacts with planners and controllers to facilitate real-time navigation and obstacle avoidance.",
            "interfaces": [
                {
                    "name": "nav2_msgs/srv/GetCostmap",
                    "details": "# Get the costmap\n\n# Specifications for the requested costmap\nnav2_msgs/CostmapMetaData specs\n\tbuiltin_interfaces/Time map_load_time\n\t\tint32 sec\n\t\tuint32 nanosec\n\tbuiltin_interfaces/Time update_time\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring layer\n\tfloat32 resolution\n\tuint32 size_x\n\tuint32 size_y\n\tgeometry_msgs/Pose origin\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n---\nnav2_msgs/Costmap map\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tCostmapMetaData metadata\n\t\tbuiltin_interfaces/Time map_load_time\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tbuiltin_interfaces/Time update_time\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring layer\n\t\tfloat32 resolution\n\t\tuint32 size_x\n\t\tuint32 size_y\n\t\tgeometry_msgs/Pose origin\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\tuint8[] data"
                }
            ]
        },
        {
            "name": "/local_costmap/local_costmap/change_state",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/local_costmap/local_costmap/change_state` service is used to manage the lifecycle states of the local costmap in a ROS2 system. It allows transitions between different states such as configuring, activating, deactivating, and shutting down the costmap.\n\nMobile Robot Module:\n    - This element relates to the Navigation module of a mobile robot, specifically the local costmap component.\n\nRelevance for Specific Tasks:\n    - This service is crucial for dynamically managing the state of the local costmap, which is essential for tasks like path planning and obstacle avoidance. It ensures that the costmap is in the correct state for the robot's current operational needs.\n\nUsage in the ROS2 System:\n    - It is typically used in scenarios where the robot's navigation stack needs to be reconfigured or reset, such as during startup, shutdown, or when recovering from errors. It interacts with lifecycle management nodes and navigation planners.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/ChangeState",
                    "details": "# The requested transition.\n#\n# This change state service will fail if the transition is not possible.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n---\n\n# Indicates whether the service was able to initiate the state transition\nbool success"
                }
            ]
        },
        {
            "name": "/local_costmap/local_costmap/set_parameters",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/local_costmap/local_costmap/set_parameters` service allows dynamic configuration of parameters for the local costmap, which is crucial for path planning and obstacle avoidance in mobile robots. It is typically used to adjust parameters that influence the robot's navigation behavior in real-time.\n\nMobile Robot Module:\n    - This ROS2 element relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - This service is essential for tasks involving dynamic path planning and obstacle avoidance, as it allows for real-time adjustments to the costmap parameters based on changing environmental conditions or mission requirements.\n\nUsage in the ROS2 System:\n    - It is suitable for use in scenarios where a robot needs to adapt its navigation strategy dynamically, such as in environments with moving obstacles or when the robot's mission objectives change. Typical ROS2 entities that interact with this service include navigation nodes and parameter tuning tools.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParameters",
                    "details": "# A list of parameters to set.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting each parameter succeeded or not and why.\nSetParametersResult[] results\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/local_costmap/local_costmap/set_parameters_atomically",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/local_costmap/local_costmap/set_parameters_atomically` service allows for the atomic setting of multiple parameters in a local costmap. This ensures that either all parameters are updated successfully or none are, maintaining system consistency.\n    - It is typically used for dynamically adjusting costmap parameters in response to changing environmental conditions or operational requirements.\n\nMobile Robot Module:\n    - This service relates to the Navigation module of a mobile robot, specifically the local costmap component.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks that require real-time adaptation of navigation parameters, such as obstacle avoidance and path planning in dynamic environments.\n    - It plays a role in scenarios where the robot needs to adjust its navigation strategy based on sensor feedback or mission objectives.\n\nUsage in the ROS2 System:\n    - Suitable for use in ROS2 navigation stacks, particularly in systems that require dynamic reconfiguration of navigation parameters to optimize performance in varying conditions.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParametersAtomically",
                    "details": "# A list of parameters to set atomically.\n#\n# This call will either set all values, or none of the values.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting all of the parameters succeeded or not and why.\nSetParametersResult result\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/map_server/change_state",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/map_server/change_state` service is used to manage the lifecycle states of the map server node. It allows transitions between different states such as configuring, activating, and deactivating the node.\n    - It is typically used to control the operational state of the map server, ensuring it is in the correct state for the robot's navigation tasks.\n\nMobile Robot Module:\n    - This ROS2 element relates to the Navigation module of a mobile robot, specifically the map management component.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks that require dynamic control over the map server's state, such as initializing the map server, activating it for use in navigation, or safely shutting it down.\n    - It plays a role in scenarios where the robot's navigation system needs to be reconfigured or reset, such as during startup, error recovery, or when changing maps.\n\nUsage in the ROS2 System:\n    - Suitable for tasks like initializing the navigation stack, handling state transitions during runtime, and managing the lifecycle of the map server in response to system events or errors.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/ChangeState",
                    "details": "# The requested transition.\n#\n# This change state service will fail if the transition is not possible.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n---\n\n# Indicates whether the service was able to initiate the state transition\nbool success"
                }
            ]
        },
        {
            "name": "/map_server/load_map",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/map_server/load_map` service is responsible for loading a map into the navigation system of a robot. It is typically used to provide the robot with a pre-defined map of its environment, which is essential for navigation and path planning.\n\nMobile Robot Module:\n    - This ROS2 element relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks involving autonomous navigation, where the robot needs to understand its environment to plan paths and avoid obstacles. It is used in scenarios where a robot must operate in a known environment, such as warehouses or hospitals.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks like initializing the robot's navigation stack with a map, updating the map when changes occur, and ensuring the robot can localize itself within the map. Typical entities interacting with this service include navigation nodes and path planners.",
            "interfaces": [
                {
                    "name": "nav2_msgs/srv/LoadMap",
                    "details": "# URL of map resource\n# Can be an absolute path to a file: file:///path/to/maps/floor1.yaml\n# Or, relative to a ROS package: package://my_ros_package/maps/floor2.yaml\nstring map_url\n---\n# Result code defintions\nuint8 RESULT_SUCCESS=0\nuint8 RESULT_MAP_DOES_NOT_EXIST=1\nuint8 RESULT_INVALID_MAP_DATA=2\nuint8 RESULT_INVALID_MAP_METADATA=3\nuint8 RESULT_UNDEFINED_FAILURE=255\n\n# Returned map is only valid if result equals RESULT_SUCCESS\nnav_msgs/OccupancyGrid map\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tMapMetaData info\n\t\tbuiltin_interfaces/Time map_load_time\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tfloat32 resolution\n\t\tuint32 width\n\t\tuint32 height\n\t\tgeometry_msgs/Pose origin\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\tint8[] data\nuint8 result"
                }
            ]
        },
        {
            "name": "/map_server/map",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The \"/map_server/map\" service provides access to the current map as an occupancy grid. It is typically used to retrieve the map data necessary for navigation and path planning tasks.\n\nMobile Robot Module:\n    - This ROS2 element relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks involving autonomous navigation, where the robot needs to understand its environment to plan paths and avoid obstacles. It is used in scenarios where a robot must navigate through a known environment using a pre-loaded map.\n\nUsage in the ROS2 System:\n    - It is suitable for use in ROS2 navigation stacks, such as Nav2, where it interacts with nodes responsible for localization, path planning, and obstacle avoidance.",
            "interfaces": [
                {
                    "name": "nav_msgs/srv/GetMap",
                    "details": "# Get the map as a nav_msgs/OccupancyGrid\n---\n# The current map hosted by this map service.\nOccupancyGrid map\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tMapMetaData info\n\t\tbuiltin_interfaces/Time map_load_time\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tfloat32 resolution\n\t\tuint32 width\n\t\tuint32 height\n\t\tgeometry_msgs/Pose origin\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\tint8[] data"
                }
            ]
        },
        {
            "name": "/move_group/set_parameters",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/move_group/set_parameters` service allows for the dynamic configuration of parameters within the move group, which is part of the MoveIt motion planning framework. It is typically used to adjust parameters that influence the behavior of motion planning algorithms.\n\nMobile Robot Module:\n   - This service relates to the motion planning module of a mobile robot, specifically within the context of robotic arms or manipulators using MoveIt.\n\nRelevance for Specific Tasks:\n   - This service is crucial for tasks that require fine-tuning of motion planning parameters, such as adjusting the precision of path planning or modifying constraints during runtime. It is particularly useful in scenarios where the robot's environment or task requirements change dynamically.\n\nUsage in the ROS2 System:\n   - It is suitable for tasks involving dynamic reconfiguration of motion planning settings, such as adapting to new obstacles or optimizing path planning for efficiency. Typical users include roboticists working on adaptive motion planning and developers integrating MoveIt with custom robotic systems.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParameters",
                    "details": "# A list of parameters to set.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting each parameter succeeded or not and why.\nSetParametersResult[] results\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/move_group/set_parameters_atomically",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/move_group/set_parameters_atomically` service allows for the atomic setting of multiple parameters in a single operation. It ensures that either all parameters are updated successfully or none are, maintaining system consistency.\n    - It is typically used for configuring parameters related to motion planning and control in a robotic system.\n\nMobile Robot Module:\n    - This service relates to the motion planning module of a mobile robot, particularly within the context of the MoveIt framework.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks that require precise and consistent parameter updates, such as adjusting motion planning algorithms or tuning control parameters.\n    - It plays a role in scenarios where dynamic reconfiguration of parameters is needed without interrupting ongoing operations.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving dynamic reconfiguration of motion planning settings, such as during runtime adjustments in response to environmental changes or task requirements.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParametersAtomically",
                    "details": "# A list of parameters to set atomically.\n#\n# This call will either set all values, or none of the values.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting all of the parameters succeeded or not and why.\nSetParametersResult result\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/object_controller/set_parameters",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/object_controller/set_parameters` service allows for the dynamic configuration of parameters within a node. It is typically used to adjust control parameters on-the-fly without restarting the node, which is crucial for fine-tuning performance in real-time.\n\nMobile Robot Module:\n    - This service relates to the control module of a mobile robot, particularly in adjusting parameters for object manipulation or navigation.\n\nRelevance for Specific Tasks:\n    - This service is essential for tasks that require real-time parameter tuning, such as adjusting PID controller gains or setting thresholds for sensor data processing. It is particularly useful in scenarios where environmental conditions change, and the robot must adapt its behavior accordingly.\n\nUsage in the ROS2 System:\n    - Suitable for tasks like dynamic reconfiguration of control strategies, adaptive control systems, and real-time system optimization. It is commonly used by nodes that require flexible parameter management, such as navigation or manipulation controllers.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParameters",
                    "details": "# A list of parameters to set.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting each parameter succeeded or not and why.\nSetParametersResult[] results\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/object_controller/set_parameters_atomically",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/object_controller/set_parameters_atomically` service allows for the atomic setting of multiple parameters. This means that either all parameters are updated successfully, or none are, ensuring consistency in parameter configuration.\n   - It is typically used for configuring and tuning parameters of a control system in a reliable manner.\n\nMobile Robot Module:\n   - This service relates to the control module of a mobile robot, particularly in the context of parameter management for controllers.\n\nRelevance for Specific Tasks:\n   - This service is crucial for tasks that require precise and consistent parameter updates, such as tuning PID controllers or adjusting navigation settings.\n   - It plays a role in scenarios where parameter consistency is critical, such as during dynamic reconfiguration of control strategies.\n\nUsage in the ROS2 System:\n   - Suitable for tasks involving dynamic parameter tuning, such as adjusting control gains or thresholds in response to environmental changes or system feedback.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParametersAtomically",
                    "details": "# A list of parameters to set atomically.\n#\n# This call will either set all values, or none of the values.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting all of the parameters succeeded or not and why.\nSetParametersResult result\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/plan_kinematic_path",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/plan_kinematic_path` service is used to request motion planning for a robot. It generates a motion plan based on the given constraints and robot state.\n    - It is typically used for path planning in robotic arms or mobile robots to ensure collision-free and efficient movement.\n\nMobile Robot Module:\n    - This service relates to the motion planning module of a mobile robot, particularly in robotic arms or manipulators.\n\nRelevance for Specific Tasks:\n    - This service solves the problem of generating a feasible path for a robot to follow, considering constraints like joint limits and environmental obstacles.\n    - It is crucial in scenarios where precise and safe movement is required, such as in industrial automation or robotic surgery.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving robotic arm manipulation, autonomous navigation, and any application requiring complex motion planning. It interacts with entities like MoveIt! for planning and execution.",
            "interfaces": [
                {
                    "name": "moveit_msgs/srv/GetMotionPlan",
                    "details": "# This service contains the definition for a request to the motion\n# planner and the output it provides\n\nMotionPlanRequest motion_plan_request\n\tWorkspaceParameters workspace_parameters\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tgeometry_msgs/Vector3 min_corner\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tgeometry_msgs/Vector3 max_corner\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tRobotState start_state\n\t\tsensor_msgs/JointState joint_state\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] name\n\t\t\tfloat64[] position\n\t\t\tfloat64[] velocity\n\t\t\tfloat64[] effort\n\t\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tgeometry_msgs/Transform[] transforms\n\t\t\t\tVector3 translation\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion rotation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tgeometry_msgs/Twist[] twist\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Wrench[] wrench\n\t\t\t\tVector3  force\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  torque\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\tAttachedCollisionObject[] attached_collision_objects\n\t\t\tstring link_name\n\t\t\tCollisionObject object\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tgeometry_msgs/Pose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring id\n\t\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\t\tstring key\n\t\t\t\t\tstring db\n\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\tuint8 type\n\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\tfloat32 z\n\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t\t#\n\t\t\t\t\tfloat64[4] coef\n\t\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring[] subframe_names\n\t\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tbyte ADD=0\n\t\t\t\tbyte REMOVE=1\n\t\t\t\tbyte APPEND=2\n\t\t\t\tbyte MOVE=3\n\t\t\t\tbyte operation\n\t\t\tstring[] touch_links\n\t\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tstring[] joint_names\n\t\t\t\tJointTrajectoryPoint[] points\n\t\t\t\t\tfloat64[] positions\n\t\t\t\t\tfloat64[] velocities\n\t\t\t\t\tfloat64[] accelerations\n\t\t\t\t\tfloat64[] effort\n\t\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\tfloat64 weight\n\t\tbool is_diff\n\tConstraints[] goal_constraints\n\t\tstring name\n\t\tJointConstraint[] joint_constraints\n\t\t\tstring joint_name\n\t\t\tfloat64 position\n\t\t\tfloat64 tolerance_above\n\t\t\tfloat64 tolerance_below\n\t\t\tfloat64 weight\n\t\tPositionConstraint[] position_constraints\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring link_name\n\t\t\tgeometry_msgs/Vector3 target_point_offset\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tBoundingVolume constraint_region\n\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\tuint8 type\n\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\tfloat32 z\n\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tfloat64 weight\n\t\tOrientationConstraint[] orientation_constraints\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Quaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\t\tstring link_name\n\t\t\tfloat64 absolute_x_axis_tolerance\n\t\t\tfloat64 absolute_y_axis_tolerance\n\t\t\tfloat64 absolute_z_axis_tolerance\n\t\t\tuint8 parameterization\n\t\t\tuint8 XYZ_EULER_ANGLES=0\n\t\t\tuint8 ROTATION_VECTOR=1\n\t\t\tfloat64 weight\n\t\tVisibilityConstraint[] visibility_constraints\n\t\t\tfloat64 target_radius\n\t\t\tgeometry_msgs/PoseStamped target_pose\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tPose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tint32 cone_sides\n\t\t\tgeometry_msgs/PoseStamped sensor_pose\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tPose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tfloat64 max_view_angle\n\t\t\tfloat64 max_range_angle\n\t\t\tuint8 SENSOR_Z=0\n\t\t\tuint8 SENSOR_Y=1\n\t\t\tuint8 SENSOR_X=2\n\t\t\tuint8 sensor_view_direction\n\t\t\tfloat64 weight\n\tConstraints path_constraints\n\t\tstring name\n\t\tJointConstraint[] joint_constraints\n\t\t\tstring joint_name\n\t\t\tfloat64 position\n\t\t\tfloat64 tolerance_above\n\t\t\tfloat64 tolerance_below\n\t\t\tfloat64 weight\n\t\tPositionConstraint[] position_constraints\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring link_name\n\t\t\tgeometry_msgs/Vector3 target_point_offset\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tBoundingVolume constraint_region\n\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\tuint8 type\n\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\tfloat32 z\n\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tfloat64 weight\n\t\tOrientationConstraint[] orientation_constraints\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Quaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\t\tstring link_name\n\t\t\tfloat64 absolute_x_axis_tolerance\n\t\t\tfloat64 absolute_y_axis_tolerance\n\t\t\tfloat64 absolute_z_axis_tolerance\n\t\t\tuint8 parameterization\n\t\t\tuint8 XYZ_EULER_ANGLES=0\n\t\t\tuint8 ROTATION_VECTOR=1\n\t\t\tfloat64 weight\n\t\tVisibilityConstraint[] visibility_constraints\n\t\t\tfloat64 target_radius\n\t\t\tgeometry_msgs/PoseStamped target_pose\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tPose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tint32 cone_sides\n\t\t\tgeometry_msgs/PoseStamped sensor_pose\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tPose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tfloat64 max_view_angle\n\t\t\tfloat64 max_range_angle\n\t\t\tuint8 SENSOR_Z=0\n\t\t\tuint8 SENSOR_Y=1\n\t\t\tuint8 SENSOR_X=2\n\t\t\tuint8 sensor_view_direction\n\t\t\tfloat64 weight\n\tTrajectoryConstraints trajectory_constraints\n\t\tConstraints[] constraints\n\t\t\tstring name\n\t\t\tJointConstraint[] joint_constraints\n\t\t\t\tstring joint_name\n\t\t\t\tfloat64 position\n\t\t\t\tfloat64 tolerance_above\n\t\t\t\tfloat64 tolerance_below\n\t\t\t\tfloat64 weight\n\t\t\tPositionConstraint[] position_constraints\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tstring link_name\n\t\t\t\tgeometry_msgs/Vector3 target_point_offset\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tBoundingVolume constraint_region\n\t\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\t\tuint8 type\n\t\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\t\tfloat32 z\n\t\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tfloat64 weight\n\t\t\tOrientationConstraint[] orientation_constraints\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tgeometry_msgs/Quaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring link_name\n\t\t\t\tfloat64 absolute_x_axis_tolerance\n\t\t\t\tfloat64 absolute_y_axis_tolerance\n\t\t\t\tfloat64 absolute_z_axis_tolerance\n\t\t\t\tuint8 parameterization\n\t\t\t\tuint8 XYZ_EULER_ANGLES=0\n\t\t\t\tuint8 ROTATION_VECTOR=1\n\t\t\t\tfloat64 weight\n\t\t\tVisibilityConstraint[] visibility_constraints\n\t\t\t\tfloat64 target_radius\n\t\t\t\tgeometry_msgs/PoseStamped target_pose\n\t\t\t\t\tstd_msgs/Header header\n\t\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\t\tstring frame_id\n\t\t\t\t\tPose pose\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tint32 cone_sides\n\t\t\t\tgeometry_msgs/PoseStamped sensor_pose\n\t\t\t\t\tstd_msgs/Header header\n\t\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\t\tstring frame_id\n\t\t\t\t\tPose pose\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tfloat64 max_view_angle\n\t\t\t\tfloat64 max_range_angle\n\t\t\t\tuint8 SENSOR_Z=0\n\t\t\t\tuint8 SENSOR_Y=1\n\t\t\t\tuint8 SENSOR_X=2\n\t\t\t\tuint8 sensor_view_direction\n\t\t\t\tfloat64 weight\n\tGenericTrajectory[] reference_trajectories\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\ttrajectory_msgs/JointTrajectory[] joint_trajectory\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tJointTrajectoryPoint[] points\n\t\t\t\tfloat64[] positions\n\t\t\t\tfloat64[] velocities\n\t\t\t\tfloat64[] accelerations\n\t\t\t\tfloat64[] effort\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\tmoveit_msgs/CartesianTrajectory[] cartesian_trajectory\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring tracked_frame\n\t\t\tCartesianTrajectoryPoint[] points\n\t\t\t\tCartesianPoint point\n\t\t\t\t\tgeometry_msgs/Pose pose\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\t\tgeometry_msgs/Twist velocity\n\t\t\t\t\t\tVector3  linear\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tVector3  angular\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tgeometry_msgs/Accel acceleration\n\t\t\t\t\t\tVector3  linear\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tVector3  angular\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\tstring pipeline_id\n\tstring planner_id\n\tstring group_name\n\tint32 num_planning_attempts\n\tfloat64 allowed_planning_time\n\tfloat64 max_velocity_scaling_factor\n\tfloat64 max_acceleration_scaling_factor\n\tstring cartesian_speed_end_effector_link\n\tfloat64 max_cartesian_speed #\n\n---\n\nMotionPlanResponse motion_plan_response\n\tRobotState trajectory_start\n\t\tsensor_msgs/JointState joint_state\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] name\n\t\t\tfloat64[] position\n\t\t\tfloat64[] velocity\n\t\t\tfloat64[] effort\n\t\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tgeometry_msgs/Transform[] transforms\n\t\t\t\tVector3 translation\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion rotation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tgeometry_msgs/Twist[] twist\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Wrench[] wrench\n\t\t\t\tVector3  force\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  torque\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\tAttachedCollisionObject[] attached_collision_objects\n\t\t\tstring link_name\n\t\t\tCollisionObject object\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tgeometry_msgs/Pose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring id\n\t\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\t\tstring key\n\t\t\t\t\tstring db\n\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\tuint8 type\n\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\tfloat32 z\n\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t\t#\n\t\t\t\t\tfloat64[4] coef\n\t\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring[] subframe_names\n\t\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tbyte ADD=0\n\t\t\t\tbyte REMOVE=1\n\t\t\t\tbyte APPEND=2\n\t\t\t\tbyte MOVE=3\n\t\t\t\tbyte operation\n\t\t\tstring[] touch_links\n\t\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tstring[] joint_names\n\t\t\t\tJointTrajectoryPoint[] points\n\t\t\t\t\tfloat64[] positions\n\t\t\t\t\tfloat64[] velocities\n\t\t\t\t\tfloat64[] accelerations\n\t\t\t\t\tfloat64[] effort\n\t\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\tfloat64 weight\n\t\tbool is_diff\n\tstring group_name\n\tRobotTrajectory trajectory\n\t\ttrajectory_msgs/JointTrajectory joint_trajectory\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tJointTrajectoryPoint[] points\n\t\t\t\tfloat64[] positions\n\t\t\t\tfloat64[] velocities\n\t\t\t\tfloat64[] accelerations\n\t\t\t\tfloat64[] effort\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\ttrajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tMultiDOFJointTrajectoryPoint[] points\n\t\t\t\tgeometry_msgs/Transform[] transforms\n\t\t\t\t\tVector3 translation\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion rotation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tgeometry_msgs/Twist[] velocities\n\t\t\t\t\tVector3  linear\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tVector3  angular\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Twist[] accelerations\n\t\t\t\t\tVector3  linear\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tVector3  angular\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\tfloat64 planning_time\n\tMoveItErrorCodes error_code\n\t\tint32 val\n\t\tint32 SUCCESS=1\n\t\tint32 FAILURE=99999\n\t\tint32 PLANNING_FAILED=-1\n\t\tint32 INVALID_MOTION_PLAN=-2\n\t\tint32 MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE=-3\n\t\tint32 CONTROL_FAILED=-4\n\t\tint32 UNABLE_TO_AQUIRE_SENSOR_DATA=-5\n\t\tint32 TIMED_OUT=-6\n\t\tint32 PREEMPTED=-7\n\t\tint32 START_STATE_IN_COLLISION=-10\n\t\tint32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-11\n\t\tint32 START_STATE_INVALID=-26\n\t\tint32 GOAL_IN_COLLISION=-12\n\t\tint32 GOAL_VIOLATES_PATH_CONSTRAINTS=-13\n\t\tint32 GOAL_CONSTRAINTS_VIOLATED=-14\n\t\tint32 GOAL_STATE_INVALID=-27\n\t\tint32 UNRECOGNIZED_GOAL_TYPE=-28\n\t\tint32 INVALID_GROUP_NAME=-15\n\t\tint32 INVALID_GOAL_CONSTRAINTS=-16\n\t\tint32 INVALID_ROBOT_STATE=-17\n\t\tint32 INVALID_LINK_NAME=-18\n\t\tint32 INVALID_OBJECT_NAME=-19\n\t\tint32 FRAME_TRANSFORM_FAILURE=-21\n\t\tint32 COLLISION_CHECKING_UNAVAILABLE=-22\n\t\tint32 ROBOT_STATE_STALE=-23\n\t\tint32 SENSOR_INFO_STALE=-24\n\t\tint32 COMMUNICATION_FAILURE=-25\n\t\tint32 CRASH=-29\n\t\tint32 ABORT=-30\n\t\tint32 NO_IK_SOLUTION=-31"
                }
            ]
        },
        {
            "name": "/planner_server/change_state",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/planner_server/change_state` service is used to manage the lifecycle states of a node, allowing transitions between different operational states such as configuring, activating, and deactivating. It is typically used to control the state of a planner server in a robotic system.\n\nMobile Robot Module:\n    - This ROS2 element relates to the planning module of a mobile robot, which is responsible for path planning and navigation tasks.\n\nRelevance for Specific Tasks:\n    - This service is crucial for managing the operational state of the planner, ensuring it is correctly configured and activated for path planning tasks. It is used in scenarios where the planner's state needs to be changed dynamically, such as during startup, shutdown, or error recovery.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks involving lifecycle management of nodes, particularly in systems where the planner's state needs to be controlled programmatically, such as in autonomous navigation and mission planning.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/ChangeState",
                    "details": "# The requested transition.\n#\n# This change state service will fail if the transition is not possible.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n---\n\n# Indicates whether the service was able to initiate the state transition\nbool success"
                }
            ]
        },
        {
            "name": "/planner_server/get_available_transitions",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/planner_server/get_available_transitions` service provides information about the possible state transitions for a lifecycle node. It is typically used to query the current state and potential transitions of a node, which is crucial for managing the node's lifecycle.\n\nMobile Robot Module:\n    - This service relates to the lifecycle management module of a mobile robot, which is responsible for controlling the states of various nodes within the robot's system.\n\nRelevance for Specific Tasks:\n    - This service is essential for tasks that require dynamic reconfiguration or state management of nodes, such as activating or deactivating components based on operational needs. It plays a role in scenarios where the robot's behavior needs to be adjusted in response to environmental changes or mission requirements.\n\nUsage in the ROS2 System:\n    - It is suitable for ROS2 tasks involving lifecycle management, such as transitioning nodes between states like configuring, activating, or shutting down, ensuring that the robot's components are in the correct state for operation.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/GetAvailableTransitions",
                    "details": "---\n# An array of the possible start_state-goal_state transitions\nTransitionDescription[] available_transitions\n\tTransition transition\n\t\tuint8 TRANSITION_CREATE = 0\n\t\tuint8 TRANSITION_CONFIGURE = 1\n\t\tuint8 TRANSITION_CLEANUP = 2\n\t\tuint8 TRANSITION_ACTIVATE = 3\n\t\tuint8 TRANSITION_DEACTIVATE = 4\n\t\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\t\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\t\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\t\tuint8 TRANSITION_DESTROY = 8\n\t\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\t\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\t\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\t\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\t\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\t\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\t\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\t\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\t\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\t\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\t\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\t\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\t\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\t\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\t\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\t\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\t\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\t\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\t\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\t\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\t\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t\t##\n\t\t##\n\t\tuint8 id\n\t\tstring label\n\tState start_state\n\t\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\t\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\t\tuint8 PRIMARY_STATE_INACTIVE = 2\n\t\tuint8 PRIMARY_STATE_ACTIVE = 3\n\t\tuint8 PRIMARY_STATE_FINALIZED = 4\n\t\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\t\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\t\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\t\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\t\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\t\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\t\tuint8 id\n\t\tstring label\n\tState goal_state\n\t\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\t\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\t\tuint8 PRIMARY_STATE_INACTIVE = 2\n\t\tuint8 PRIMARY_STATE_ACTIVE = 3\n\t\tuint8 PRIMARY_STATE_FINALIZED = 4\n\t\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\t\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\t\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\t\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\t\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\t\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\t\tuint8 id\n\t\tstring label"
                }
            ]
        },
        {
            "name": "/planner_server/set_parameters",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/planner_server/set_parameters` service allows for dynamic configuration of parameters within the planner server. It is typically used to adjust planning parameters on-the-fly without restarting the system.\n\nMobile Robot Module:\n    - This element relates to the Navigation module of a Mobile Robot.\n\nRelevance for Specific Tasks:\n    - It is relevant for tasks that require real-time adjustments to navigation strategies, such as changing the robot's path planning behavior or tuning performance parameters during operation. This can be crucial in dynamic environments where conditions change frequently.\n\nUsage in the ROS2 System:\n    - Suitable for use in scenarios where the robot's navigation parameters need to be updated based on sensor feedback or user input, such as adjusting speed limits or obstacle avoidance thresholds.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParameters",
                    "details": "# A list of parameters to set.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting each parameter succeeded or not and why.\nSetParametersResult[] results\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/query_planner_interface",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/query_planner_interface` service is used to query available planning interfaces in a robotic system. It provides information about different planner instances that can be utilized for motion planning tasks.\n    - It is typically used to identify and select appropriate planning algorithms for motion planning in robotic applications.\n\nMobile Robot Module:\n    - This ROS2 element relates to the Motion Planning module of a Mobile Robot.\n\nRelevance for Specific Tasks:\n    - This service is crucial for selecting the right planning strategy for a given task, such as navigating through complex environments or executing precise movements.\n    - It plays a role in scenarios where different planning algorithms need to be evaluated or benchmarked to determine the most efficient path or motion plan.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving motion planning and path optimization, such as those performed by the MoveIt! framework in robotic arms or mobile robots.",
            "interfaces": [
                {
                    "name": "moveit_msgs/srv/QueryPlannerInterfaces",
                    "details": "---\n\n# The planning instances that could be used in the benchmark\nPlannerInterfaceDescription[] planner_interfaces\n\tstring name\n\tstring pipeline_id\n\tstring[] planner_ids"
                }
            ]
        },
        {
            "name": "/set_planner_params",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/set_planner_params` service is used to configure the parameters of a motion planning pipeline in a ROS2 system. It allows users to set or update the planning parameters, which are crucial for defining how a robot plans its movements.\n\nMobile Robot Module:\n   - This service relates to the Motion Planning module of a mobile robot, particularly in systems using the MoveIt framework for robotic arm or mobile base planning.\n\nRelevance for Specific Tasks:\n   - This service is essential for tasks that require dynamic adjustment of planning strategies, such as adapting to different environments or optimizing for speed or energy efficiency. It is particularly useful in scenarios where the robot's planning needs to be fine-tuned for specific tasks or conditions.\n\nUsage in the ROS2 System:\n   - It is typically used in conjunction with motion planning nodes and interfaces, such as those in the MoveIt framework, to adjust planning parameters on-the-fly during operation.",
            "interfaces": [
                {
                    "name": "moveit_msgs/srv/SetPlannerParams",
                    "details": "# Name of the planning pipeline, uses default if empty\nstring pipeline_id\n\n# Name of planning config\nstring planner_config\n\n# Optional name of planning group (set global defaults if empty)\nstring group\n\n# parameters as key-value pairs\nPlannerParams params\n\tstring[] keys\n\tstring[] values\n\tstring[] descriptions\n\n# replace params or augment existing ones?\nbool replace\n\n---"
                }
            ]
        },
        {
            "name": "/spawn_entity",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/spawn_entity` service is used to add new entities, such as robots or objects, into a simulation environment like Gazebo. It allows users to specify the entity's name, XML description, initial pose, and reference frame.\n\nMobile Robot Module:\n    - This service relates to the simulation module of a mobile robot, particularly in environments where Gazebo is used for testing and development.\n\nRelevance for Specific Tasks:\n    - The `/spawn_entity` service is crucial for tasks involving the initialization and configuration of simulation environments. It is used to dynamically introduce new entities into a simulation, which is essential for testing control algorithms and robot behaviors in a controlled setting.\n\nUsage in the ROS2 System:\n    - This service is typically used in simulation setups where developers need to test robot navigation, manipulation, or interaction with other entities. It is suitable for tasks such as automated testing of robot control strategies and validation of robot designs in a simulated environment.",
            "interfaces": [
                {
                    "name": "gazebo_msgs/srv/SpawnEntity",
                    "details": "string name                       # Name of the entity to be spawned (optional).\nstring xml                        # Entity XML description as a string, either URDF or SDF.\nstring robot_namespace            # Spawn robot and all ROS interfaces under this namespace\ngeometry_msgs/Pose initial_pose   # Initial entity pose.\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\nstring reference_frame            # initial_pose is defined relative to the frame of this entity.\n                                  # If left empty or \"world\" or \"map\", then gazebo world frame is\n                                  # used.\n                                  # If non-existent entity is specified, an error is returned\n                                  # and the entity is not spawned.\n---\nbool success                      # Return true if spawned successfully.\nstring status_message             # Comments if available."
                }
            ]
        },
        {
            "name": "/teleop/set_parameters",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/teleop/set_parameters` service allows for the dynamic configuration of parameters related to teleoperation. It is typically used to adjust settings such as speed limits or control sensitivity in real-time.\n\nMobile Robot Module:\n    - This service relates to the teleoperation module of a mobile robot, which is responsible for remote control and manual operation.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks requiring real-time adjustments to teleoperation parameters, such as tuning control responses or adapting to different operational environments. It is particularly useful in scenarios where manual control needs to be fine-tuned for precision or safety.\n\nUsage in the ROS2 System:\n    - Suitable for ROS2 tasks involving dynamic parameter tuning, such as adjusting joystick sensitivity or setting speed limits during teleoperation. It is commonly used in conjunction with teleoperation nodes and interfaces.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParameters",
                    "details": "# A list of parameters to set.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting each parameter succeeded or not and why.\nSetParametersResult[] results\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/waypoint_follower/change_state",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/waypoint_follower/change_state` service is used to manage the lifecycle states of the waypoint follower node. It allows transitions between different states such as configuring, activating, deactivating, and shutting down the node.\n\nMobile Robot Module:\n    - This service relates to the navigation and control module of a mobile robot, specifically the waypoint following functionality.\n\nRelevance for Specific Tasks:\n    - This service is crucial for tasks that require dynamic control over the waypoint follower's operational state, such as starting, stopping, or reconfiguring the follower during a mission. It ensures that the waypoint follower can be properly managed and transitioned through its lifecycle states.\n\nUsage in the ROS2 System:\n    - It is typically used in scenarios where a mobile robot needs to follow a series of waypoints, and the control system must manage the follower's state transitions. It interacts with lifecycle management nodes and is essential for robust state management in navigation tasks.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/ChangeState",
                    "details": "# The requested transition.\n#\n# This change state service will fail if the transition is not possible.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t##\n\t##\n\tuint8 id\n\tstring label\n---\n\n# Indicates whether the service was able to initiate the state transition\nbool success"
                }
            ]
        },
        {
            "name": "/waypoint_follower/get_available_transitions",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/waypoint_follower/get_available_transitions` service provides information about the possible state transitions for a lifecycle node. It is typically used to query the current state and potential state changes of a node, which is crucial for managing node behavior in a controlled manner.\n\nMobile Robot Module:\n    - This service relates to the control and management module of a mobile robot, specifically in managing the lifecycle states of nodes involved in navigation and waypoint following.\n\nRelevance for Specific Tasks:\n    - This service is essential for tasks that require dynamic reconfiguration or state management of nodes, such as activating or deactivating the waypoint follower based on operational needs or system conditions. It helps ensure that nodes are in the correct state for executing navigation tasks.\n\nUsage in the ROS2 System:\n    - It is suitable for use in ROS2 systems where lifecycle management is critical, such as in autonomous navigation systems where nodes need to be activated or deactivated based on mission requirements or system health checks.",
            "interfaces": [
                {
                    "name": "lifecycle_msgs/srv/GetAvailableTransitions",
                    "details": "---\n# An array of the possible start_state-goal_state transitions\nTransitionDescription[] available_transitions\n\tTransition transition\n\t\tuint8 TRANSITION_CREATE = 0\n\t\tuint8 TRANSITION_CONFIGURE = 1\n\t\tuint8 TRANSITION_CLEANUP = 2\n\t\tuint8 TRANSITION_ACTIVATE = 3\n\t\tuint8 TRANSITION_DEACTIVATE = 4\n\t\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\t\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\t\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\t\tuint8 TRANSITION_DESTROY = 8\n\t\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\t\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\t\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\t\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\t\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\t\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\t\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\t\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\t\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\t\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\t\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\t\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\t\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\t\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\t\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\t\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\t\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\t\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\t\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\t\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\t\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\t\t##\n\t\t##\n\t\tuint8 id\n\t\tstring label\n\tState start_state\n\t\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\t\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\t\tuint8 PRIMARY_STATE_INACTIVE = 2\n\t\tuint8 PRIMARY_STATE_ACTIVE = 3\n\t\tuint8 PRIMARY_STATE_FINALIZED = 4\n\t\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\t\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\t\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\t\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\t\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\t\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\t\tuint8 id\n\t\tstring label\n\tState goal_state\n\t\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\t\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\t\tuint8 PRIMARY_STATE_INACTIVE = 2\n\t\tuint8 PRIMARY_STATE_ACTIVE = 3\n\t\tuint8 PRIMARY_STATE_FINALIZED = 4\n\t\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\t\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\t\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\t\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\t\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\t\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\t\tuint8 id\n\t\tstring label"
                }
            ]
        },
        {
            "name": "/waypoint_follower/set_parameters",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n    - The `/waypoint_follower/set_parameters` service allows dynamic configuration of parameters for the waypoint follower, enabling real-time adjustments to its behavior.\n    - It is typically used to modify parameters such as speed, tolerance, or path planning strategies during operation.\n\nMobile Robot Module:\n    - This service relates to the navigation and path planning module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It solves problems related to adapting the robot's navigation behavior to changing environments or mission requirements.\n    - Typical scenarios include adjusting the robot's speed or path precision in response to obstacles or varying terrain conditions.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving dynamic path planning and real-time navigation adjustments, often used in conjunction with navigation stacks and control nodes.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParameters",
                    "details": "# A list of parameters to set.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting each parameter succeeded or not and why.\nSetParametersResult[] results\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/waypoint_follower/set_parameters_atomically",
            "type": "service",
            "description": "Purpose of the ROS2 Element:\n   - The `/waypoint_follower/set_parameters_atomically` service allows for the atomic setting of multiple parameters in a single operation. This ensures that either all parameters are updated successfully, or none are, maintaining system consistency.\n   - It is typically used for configuring or reconfiguring the parameters of a waypoint follower node in a controlled manner.\n\nMobile Robot Module:\n   - This ROS2 element relates to the navigation module of a mobile robot, specifically the waypoint following component.\n\nRelevance for Specific Tasks:\n   - This service is crucial for tasks that require dynamic reconfiguration of navigation parameters, such as adjusting speed or path precision during operation.\n   - It plays a role in scenarios where real-time parameter adjustments are needed to adapt to changing environments or mission requirements.\n\nUsage in the ROS2 System:\n   - Suitable for use in ROS2 systems where navigation parameters need to be updated without interrupting the waypoint following process, such as in autonomous delivery robots or patrol robots.",
            "interfaces": [
                {
                    "name": "rcl_interfaces/srv/SetParametersAtomically",
                    "details": "# A list of parameters to set atomically.\n#\n# This call will either set all values, or none of the values.\nParameter[] parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n---\n# Indicates whether setting all of the parameters succeeded or not and why.\nSetParametersResult result\n\tbool successful\n\tstring reason"
                }
            ]
        },
        {
            "name": "/backup",
            "type": "action",
            "description": "Purpose of the ROS2 Element:\n    - The \"/backup\" action is designed to control a mobile robot's backward movement. It allows the robot to move in reverse to a specified target point at a defined speed, with a time allowance for the operation.\n    - It is typically used for navigation tasks where the robot needs to backtrack or reposition itself safely.\n\nMobile Robot Module:\n    - This ROS2 element relates to the navigation and motion control modules of a mobile robot.\n\nRelevance for Specific Tasks:\n    - The \"/backup\" action is useful for tasks requiring precise backward navigation, such as avoiding obstacles, retreating from a dead-end, or repositioning for better alignment.\n    - It plays a role in scenarios where the robot must adjust its position without turning around, such as in narrow corridors or when docking.\n\nUsage in the ROS2 System:\n    - Suitable for ROS2 tasks involving autonomous navigation, obstacle avoidance, and path planning where reverse movement is necessary.",
            "interfaces": [
                {
                    "name": "nav2_msgs/action/BackUp",
                    "details": "#goal definition\ngeometry_msgs/Point target\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\nfloat32 speed\nbuiltin_interfaces/Duration time_allowance\n\tint32 sec\n\tuint32 nanosec\n---\n#result definition\nbuiltin_interfaces/Duration total_elapsed_time\n\tint32 sec\n\tuint32 nanosec\n---\n#feedback definition\nfloat32 distance_traveled"
                }
            ]
        },
        {
            "name": "/compute_path_through_poses",
            "type": "action",
            "description": "Purpose of the ROS2 Element:\n    - The `/compute_path_through_poses` action is used to compute a path for a mobile robot to follow through a series of specified poses. It is typically used for navigation tasks where a robot needs to move through multiple waypoints.\n\nMobile Robot Module:\n    - This element relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It solves the problem of path planning by generating a feasible path through given poses. It is crucial in scenarios where a robot must navigate complex environments with multiple goals.\n\nUsage in the ROS2 System:\n    - This action is suitable for tasks such as autonomous navigation, multi-point delivery, and exploration missions where precise path planning is required. It interacts with navigation planners and controllers within the ROS2 ecosystem.",
            "interfaces": [
                {
                    "name": "nav2_msgs/action/ComputePathThroughPoses",
                    "details": "#goal definition\ngeometry_msgs/PoseStamped[] goals\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\ngeometry_msgs/PoseStamped start\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\nstring planner_id\nbool use_start # If false, use current robot pose as path start, if true, use start above instead\n---\n#result definition\nnav_msgs/Path path\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tgeometry_msgs/PoseStamped[] poses\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tPose pose\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\nbuiltin_interfaces/Duration planning_time\n\tint32 sec\n\tuint32 nanosec\n---\n#feedback definition"
                }
            ]
        },
        {
            "name": "/compute_path_to_pose",
            "type": "action",
            "description": "Purpose of the ROS2 Element:\n    - The `/compute_path_to_pose` action is responsible for calculating a path from a start position to a goal pose. It is typically used in navigation tasks to determine the optimal route a mobile robot should take to reach a specified destination.\n\nMobile Robot Module:\n    - This element relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It solves the problem of path planning by computing a feasible path for the robot to follow. This is crucial in scenarios where a robot needs to autonomously navigate through an environment, avoiding obstacles and optimizing travel time.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks such as autonomous navigation, where a robot needs to move from one location to another efficiently. Typical ROS2 entities that interact with this element include navigation planners and controllers that execute the computed path.",
            "interfaces": [
                {
                    "name": "nav2_msgs/action/ComputePathToPose",
                    "details": "#goal definition\ngeometry_msgs/PoseStamped goal\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\ngeometry_msgs/PoseStamped start\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\nstring planner_id\nbool use_start # If false, use current robot pose as path start, if true, use start above instead\n---\n#result definition\nnav_msgs/Path path\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tgeometry_msgs/PoseStamped[] poses\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tPose pose\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\nbuiltin_interfaces/Duration planning_time\n\tint32 sec\n\tuint32 nanosec\n---\n#feedback definition"
                }
            ]
        },
        {
            "name": "/execute_trajectory",
            "type": "action",
            "description": "Purpose of the ROS2 Element:\n    - The `/execute_trajectory` action is used to execute a pre-planned trajectory on a robot. It is typically used to control the movement of robotic arms or mobile robots by following a specified path.\n\nMobile Robot Module:\n    - This element relates to the motion control module of a mobile robot, specifically for executing planned trajectories.\n\nRelevance for Specific Tasks:\n    - This ROS2 element is crucial for tasks that require precise movement execution, such as pick-and-place operations, navigation, and manipulation tasks. It ensures that the robot follows a planned path accurately.\n\nUsage in the ROS2 System:\n    - It is suitable for use in ROS2 systems that involve MoveIt for motion planning and execution, where it interacts with nodes responsible for trajectory planning and execution.",
            "interfaces": [
                {
                    "name": "moveit_msgs/action/ExecuteTrajectory",
                    "details": "# The trajectory to execute\nRobotTrajectory trajectory\n\ttrajectory_msgs/JointTrajectory joint_trajectory\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tJointTrajectoryPoint[] points\n\t\t\tfloat64[] positions\n\t\t\tfloat64[] velocities\n\t\t\tfloat64[] accelerations\n\t\t\tfloat64[] effort\n\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\ttrajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tMultiDOFJointTrajectoryPoint[] points\n\t\t\tgeometry_msgs/Transform[] transforms\n\t\t\t\tVector3 translation\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion rotation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tgeometry_msgs/Twist[] velocities\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Twist[] accelerations\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\n---\n\n# Error code - encodes the overall reason for failure\nMoveItErrorCodes error_code\n\tint32 val\n\tint32 SUCCESS=1\n\tint32 FAILURE=99999\n\tint32 PLANNING_FAILED=-1\n\tint32 INVALID_MOTION_PLAN=-2\n\tint32 MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE=-3\n\tint32 CONTROL_FAILED=-4\n\tint32 UNABLE_TO_AQUIRE_SENSOR_DATA=-5\n\tint32 TIMED_OUT=-6\n\tint32 PREEMPTED=-7\n\tint32 START_STATE_IN_COLLISION=-10\n\tint32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-11\n\tint32 START_STATE_INVALID=-26\n\tint32 GOAL_IN_COLLISION=-12\n\tint32 GOAL_VIOLATES_PATH_CONSTRAINTS=-13\n\tint32 GOAL_CONSTRAINTS_VIOLATED=-14\n\tint32 GOAL_STATE_INVALID=-27\n\tint32 UNRECOGNIZED_GOAL_TYPE=-28\n\tint32 INVALID_GROUP_NAME=-15\n\tint32 INVALID_GOAL_CONSTRAINTS=-16\n\tint32 INVALID_ROBOT_STATE=-17\n\tint32 INVALID_LINK_NAME=-18\n\tint32 INVALID_OBJECT_NAME=-19\n\tint32 FRAME_TRANSFORM_FAILURE=-21\n\tint32 COLLISION_CHECKING_UNAVAILABLE=-22\n\tint32 ROBOT_STATE_STALE=-23\n\tint32 SENSOR_INFO_STALE=-24\n\tint32 COMMUNICATION_FAILURE=-25\n\tint32 CRASH=-29\n\tint32 ABORT=-30\n\tint32 NO_IK_SOLUTION=-31\n\n---\n\n# The internal state that the move group action currently is in\nstring state"
                }
            ]
        },
        {
            "name": "/follow_path",
            "type": "action",
            "description": "Purpose of the ROS2 Element:\n    - The `/follow_path` action is designed to guide a mobile robot along a predefined path. It is typically used for path-following tasks where the robot needs to navigate through a series of waypoints to reach a destination.\n\nMobile Robot Module:\n    - This element relates to the navigation and control modules of a mobile robot, specifically focusing on path execution and trajectory tracking.\n\nRelevance for Specific Tasks:\n    - The `/follow_path` action is crucial for tasks that require precise navigation, such as autonomous delivery, exploration, or patrol missions. It ensures the robot follows a specified path while maintaining control over its movement.\n\nUsage in the ROS2 System:\n    - This action is suitable for use in ROS2 navigation stacks, such as Nav2, where it interacts with planners and controllers to execute path-following tasks. It is commonly used in conjunction with path planners and localization systems to achieve autonomous navigation.",
            "interfaces": [
                {
                    "name": "nav2_msgs/action/FollowPath",
                    "details": "#goal definition\nnav_msgs/Path path\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tgeometry_msgs/PoseStamped[] poses\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tPose pose\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\nstring controller_id\nstring goal_checker_id\n---\n#result definition\nstd_msgs/Empty result\n---\n#feedback definition\nfloat32 distance_to_goal\nfloat32 speed"
                }
            ]
        },
        {
            "name": "/follow_waypoints",
            "type": "action",
            "description": "Purpose of the ROS2 Element:\n    - The `/follow_waypoints` action is designed to guide a mobile robot through a series of predefined waypoints. It is typically used for navigation tasks where the robot needs to follow a specific path.\n\nMobile Robot Module:\n    - This element relates to the Navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It is used to solve problems related to path following and waypoint navigation. Typical scenarios include autonomous patrols, delivery tasks, or any application requiring the robot to traverse a set path.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving the `nav2` stack, where it interacts with entities like `nav2_controller` and `nav2_planner` to execute waypoint-following actions.",
            "interfaces": [
                {
                    "name": "nav2_msgs/action/FollowWaypoints",
                    "details": "#goal definition\ngeometry_msgs/PoseStamped[] poses\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n---\n#result definition\nint32[] missed_waypoints\n---\n#feedback definition\nuint32 current_waypoint"
                }
            ]
        },
        {
            "name": "/joint_trajectory_controller/follow_joint_trajectory",
            "type": "action",
            "description": "Purpose of the ROS2 Element:\n    - The `/joint_trajectory_controller/follow_joint_trajectory` action is used to control the movement of robot joints by following a specified trajectory. It is typically used for precise joint control in robotic arms or mobile robots with articulated components.\n\nMobile Robot Module:\n    - This ROS2 element relates to the Actuation and Motion Planning modules of a mobile robot, specifically for controlling joint movements.\n\nRelevance for Specific Tasks:\n    - This element is crucial for tasks requiring precise joint positioning and movement, such as robotic arm manipulation, path following, and coordinated multi-joint movements. It ensures that joints follow a predefined path with specified tolerances.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks like robotic arm control in manufacturing, autonomous vehicle steering, and any application requiring coordinated joint movements. Typical entities interacting with this element include trajectory planners and joint controllers.",
            "interfaces": [
                {
                    "name": "control_msgs/action/FollowJointTrajectory",
                    "details": "# The trajectory for all revolute, continuous or prismatic joints\ntrajectory_msgs/JointTrajectory trajectory\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tstring[] joint_names\n\tJointTrajectoryPoint[] points\n\t\tfloat64[] positions\n\t\tfloat64[] velocities\n\t\tfloat64[] accelerations\n\t\tfloat64[] effort\n\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n# The trajectory for all planar or floating joints (i.e. individual joints with more than one DOF)\ntrajectory_msgs/MultiDOFJointTrajectory multi_dof_trajectory\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tstring[] joint_names\n\tMultiDOFJointTrajectoryPoint[] points\n\t\tgeometry_msgs/Transform[] transforms\n\t\t\tVector3 translation\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion rotation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tgeometry_msgs/Twist[] velocities\n\t\t\tVector3  linear\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  angular\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tgeometry_msgs/Twist[] accelerations\n\t\t\tVector3  linear\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  angular\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\n# Tolerances for the trajectory.  If the measured joint values fall\n# outside the tolerances the trajectory goal is aborted.  Any\n# tolerances that are not specified (by being omitted or set to 0) are\n# set to the defaults for the action server (often taken from the\n# parameter server).\n\n# Tolerances applied to the joints as the trajectory is executed.  If\n# violated, the goal aborts with error_code set to\n# PATH_TOLERANCE_VIOLATED.\nJointTolerance[] path_tolerance\n\t#\n\tstring name\n\tfloat64 position  #\n\tfloat64 velocity  #\n\tfloat64 acceleration  #\nJointComponentTolerance[] component_path_tolerance\n\tuint16 X_AXIS=1\n\tuint16 Y_AXIS=2\n\tuint16 Z_AXIS=3\n\tuint16 TRANSLATION=4\n\tuint16 ROTATION=5\n\tstring joint_name\n\tuint16 component\n\tfloat64 position\n\tfloat64 velocity\n\tfloat64 acceleration\n\n# To report success, the joints must be within goal_tolerance of the\n# final trajectory value.  The goal must be achieved by time the\n# trajectory ends plus goal_time_tolerance.  (goal_time_tolerance\n# allows some leeway in time, so that the trajectory goal can still\n# succeed even if the joints reach the goal some time after the\n# precise end time of the trajectory).\n#\n# If the joints are not within goal_tolerance after \"trajectory finish\n# time\" + goal_time_tolerance, the goal aborts with error_code set to\n# GOAL_TOLERANCE_VIOLATED\nJointTolerance[] goal_tolerance\n\t#\n\tstring name\n\tfloat64 position  #\n\tfloat64 velocity  #\n\tfloat64 acceleration  #\nJointComponentTolerance[] component_goal_tolerance\n\tuint16 X_AXIS=1\n\tuint16 Y_AXIS=2\n\tuint16 Z_AXIS=3\n\tuint16 TRANSLATION=4\n\tuint16 ROTATION=5\n\tstring joint_name\n\tuint16 component\n\tfloat64 position\n\tfloat64 velocity\n\tfloat64 acceleration\nbuiltin_interfaces/Duration goal_time_tolerance\n\tint32 sec\n\tuint32 nanosec\n\n---\nint32 error_code\nint32 SUCCESSFUL = 0\nint32 INVALID_GOAL = -1\nint32 INVALID_JOINTS = -2\nint32 OLD_HEADER_TIMESTAMP = -3\nint32 PATH_TOLERANCE_VIOLATED = -4\nint32 GOAL_TOLERANCE_VIOLATED = -5\n\n# Human readable description of the error code. Contains complementary\n# information that is especially useful when execution fails, for instance:\n# - INVALID_GOAL: The reason for the invalid goal (e.g., the requested\n#   trajectory is in the past).\n# - INVALID_JOINTS: The mismatch between the expected controller joints\n#   and those provided in the goal.\n# - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint\n#   violated which tolerance, and by how much.\nstring error_string\n\n---\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nstring[] joint_names\ntrajectory_msgs/JointTrajectoryPoint desired\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\ntrajectory_msgs/JointTrajectoryPoint actual\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\ntrajectory_msgs/JointTrajectoryPoint error\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n\nstring[] multi_dof_joint_names\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_desired\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_actual\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_error\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec"
                }
            ]
        },
        {
            "name": "/move_action",
            "type": "action",
            "description": "Purpose of the ROS2 Element:\n    - The `/move_action` is an action interface used for motion planning and execution in robotic systems. It is typically used to send motion planning requests to a planner, which then computes a trajectory for a robot to follow.\n\nMobile Robot Module:\n    - This element relates to the motion planning and control module of a mobile robot, specifically for robotic arms or manipulators.\n\nRelevance for Specific Tasks:\n    - It is used to solve problems related to path planning and execution, ensuring that a robot can move from a start state to a goal state while avoiding obstacles. Typical scenarios include robotic arm manipulation tasks in industrial automation or service robots performing pick-and-place operations.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving MoveIt, a popular motion planning framework in ROS2, where it interacts with planners to generate and execute motion plans. It is used by nodes that require precise control over robotic arm movements, such as in manufacturing or assembly line automation.",
            "interfaces": [
                {
                    "name": "moveit_msgs/action/MoveGroup",
                    "details": "# Motion planning request to pass to planner\nMotionPlanRequest request\n\tWorkspaceParameters workspace_parameters\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tgeometry_msgs/Vector3 min_corner\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tgeometry_msgs/Vector3 max_corner\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tRobotState start_state\n\t\tsensor_msgs/JointState joint_state\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] name\n\t\t\tfloat64[] position\n\t\t\tfloat64[] velocity\n\t\t\tfloat64[] effort\n\t\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\t#\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tgeometry_msgs/Transform[] transforms\n\t\t\t\tVector3 translation\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion rotation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tgeometry_msgs/Twist[] twist\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Wrench[] wrench\n\t\t\t\tVector3  force\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  torque\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\tAttachedCollisionObject[] attached_collision_objects\n\t\t\tstring link_name\n\t\t\tCollisionObject object\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tgeometry_msgs/Pose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring id\n\t\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\t\tstring key\n\t\t\t\t\tstring db\n\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\tuint8 type\n\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\tfloat32 z\n\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t\t#\n\t\t\t\t\tfloat64[4] coef\n\t\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring[] subframe_names\n\t\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tbyte ADD=0\n\t\t\t\tbyte REMOVE=1\n\t\t\t\tbyte APPEND=2\n\t\t\t\tbyte MOVE=3\n\t\t\t\tbyte operation\n\t\t\tstring[] touch_links\n\t\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tstring[] joint_names\n\t\t\t\tJointTrajectoryPoint[] points\n\t\t\t\t\tfloat64[] positions\n\t\t\t\t\tfloat64[] velocities\n\t\t\t\t\tfloat64[] accelerations\n\t\t\t\t\tfloat64[] effort\n\t\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\tfloat64 weight\n\t\tbool is_diff\n\tConstraints[] goal_constraints\n\t\tstring name\n\t\tJointConstraint[] joint_constraints\n\t\t\tstring joint_name\n\t\t\tfloat64 position\n\t\t\tfloat64 tolerance_above\n\t\t\tfloat64 tolerance_below\n\t\t\tfloat64 weight\n\t\tPositionConstraint[] position_constraints\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring link_name\n\t\t\tgeometry_msgs/Vector3 target_point_offset\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tBoundingVolume constraint_region\n\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\tuint8 type\n\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\tfloat32 z\n\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tfloat64 weight\n\t\tOrientationConstraint[] orientation_constraints\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Quaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\t\tstring link_name\n\t\t\tfloat64 absolute_x_axis_tolerance\n\t\t\tfloat64 absolute_y_axis_tolerance\n\t\t\tfloat64 absolute_z_axis_tolerance\n\t\t\tuint8 parameterization\n\t\t\tuint8 XYZ_EULER_ANGLES=0\n\t\t\tuint8 ROTATION_VECTOR=1\n\t\t\tfloat64 weight\n\t\tVisibilityConstraint[] visibility_constraints\n\t\t\tfloat64 target_radius\n\t\t\tgeometry_msgs/PoseStamped target_pose\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tPose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tint32 cone_sides\n\t\t\tgeometry_msgs/PoseStamped sensor_pose\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tPose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tfloat64 max_view_angle\n\t\t\tfloat64 max_range_angle\n\t\t\tuint8 SENSOR_Z=0\n\t\t\tuint8 SENSOR_Y=1\n\t\t\tuint8 SENSOR_X=2\n\t\t\tuint8 sensor_view_direction\n\t\t\tfloat64 weight\n\tConstraints path_constraints\n\t\tstring name\n\t\tJointConstraint[] joint_constraints\n\t\t\tstring joint_name\n\t\t\tfloat64 position\n\t\t\tfloat64 tolerance_above\n\t\t\tfloat64 tolerance_below\n\t\t\tfloat64 weight\n\t\tPositionConstraint[] position_constraints\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring link_name\n\t\t\tgeometry_msgs/Vector3 target_point_offset\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tBoundingVolume constraint_region\n\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\tuint8 type\n\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\tfloat32 z\n\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tfloat64 weight\n\t\tOrientationConstraint[] orientation_constraints\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Quaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\t\tstring link_name\n\t\t\tfloat64 absolute_x_axis_tolerance\n\t\t\tfloat64 absolute_y_axis_tolerance\n\t\t\tfloat64 absolute_z_axis_tolerance\n\t\t\tuint8 parameterization\n\t\t\tuint8 XYZ_EULER_ANGLES=0\n\t\t\tuint8 ROTATION_VECTOR=1\n\t\t\tfloat64 weight\n\t\tVisibilityConstraint[] visibility_constraints\n\t\t\tfloat64 target_radius\n\t\t\tgeometry_msgs/PoseStamped target_pose\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tPose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tint32 cone_sides\n\t\t\tgeometry_msgs/PoseStamped sensor_pose\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tPose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\tfloat64 max_view_angle\n\t\t\tfloat64 max_range_angle\n\t\t\tuint8 SENSOR_Z=0\n\t\t\tuint8 SENSOR_Y=1\n\t\t\tuint8 SENSOR_X=2\n\t\t\tuint8 sensor_view_direction\n\t\t\tfloat64 weight\n\tTrajectoryConstraints trajectory_constraints\n\t\tConstraints[] constraints\n\t\t\tstring name\n\t\t\tJointConstraint[] joint_constraints\n\t\t\t\tstring joint_name\n\t\t\t\tfloat64 position\n\t\t\t\tfloat64 tolerance_above\n\t\t\t\tfloat64 tolerance_below\n\t\t\t\tfloat64 weight\n\t\t\tPositionConstraint[] position_constraints\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tstring link_name\n\t\t\t\tgeometry_msgs/Vector3 target_point_offset\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tBoundingVolume constraint_region\n\t\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\t\tuint8 type\n\t\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\t\tfloat32 z\n\t\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tfloat64 weight\n\t\t\tOrientationConstraint[] orientation_constraints\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tgeometry_msgs/Quaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring link_name\n\t\t\t\tfloat64 absolute_x_axis_tolerance\n\t\t\t\tfloat64 absolute_y_axis_tolerance\n\t\t\t\tfloat64 absolute_z_axis_tolerance\n\t\t\t\tuint8 parameterization\n\t\t\t\tuint8 XYZ_EULER_ANGLES=0\n\t\t\t\tuint8 ROTATION_VECTOR=1\n\t\t\t\tfloat64 weight\n\t\t\tVisibilityConstraint[] visibility_constraints\n\t\t\t\tfloat64 target_radius\n\t\t\t\tgeometry_msgs/PoseStamped target_pose\n\t\t\t\t\tstd_msgs/Header header\n\t\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\t\tstring frame_id\n\t\t\t\t\tPose pose\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tint32 cone_sides\n\t\t\t\tgeometry_msgs/PoseStamped sensor_pose\n\t\t\t\t\tstd_msgs/Header header\n\t\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\t\tstring frame_id\n\t\t\t\t\tPose pose\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tfloat64 max_view_angle\n\t\t\t\tfloat64 max_range_angle\n\t\t\t\tuint8 SENSOR_Z=0\n\t\t\t\tuint8 SENSOR_Y=1\n\t\t\t\tuint8 SENSOR_X=2\n\t\t\t\tuint8 sensor_view_direction\n\t\t\t\tfloat64 weight\n\tGenericTrajectory[] reference_trajectories\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\ttrajectory_msgs/JointTrajectory[] joint_trajectory\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tJointTrajectoryPoint[] points\n\t\t\t\tfloat64[] positions\n\t\t\t\tfloat64[] velocities\n\t\t\t\tfloat64[] accelerations\n\t\t\t\tfloat64[] effort\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\tmoveit_msgs/CartesianTrajectory[] cartesian_trajectory\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring tracked_frame\n\t\t\tCartesianTrajectoryPoint[] points\n\t\t\t\tCartesianPoint point\n\t\t\t\t\tgeometry_msgs/Pose pose\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\t\tgeometry_msgs/Twist velocity\n\t\t\t\t\t\tVector3  linear\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tVector3  angular\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tgeometry_msgs/Accel acceleration\n\t\t\t\t\t\tVector3  linear\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tVector3  angular\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\tstring pipeline_id\n\tstring planner_id\n\tstring group_name\n\tint32 num_planning_attempts\n\tfloat64 allowed_planning_time\n\tfloat64 max_velocity_scaling_factor\n\tfloat64 max_acceleration_scaling_factor\n\tstring cartesian_speed_end_effector_link\n\tfloat64 max_cartesian_speed #\n\n# Planning options\nPlanningOptions planning_options\n\tPlanningScene planning_scene_diff\n\t\tstring name\n\t\tRobotState robot_state\n\t\t\tsensor_msgs/JointState joint_state\n\t\t\t\t#\n\t\t\t\t#\n\t\t\t\t#\n\t\t\t\t#\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tstring[] name\n\t\t\t\tfloat64[] position\n\t\t\t\tfloat64[] velocity\n\t\t\t\tfloat64[] effort\n\t\t\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t\t\t#\n\t\t\t\t#\n\t\t\t\t#\n\t\t\t\t#\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tstring[] joint_names\n\t\t\t\tgeometry_msgs/Transform[] transforms\n\t\t\t\t\tVector3 translation\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion rotation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tgeometry_msgs/Twist[] twist\n\t\t\t\t\tVector3  linear\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tVector3  angular\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Wrench[] wrench\n\t\t\t\t\tVector3  force\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tVector3  torque\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\tAttachedCollisionObject[] attached_collision_objects\n\t\t\t\tstring link_name\n\t\t\t\tCollisionObject object\n\t\t\t\t\tstd_msgs/Header header\n\t\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\t\tstring frame_id\n\t\t\t\t\tgeometry_msgs/Pose pose\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\t\tstring id\n\t\t\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\t\t\tstring key\n\t\t\t\t\t\tstring db\n\t\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\t\tuint8 type\n\t\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\t\tfloat32 z\n\t\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat64[4] coef\n\t\t\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\t\tstring[] subframe_names\n\t\t\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\t\t\tPoint position\n\t\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\t\tfloat64 z\n\t\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\t\tfloat64 w 1\n\t\t\t\t\tbyte ADD=0\n\t\t\t\t\tbyte REMOVE=1\n\t\t\t\t\tbyte APPEND=2\n\t\t\t\t\tbyte MOVE=3\n\t\t\t\t\tbyte operation\n\t\t\t\tstring[] touch_links\n\t\t\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\t\t\tstd_msgs/Header header\n\t\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\t\tstring frame_id\n\t\t\t\t\tstring[] joint_names\n\t\t\t\t\tJointTrajectoryPoint[] points\n\t\t\t\t\t\tfloat64[] positions\n\t\t\t\t\t\tfloat64[] velocities\n\t\t\t\t\t\tfloat64[] accelerations\n\t\t\t\t\t\tfloat64[] effort\n\t\t\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\t\tuint32 nanosec\n\t\t\t\tfloat64 weight\n\t\t\tbool is_diff\n\t\tstring robot_model_name\n\t\tgeometry_msgs/TransformStamped[] fixed_frame_transforms\n\t\t\t#\n\t\t\t#\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring child_frame_id\n\t\t\tTransform transform\n\t\t\t\tVector3 translation\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion rotation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\tAllowedCollisionMatrix allowed_collision_matrix\n\t\t\tstring[] entry_names\n\t\t\tAllowedCollisionEntry[] entry_values\n\t\t\t\tbool[] enabled\n\t\t\tstring[] default_entry_names\n\t\t\tbool[] default_entry_values\n\t\tLinkPadding[] link_padding\n\t\t\tstring link_name\n\t\t\tfloat64 padding\n\t\tLinkScale[] link_scale\n\t\t\tstring link_name\n\t\t\tfloat64 scale\n\t\tObjectColor[] object_colors\n\t\t\tstring id\n\t\t\tstd_msgs/ColorRGBA color\n\t\t\t\tfloat32 r\n\t\t\t\tfloat32 g\n\t\t\t\tfloat32 b\n\t\t\t\tfloat32 a\n\t\tPlanningSceneWorld world\n\t\t\tCollisionObject[] collision_objects\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tgeometry_msgs/Pose pose\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring id\n\t\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\t\tstring key\n\t\t\t\t\tstring db\n\t\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\t\tuint8 BOX=1\n\t\t\t\t\tuint8 SPHERE=2\n\t\t\t\t\tuint8 CYLINDER=3\n\t\t\t\t\tuint8 CONE=4\n\t\t\t\t\tuint8 PRISM=5\n\t\t\t\t\tuint8 type\n\t\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\t\tuint8 BOX_X=0\n\t\t\t\t\tuint8 BOX_Y=1\n\t\t\t\t\tuint8 BOX_Z=2\n\t\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\t\tfloat32 z\n\t\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t\t#\n\t\t\t\t\tfloat64[4] coef\n\t\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tstring[] subframe_names\n\t\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\tbyte ADD=0\n\t\t\t\tbyte REMOVE=1\n\t\t\t\tbyte APPEND=2\n\t\t\t\tbyte MOVE=3\n\t\t\t\tbyte operation\n\t\t\toctomap_msgs/OctomapWithPose octomap\n\t\t\t\tstd_msgs/Header header\n\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\tstring frame_id\n\t\t\t\tgeometry_msgs/Pose origin\n\t\t\t\t\tPoint position\n\t\t\t\t\t\tfloat64 x\n\t\t\t\t\t\tfloat64 y\n\t\t\t\t\t\tfloat64 z\n\t\t\t\t\tQuaternion orientation\n\t\t\t\t\t\tfloat64 x 0\n\t\t\t\t\t\tfloat64 y 0\n\t\t\t\t\t\tfloat64 z 0\n\t\t\t\t\t\tfloat64 w 1\n\t\t\t\toctomap_msgs/Octomap octomap\n\t\t\t\t\tstd_msgs/Header header\n\t\t\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\t\t\tint32 sec\n\t\t\t\t\t\t\tuint32 nanosec\n\t\t\t\t\t\tstring frame_id\n\t\t\t\t\tbool binary\n\t\t\t\t\tstring id\n\t\t\t\t\tfloat64 resolution\n\t\t\t\t\tint8[] data\n\t\tbool is_diff\n\tbool plan_only\n\tbool look_around\n\tint32 look_around_attempts\n\tfloat64 max_safe_execution_cost\n\tbool replan\n\tint32 replan_attempts\n\tfloat64 replan_delay\n\n---\n\n# An error code reflecting what went wrong\nMoveItErrorCodes error_code\n\tint32 val\n\tint32 SUCCESS=1\n\tint32 FAILURE=99999\n\tint32 PLANNING_FAILED=-1\n\tint32 INVALID_MOTION_PLAN=-2\n\tint32 MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE=-3\n\tint32 CONTROL_FAILED=-4\n\tint32 UNABLE_TO_AQUIRE_SENSOR_DATA=-5\n\tint32 TIMED_OUT=-6\n\tint32 PREEMPTED=-7\n\tint32 START_STATE_IN_COLLISION=-10\n\tint32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-11\n\tint32 START_STATE_INVALID=-26\n\tint32 GOAL_IN_COLLISION=-12\n\tint32 GOAL_VIOLATES_PATH_CONSTRAINTS=-13\n\tint32 GOAL_CONSTRAINTS_VIOLATED=-14\n\tint32 GOAL_STATE_INVALID=-27\n\tint32 UNRECOGNIZED_GOAL_TYPE=-28\n\tint32 INVALID_GROUP_NAME=-15\n\tint32 INVALID_GOAL_CONSTRAINTS=-16\n\tint32 INVALID_ROBOT_STATE=-17\n\tint32 INVALID_LINK_NAME=-18\n\tint32 INVALID_OBJECT_NAME=-19\n\tint32 FRAME_TRANSFORM_FAILURE=-21\n\tint32 COLLISION_CHECKING_UNAVAILABLE=-22\n\tint32 ROBOT_STATE_STALE=-23\n\tint32 SENSOR_INFO_STALE=-24\n\tint32 COMMUNICATION_FAILURE=-25\n\tint32 CRASH=-29\n\tint32 ABORT=-30\n\tint32 NO_IK_SOLUTION=-31\n\n# The full starting state of the robot at the start of the trajectory\nmoveit_msgs/RobotState trajectory_start\n\tsensor_msgs/JointState joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] name\n\t\tfloat64[] position\n\t\tfloat64[] velocity\n\t\tfloat64[] effort\n\tsensor_msgs/MultiDOFJointState multi_dof_joint_state\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tgeometry_msgs/Transform[] transforms\n\t\t\tVector3 translation\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion rotation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tgeometry_msgs/Twist[] twist\n\t\t\tVector3  linear\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  angular\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tgeometry_msgs/Wrench[] wrench\n\t\t\tVector3  force\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  torque\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\tAttachedCollisionObject[] attached_collision_objects\n\t\tstring link_name\n\t\tCollisionObject object\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tgeometry_msgs/Pose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring id\n\t\t\tobject_recognition_msgs/ObjectType type\n\t\t\t\tstring key\n\t\t\t\tstring db\n\t\t\tshape_msgs/SolidPrimitive[] primitives\n\t\t\t\tuint8 BOX=1\n\t\t\t\tuint8 SPHERE=2\n\t\t\t\tuint8 CYLINDER=3\n\t\t\t\tuint8 CONE=4\n\t\t\t\tuint8 PRISM=5\n\t\t\t\tuint8 type\n\t\t\t\tfloat64[<=3] dimensions  #\n\t\t\t\tuint8 BOX_X=0\n\t\t\t\tuint8 BOX_Y=1\n\t\t\t\tuint8 BOX_Z=2\n\t\t\t\tuint8 SPHERE_RADIUS=0\n\t\t\t\tuint8 CYLINDER_HEIGHT=0\n\t\t\t\tuint8 CYLINDER_RADIUS=1\n\t\t\t\tuint8 CONE_HEIGHT=0\n\t\t\t\tuint8 CONE_RADIUS=1\n\t\t\t\tuint8 PRISM_HEIGHT=0\n\t\t\t\tgeometry_msgs/Polygon polygon\n\t\t\t\t\tPoint32[] points\n\t\t\t\t\t\t#\n\t\t\t\t\t\t#\n\t\t\t\t\t\tfloat32 x\n\t\t\t\t\t\tfloat32 y\n\t\t\t\t\t\tfloat32 z\n\t\t\tgeometry_msgs/Pose[] primitive_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Mesh[] meshes\n\t\t\t\tMeshTriangle[] triangles\n\t\t\t\t\tuint32[3] vertex_indices\n\t\t\t\tgeometry_msgs/Point[] vertices\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Pose[] mesh_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tshape_msgs/Plane[] planes\n\t\t\t\t#\n\t\t\t\tfloat64[4] coef\n\t\t\tgeometry_msgs/Pose[] plane_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tstring[] subframe_names\n\t\t\tgeometry_msgs/Pose[] subframe_poses\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tbyte ADD=0\n\t\t\tbyte REMOVE=1\n\t\t\tbyte APPEND=2\n\t\t\tbyte MOVE=3\n\t\t\tbyte operation\n\t\tstring[] touch_links\n\t\ttrajectory_msgs/JointTrajectory detach_posture\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring[] joint_names\n\t\t\tJointTrajectoryPoint[] points\n\t\t\t\tfloat64[] positions\n\t\t\t\tfloat64[] velocities\n\t\t\t\tfloat64[] accelerations\n\t\t\t\tfloat64[] effort\n\t\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\tfloat64 weight\n\tbool is_diff\n\n# The trajectory that moved group produced for execution\nmoveit_msgs/RobotTrajectory planned_trajectory\n\ttrajectory_msgs/JointTrajectory joint_trajectory\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tJointTrajectoryPoint[] points\n\t\t\tfloat64[] positions\n\t\t\tfloat64[] velocities\n\t\t\tfloat64[] accelerations\n\t\t\tfloat64[] effort\n\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\ttrajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tMultiDOFJointTrajectoryPoint[] points\n\t\t\tgeometry_msgs/Transform[] transforms\n\t\t\t\tVector3 translation\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion rotation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tgeometry_msgs/Twist[] velocities\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Twist[] accelerations\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\n# The trace of the trajectory recorded during execution\nmoveit_msgs/RobotTrajectory executed_trajectory\n\ttrajectory_msgs/JointTrajectory joint_trajectory\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tJointTrajectoryPoint[] points\n\t\t\tfloat64[] positions\n\t\t\tfloat64[] velocities\n\t\t\tfloat64[] accelerations\n\t\t\tfloat64[] effort\n\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\ttrajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring[] joint_names\n\t\tMultiDOFJointTrajectoryPoint[] points\n\t\t\tgeometry_msgs/Transform[] transforms\n\t\t\t\tVector3 translation\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion rotation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tgeometry_msgs/Twist[] velocities\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tgeometry_msgs/Twist[] accelerations\n\t\t\t\tVector3  linear\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tVector3  angular\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\n# The amount of time it took to complete the motion plan\nfloat64 planning_time\n\n---\n\n# The internal state that the move group action currently is in\nstring state"
                }
            ]
        },
        {
            "name": "/navigate_through_poses",
            "type": "action",
            "description": "Purpose of the ROS2 Element:\n    - The `/navigate_through_poses` action is used to command a mobile robot to navigate through a series of predefined poses. It is typically used for path planning and execution in environments where the robot needs to follow a specific route.\n\nMobile Robot Module:\n    - This ROS2 element relates to the navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - This element is crucial for tasks involving autonomous navigation, such as moving through a warehouse or navigating a predefined path in a structured environment. It helps solve problems related to path following and obstacle avoidance.\n\nUsage in the ROS2 System:\n    - It is suitable for use in ROS2 navigation stacks, such as Nav2, where it interacts with planners and controllers to achieve smooth and efficient navigation through multiple waypoints.",
            "interfaces": [
                {
                    "name": "nav2_msgs/action/NavigateThroughPoses",
                    "details": "#goal definition\ngeometry_msgs/PoseStamped[] poses\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\nstring behavior_tree\n---\n#result definition\nstd_msgs/Empty result\n---\n#feedback definition\ngeometry_msgs/PoseStamped current_pose\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\nbuiltin_interfaces/Duration navigation_time\n\tint32 sec\n\tuint32 nanosec\nbuiltin_interfaces/Duration estimated_time_remaining\n\tint32 sec\n\tuint32 nanosec\nint16 number_of_recoveries\nfloat32 distance_remaining\nint16 number_of_poses_remaining"
                }
            ]
        },
        {
            "name": "/navigate_to_pose",
            "type": "action",
            "description": "Purpose of the ROS2 Element:\n    - The `/navigate_to_pose` action is used to command a mobile robot to move to a specified pose in the environment. It is typically used for navigation tasks where precise positioning is required.\n\nMobile Robot Module:\n    - This ROS2 element relates to the navigation module of a mobile robot.\n\nRelevance for Specific Tasks:\n    - It solves the problem of autonomous navigation by allowing the robot to reach a target location. Typical scenarios include moving to a specific point in a map for tasks like delivery, inspection, or exploration.\n\nUsage in the ROS2 System:\n    - Suitable for tasks involving autonomous navigation, such as in the Navigation2 stack, where it interacts with planners and controllers to achieve the desired pose.",
            "interfaces": [
                {
                    "name": "nav2_msgs/action/NavigateToPose",
                    "details": "#goal definition\ngeometry_msgs/PoseStamped pose\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\nstring behavior_tree\n---\n#result definition\nstd_msgs/Empty result\n---\n#feedback definition\ngeometry_msgs/PoseStamped current_pose\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\nbuiltin_interfaces/Duration navigation_time\n\tint32 sec\n\tuint32 nanosec\nbuiltin_interfaces/Duration estimated_time_remaining\n\tint32 sec\n\tuint32 nanosec\nint16 number_of_recoveries\nfloat32 distance_remaining"
                }
            ]
        },
        {
            "name": "/scaled_joint_trajectory_controller/follow_joint_trajectory",
            "type": "action",
            "description": "Purpose of the ROS2 Element:\n    - The `/scaled_joint_trajectory_controller/follow_joint_trajectory` action is used to control the movement of robot joints by following a specified trajectory. It is typically used for precise joint control in robotic arms or mobile robots with articulated joints.\n\nMobile Robot Module:\n    - This ROS2 element relates to the Actuation module of a Mobile Robot, specifically focusing on joint control.\n\nRelevance for Specific Tasks:\n    - This element is crucial for tasks requiring precise joint movements, such as robotic arm manipulation, path following, and coordinated multi-joint movements. It ensures that joints follow a predefined path with specified positions, velocities, and accelerations.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks like robotic arm control in industrial automation, mobile robot navigation with articulated joints, and any application requiring precise joint trajectory execution. Typical ROS2 entities interacting with this element include controllers and planners that generate joint trajectories.",
            "interfaces": [
                {
                    "name": "control_msgs/action/FollowJointTrajectory",
                    "details": "# The trajectory for all revolute, continuous or prismatic joints\ntrajectory_msgs/JointTrajectory trajectory\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tstring[] joint_names\n\tJointTrajectoryPoint[] points\n\t\tfloat64[] positions\n\t\tfloat64[] velocities\n\t\tfloat64[] accelerations\n\t\tfloat64[] effort\n\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n# The trajectory for all planar or floating joints (i.e. individual joints with more than one DOF)\ntrajectory_msgs/MultiDOFJointTrajectory multi_dof_trajectory\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tstring[] joint_names\n\tMultiDOFJointTrajectoryPoint[] points\n\t\tgeometry_msgs/Transform[] transforms\n\t\t\tVector3 translation\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion rotation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tgeometry_msgs/Twist[] velocities\n\t\t\tVector3  linear\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  angular\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tgeometry_msgs/Twist[] accelerations\n\t\t\tVector3  linear\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tVector3  angular\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\tbuiltin_interfaces/Duration time_from_start\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\n# Tolerances for the trajectory.  If the measured joint values fall\n# outside the tolerances the trajectory goal is aborted.  Any\n# tolerances that are not specified (by being omitted or set to 0) are\n# set to the defaults for the action server (often taken from the\n# parameter server).\n\n# Tolerances applied to the joints as the trajectory is executed.  If\n# violated, the goal aborts with error_code set to\n# PATH_TOLERANCE_VIOLATED.\nJointTolerance[] path_tolerance\n\t#\n\tstring name\n\tfloat64 position  #\n\tfloat64 velocity  #\n\tfloat64 acceleration  #\nJointComponentTolerance[] component_path_tolerance\n\tuint16 X_AXIS=1\n\tuint16 Y_AXIS=2\n\tuint16 Z_AXIS=3\n\tuint16 TRANSLATION=4\n\tuint16 ROTATION=5\n\tstring joint_name\n\tuint16 component\n\tfloat64 position\n\tfloat64 velocity\n\tfloat64 acceleration\n\n# To report success, the joints must be within goal_tolerance of the\n# final trajectory value.  The goal must be achieved by time the\n# trajectory ends plus goal_time_tolerance.  (goal_time_tolerance\n# allows some leeway in time, so that the trajectory goal can still\n# succeed even if the joints reach the goal some time after the\n# precise end time of the trajectory).\n#\n# If the joints are not within goal_tolerance after \"trajectory finish\n# time\" + goal_time_tolerance, the goal aborts with error_code set to\n# GOAL_TOLERANCE_VIOLATED\nJointTolerance[] goal_tolerance\n\t#\n\tstring name\n\tfloat64 position  #\n\tfloat64 velocity  #\n\tfloat64 acceleration  #\nJointComponentTolerance[] component_goal_tolerance\n\tuint16 X_AXIS=1\n\tuint16 Y_AXIS=2\n\tuint16 Z_AXIS=3\n\tuint16 TRANSLATION=4\n\tuint16 ROTATION=5\n\tstring joint_name\n\tuint16 component\n\tfloat64 position\n\tfloat64 velocity\n\tfloat64 acceleration\nbuiltin_interfaces/Duration goal_time_tolerance\n\tint32 sec\n\tuint32 nanosec\n\n---\nint32 error_code\nint32 SUCCESSFUL = 0\nint32 INVALID_GOAL = -1\nint32 INVALID_JOINTS = -2\nint32 OLD_HEADER_TIMESTAMP = -3\nint32 PATH_TOLERANCE_VIOLATED = -4\nint32 GOAL_TOLERANCE_VIOLATED = -5\n\n# Human readable description of the error code. Contains complementary\n# information that is especially useful when execution fails, for instance:\n# - INVALID_GOAL: The reason for the invalid goal (e.g., the requested\n#   trajectory is in the past).\n# - INVALID_JOINTS: The mismatch between the expected controller joints\n#   and those provided in the goal.\n# - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint\n#   violated which tolerance, and by how much.\nstring error_string\n\n---\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nstring[] joint_names\ntrajectory_msgs/JointTrajectoryPoint desired\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\ntrajectory_msgs/JointTrajectoryPoint actual\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\ntrajectory_msgs/JointTrajectoryPoint error\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\n\nstring[] multi_dof_joint_names\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_desired\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_actual\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\ntrajectory_msgs/MultiDOFJointTrajectoryPoint multi_dof_error\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec"
                }
            ]
        },
        {
            "name": "/spin",
            "type": "action",
            "description": "Purpose of the ROS2 Element:\n    - The \"/spin\" action is designed to control the rotation of a mobile robot. It allows the robot to spin around its vertical axis to a specified yaw angle within a given time allowance.\n    - It is typically used for reorienting the robot to face a new direction or to perform a 360-degree scan of the environment.\n\nMobile Robot Module:\n    - This ROS2 element relates to the motion control module of the mobile robot, specifically the rotational movement control.\n\nRelevance for Specific Tasks:\n    - The \"/spin\" action can solve problems related to navigation and orientation adjustments, such as aligning the robot with a target direction or scanning the surroundings.\n    - Typical scenarios include obstacle avoidance, path planning adjustments, and environmental mapping.\n\nUsage in the ROS2 System:\n    - It is suitable for tasks in autonomous navigation systems, where precise control of the robot's orientation is required. It interacts with navigation stacks and control nodes that manage robot movement.",
            "interfaces": [
                {
                    "name": "nav2_msgs/action/Spin",
                    "details": "#goal definition\nfloat32 target_yaw\nbuiltin_interfaces/Duration time_allowance\n\tint32 sec\n\tuint32 nanosec\n---\n#result definition\nbuiltin_interfaces/Duration total_elapsed_time\n\tint32 sec\n\tuint32 nanosec\n---\n#feedback definition\nfloat32 angular_distance_traveled"
                }
            ]
        },
        {
            "name": "/wait",
            "type": "action",
            "description": "Purpose of the ROS2 Element:\n    - The \"/wait\" action is designed to pause the execution of a task for a specified duration. It is typically used to introduce delays or wait periods in a sequence of actions, allowing for synchronization or timed operations.\n\nMobile Robot Module:\n    - This element relates to the task scheduling and execution module of a mobile robot, particularly in navigation and task coordination.\n\nRelevance for Specific Tasks:\n    - The \"/wait\" action can be used to solve problems requiring precise timing, such as waiting for a sensor to stabilize or ensuring a robot remains stationary for a set period. It is relevant in scenarios where tasks need to be delayed or synchronized with other operations.\n\nUsage in the ROS2 System:\n    - It is suitable for use in navigation stacks, such as Nav2, where actions may need to be paused or delayed. It can be used in conjunction with other actions to create complex behavior sequences in task planning and execution.",
            "interfaces": [
                {
                    "name": "nav2_msgs/action/Wait",
                    "details": "#goal definition\nbuiltin_interfaces/Duration time\n\tint32 sec\n\tuint32 nanosec\n---\n#result definition\nbuiltin_interfaces/Duration total_elapsed_time\n\tint32 sec\n\tuint32 nanosec\n---\n#feedback definition\nbuiltin_interfaces/Duration time_left\n\tint32 sec\n\tuint32 nanosec"
                }
            ]
        }
    ]
}